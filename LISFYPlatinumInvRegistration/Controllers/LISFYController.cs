using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using LISFYPlatinumInvRegistration.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Web.Mvc;
using static System.Net.Mime.MediaTypeNames;

namespace LISFYPlatinumInvRegistration.Controllers
{
    public class LISFYController : Controller
    {
        private int nprefixp = 0;
        string O_Prefix = "", O_InvName = "", O_Gender = "", O_Inv_Age = "", O_InvAgeIn = "", O_InPhone = "", O_Inv_Email = "", O_Inv_Address = "", O_Inv_Doctor = "", O_Inv_OutDoctor = "";
        string O_Branch = "", O_Dob = "", O_Nationality = "", O_CollMode = "", O_CollBy = "", O_Inv_note = "", O_Inv_User, o_Inv_Mob = "";
        string O_SampledOn = "", O_ReportedOn = "";
        int O_cmbAgeIn = 0, O_txtAgeYears = 0, O_txtmonth = 0;
        string O_Ward = ""; string O_Srf = ""; string O_Passport = ""; string O_Aadhaar = "";
        Boolean O_Urgent = false, O_ReptReqPer = false, O_ReptReqTel = false, O_ReptReqEmail = false, O_ReptReqsms = false, O_ReptReqCour = false;
        private double _Prefix = 0; string CompPlace = "";
        string PatDob = "";
        string pndfrm = "", pndto = "";
        public static int TdsId = 0;
        public static string olddata = "";

        public static bool IsNewPayement = false;
        public static bool IsNewChqueIEntry = true;
        public static bool IsNewChqueREntry = true;
        public static bool _IsNewDayBookEntry = true;
        
        //bool IsNewPayement =false;
        public static int nRefundSCheme = 0;

        connection con = new connection();
        CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
        branchdetails br = new branchdetails();
        //*****************************************
        string fordate = "";
        double PendsumNew = 0;
        public static int TstPrfrmView = 0;
        double PrependCash = 0;
        double PrePendCrd = 0;
        double Adnvce = 0;
        double Cashpend = 0;
        double TotalCash = 0;
        double TotalCard = 0;

        double ccardcoll = 0;
        double CreditPend = 0;

        double cashbalance = 0;
        double TotalPendingOn = 0;

        double npayments = 0;
        double NetCashBal = 0;
        double NetAmt = 0;
        double Creditamt = 0;

        double nBhim = 0;
        double nDiscamt = 0;
        double ngross = 0;
        //*********************
        double PendsumNew1 = 0;
        double PrependCash1 = 0;
        double PrePendCrd1 = 0;
        double Adnvce1 = 0;
        double Cashpend1 = 0;
        double TotalCash1 = 0;
        double TotalCard1 = 0;

        double ccardcoll1 = 0;
        double CreditPend1 = 0;

        double cashbalance1 = 0;
        double TotalPendingOn1 = 0;

        double npayments1 = 0;
        double NetCashBal1 = 0;
        double NetAmt1 = 0;
        double Creditamt1 = 0;
        double nBhim1 = 0;
        double nDiscamt1 = 0;
        double ngross1 = 0;
        //**************************************

        //*****************************************int Smry_Chk
        public static int BincDta = 0;
        public static int ProUserId = 0;
        public static int avoidYrIdRpt = 0;
        public static string HospitalName { get; set; }
        public int Month { get; }
        public int Monthcheck { get; }
        public string LabNoFrom = "";
        public string LabNoTo = "";
        public int Yearcheck { get; }
        public static int Smry_Chk { get; set; }
        public static int reportCheck { get; set; }
        public static DateTime StartDate = DateTime.Now;
        private readonly int alldata;
        private string filePathName;

        public static string brnchName { get; set; }
        public static string fdt { get; set; }
        public static string tdt { get; set; }
        public static string usrName { get; set; }
        public static double AhMst_Key { get; set; }
        public static int uptoCheck { get; set; }
        public static int DMCheck { get; set; }
        public static int brKey { get; set; }
        public static int usrKey { get; set; }
        public static DateTime fromdate { get; set; }
        public static DateTime todate { get; set; }
        public static string Nfile_name { get; set; }

        public static string FirmName { get; set; }
        public static string FirmAdd1 { get; set; }
        public static string FirmAdd2 { get; set; }
        public static string FirmAdd3 { get; set; }
        public static string PhoneNo { get; set; }
        public static string MailId { get; set; }
        public static string TinNo { get; set; }
        public static string CstNo { get; set; }
        public static string Br_Name { get; set; }
        //**************************************
        public ActionResult DctrVisitLstPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> dpts = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            {
                branchdetails department = new branchdetails()
                {
                    DptMnt_Id = (int)item.Id,
                    DptMnt_Name = item.Name
                };
                dpts.Add(department);

            }
            ViewBag.dptmntDls = dptmntDls;
            return PartialView();
        }
        public ActionResult RefndStmntPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> dpts = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            {
                branchdetails department = new branchdetails()
                {
                    DptMnt_Id = (int)item.Id,
                    DptMnt_Name = item.Name
                };
                dpts.Add(department);

            }
            ViewBag.dptmntDls = dptmntDls;
            return PartialView();
        }
        public ActionResult DivWisePerfmncePartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> dpts = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            {
                branchdetails department = new branchdetails()
                {
                    DptMnt_Id = (int)item.Id,
                    DptMnt_Name = item.Name
                };
                dpts.Add(department);

            }
            ViewBag.dptmntDls = dptmntDls;
            return PartialView();
        }
        public ActionResult DptWiseInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> dpts = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            {
                branchdetails department = new branchdetails()
                {
                    DptMnt_Id = (int)item.Id,
                    DptMnt_Name = item.Name
                };
                dpts.Add(department);

            }
            ViewBag.dptmntDls = dptmntDls;
            return PartialView();
        }
        public ActionResult DocMtngPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result> mstrist = new List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result>();
            mstrist = db.Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS().ToList();
            ViewBag.mstrist = mstrist;
            return PartialView();
        }
        public ActionResult CancelledInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result> mstrist = new List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result>();
            mstrist = db.Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS().ToList();
            ViewBag.mstrist = mstrist;
            return PartialView();
        }
        public ActionResult DiscWiseInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result> mstrist = new List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result>();
            mstrist = db.Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS().ToList();
            ViewBag.mstrist = mstrist;
            return PartialView();
        }
        public ActionResult BnchWiseInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;

            return PartialView();
        }
        public ActionResult UsrTrckRptPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;

            return PartialView();
        }
        public ActionResult DivWiseSmryPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;

            return PartialView();
        }
        public ActionResult DivWiseInv2Partial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var paymodeDls = db.Database.SqlQuery<branchdetails>("Stproc_GET_PAYMODE_DETAILS").ToList();
            List<branchdetails> bdlss = new List<branchdetails>();
            foreach (branchdetails itm in paymodeDls)
            {
                branchdetails b = new branchdetails()
                {
                    Inv_PayMode = itm.Inv_PayMode
                };
                bdlss.Add(b);
                if (bdlss != null)
                {
                    Session["payModedls"] = bdlss;
                }
            }
            ViewBag.paymodes = bdlss;
            var divDls = db.Database.SqlQuery<Stproc_GET_DIVISION_DETAILS_Result>("Stproc_GET_DIVISION_DETAILS").ToList();
            ViewBag.divisions = divDls;
            return PartialView();
        }
        public ActionResult DivWiseInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            var paymodeDls = db.Database.SqlQuery<branchdetails>("Stproc_GET_PAYMODE_DETAILS").ToList();
            List<branchdetails> bdlss = new List<branchdetails>();
            foreach (branchdetails itm in paymodeDls)
            {
                branchdetails b = new branchdetails()
                {
                    Inv_PayMode = itm.Inv_PayMode
                };
                bdlss.Add(b);
                if (bdlss != null)
                {
                    Session["payModedls"] = bdlss;
                }
            }
            ViewBag.paymodes = bdlss;
            var divDls = db.Database.SqlQuery<Stproc_GET_DIVISION_DETAILS_Result>("Stproc_GET_DIVISION_DETAILS").ToList();
            ViewBag.divisions = divDls;
            return PartialView();
        }
        public ActionResult PatWiseInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult UsrWiseColSmryPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult UsrWiseColPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult MnthCollSmryBnchPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult MnthlyCollDivPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult MnthlyCollSmryPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult PatIDbillClnPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult DlyCashInvPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult CollSmryBnchPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult CollSmtBnchPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult DailyClctnSmry2Partial()
        {
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            return PartialView();
        }
        public ActionResult DailyClctnSmryPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult DailyClctnStmntPartial()
        {
            List<branchdetails> bs = new List<branchdetails>();
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            var brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
            }
            ViewBag.brlist = bs;
            return PartialView();
        }
        public ActionResult Login()
        {
            logindetails ld = new logindetails();
            List<yeardetails> y = new List<yeardetails>();
            y = db.Database.SqlQuery<yeardetails>("Stproc_GET_YEAR_DETAILS").ToList();
            ViewBag.LoginImage = "LOGOMG.svg";
            //ViewBag.LoginImage = "LOGOMG.jpg";
            ViewBag.Brnchdls = db.Stproc_GET_BRNCH_DETAILS().ToList();
            ViewBag.list = y;
            return View();


        }
        //public ActionResult 
        public static string Encrypt(string input, string key)
        {
            byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }
        [HttpPost]
        public JsonResult Login(logindetails login)
        {
            try
            {
                //BrMst_Key BrMst_Name  Yr_Id UserName Password Yr_FYear
                if (login.Usr_Name != null && login.Usr_pwd != null)
                {

                    SqlCommand cmd = new SqlCommand();

                    //int LabCorp_Id = login.LabCorp_Id;
                    string UserName = (login.Usr_Name).Trim();
                    string Password = login.Usr_pwd;
                    string En_password = Encrypt(Password.Trim(), "sblw-3hn8-sqoy19");
                    int YrId = (int)login.Yr_Id;
                    //var loginobjects = db.Stproc_CHECK_LOGIN_DETAILS(UserName, En_password).ToList();
                    var loginobject = db.Users.Where(usr => usr.Usr_Name == UserName && usr.Usr_pwd == En_password).Select(u => new { u.Usr_Name, u.Usr_pwd, u.Usr_key }).ToList();
                    var usrId = db.Users.Where(usr => usr.Usr_Name == UserName && usr.Usr_pwd == En_password).Select(u => u.Usr_key).FirstOrDefault();
                    var Usr_EmpId = db.Users.Where(usr => usr.Usr_Name == UserName && usr.Usr_pwd == En_password).Select(u => u.Usr_EmpId).FirstOrDefault();
                    if (loginobject != null)
                    {
                        foreach (var item in loginobject)
                        {
                            logindetails logn = new logindetails()
                            {
                                Usr_Name = item.Usr_Name,
                                Usr_pwd = item.Usr_pwd,
                                BrMst_Key = login.BrMst_Key,
                                BrMst_Name = login.BrMst_Name,
                                Yr_Id = login.Yr_Id,
                                Usr_key = (int)usrId,
                                Usr_EmpId = (int)Usr_EmpId
                            };
                            if (logn != null)
                            {
                                Session["logindls"] = logn;
                                return Json(new { Result = "OK", Record = logn });
                            }
                        }
                        return Json(new { Result = "ERROR" });
                    }
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }
                return Json(new { Result = "OK" });
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe });
            }
        }
        public ActionResult TestStatements()
        {
            return View();
        }
        public ActionResult HomePage()
        {
            string tdid = "";
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? Yr_Id = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
            }
            //opstatus = dr["OpBl_OpStatus"].ToString();
            ViewBag.BrnchName = l.BrMst_Name;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            DateTime DateTemp = DateTime.Now;
            branchdetails dateDetls = Session["dateDls"] as branchdetails;
            sqlcon.Open();
            string AhMst_pName = "";
            double AhMst_Key = 0;
            List<branchdetails> brdls = new List<branchdetails>();
            //*****************************************************************
            SqlCommand cmd1 = new SqlCommand("select AhMst_pName,AhMst_Key from AccountHeads_Mst where AhMst_Type = 'AGENT' And AhMst_IsActive = 1", sqlcon);
            SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
            DataTable dt1 = new DataTable();
            sda1.Fill(dt1);
            foreach (DataRow dr in dt1.Rows)
            {
                branchdetails bds = new branchdetails()
                {
                    AhMst_pName = dr["AhMst_pName"].ToString(),
                    AhMst_Key = Convert.ToDouble(dr["AhMst_Key"])
                };
                brdls.Add(bds);
            }
            ViewBag.AgentDtls = brdls;
            //*****************************************************************
            double ccardcoll = 0;
            int CompanyId = 2;
            double PendsumNew = 0;
            int YearId = 2122;
            double PrependCash = 0;
            double PrePendCrd = 0;

            string sqlStr = "";
            //************************************
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy hh:mm tt");
            string todatee = tdate.ToString("dd/MM/yyyy hh:mm tt");
            string cashcurdate = frmdate.ToString("dd/MM/yyyy");
            ViewBag.cashcurdate = cashcurdate;
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            DateTime redate = DateTime.Now;

            string reportdate = redate.ToString("dd/MM/yyyy hh:mm tt");
            ViewBag.reportdate = reportdate;
            ViewBag.AboutUsImage = "ABOUTUS.jpg";
            //ViewBag.HomeImage = "LOGOMG.jpg";
            ViewBag.HomeImage = "LOGOMG.svg";
            List<branchdetails> dpts = new List<branchdetails>();
            List<paymodeDetails> paymode = new List<paymodeDetails>();
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> usls = new List<branchdetails>();
            List<branchdetails> bdls = new List<branchdetails>();
            List<branchdetails> brlist = new List<branchdetails>();
            List<collectionDetails> collDtls = new List<collectionDetails>();
            List<collectionDetails> drDtls = new List<collectionDetails>();
            List<collectionDetails> tstDtls = new List<collectionDetails>();
            //*********************************************************
            int temprow = 0;
            int tmprow = 0;
            SqlCommand cmd;
            cmd = new SqlCommand("select Mstr_Desc,Mstr_Code,Mstr_Key from Masters where Mstr_Type='Specilzed' ", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt2 = new DataTable();
            sda.Fill(dt2);
            foreach (DataRow dr in dt2.Rows)
            {
                collectionDetails cds = new collectionDetails()
                {
                    Mstr_Desc = dr["Mstr_Desc"].ToString(),
                    Mstr_Code = dr["Mstr_Code"].ToString(),
                    Mstr_Key = Convert.ToInt32(dr["Mstr_Key"])
                };
                collDtls.Add(cds);
                temprow += 1;
            }

            ViewBag.splzdDtls = collDtls;


            ///////////////////////////////
            //var selectreportkey = (from c in db.Report_Dispatching where c.RptDis_YrId == (decimal)(YearId) && c.RptDis_CpyId == (decimal)CompanyId select (c.RptDis_Key)).FirstOrDefault();
            //if (selectreportkey != 0)
            //{
            //    var ReportDispatchkey = (from c in db.Report_Dispatching
            //                             where c.RptDis_YrId == (decimal)(YearId) && c.RptDis_CpyId == (decimal)CompanyId
            //                             select (c.RptDis_Key)).Max();
            //var ReportDispatchkey = db.Report_Dispatching.Max(acc => acc.RptDis_Key)+1;


            var ReportDispatchkey = (db.Report_Dispatching.Select(x => (int?)x.RptDis_Key).Max() ?? 0) + 1;
            ViewBag.ReportDispatchkey = ReportDispatchkey;



            //var accountlist = from c in db.AccountHeads_Mst

            //                  select c.AhMst_Key;
            //int accountkey = accountlist;
            //var TdsId= from c in db.SETTINGS where c.StgValue = accountlist

            //ViewBag.result = customerlist
            //var accountid =db.AccountHeads_Mst
            //}
            //var ReportDispatchkey = from c in db.Report_Dispatching  where select c;
            //////////////////////////////////
            cmd = new SqlCommand("SELECT TstMst_name AS Name,TstMst_Key AS Id FROM Test_Mst WITH (NOLOCK) ORDER BY TstMst_name", sqlcon);
            sda = new SqlDataAdapter(cmd);
            DataTable dt3 = new DataTable();
            sda.Fill(dt3);
            foreach (DataRow dr in dt3.Rows)
            {
                collectionDetails cds = new collectionDetails()
                {
                    TstMst_name = dr["Name"].ToString(),
                    TstMst_Key = dr["Id"].ToString()
                };
                tstDtls.Add(cds);
                temprow += 1;
            }
            ViewBag.tstDtls = tstDtls;

            //SqlCommand cmd3 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + " ", sqlcon);

            //int TransNo = 0;
            //string txtTransNo = "";
            //int txtTransNoid = 0;
            //TransNo = Convert.ToInt32(cmd3.ExecuteScalar());

            //if (TransNo != 0)
            //{
            //    TransNo += 1;
            //      txtTransNo = TransNo.ToString();
            //   txtTransNoid= TransNo;

            //}
            //else
            //{
            //    txtTransNo = "1";
            //    txtTransNoid = 1;
            //}
            //ViewBag.txtTransNoid = txtTransNoid;
            //ViewBag.txtTransNo = txtTransNo;

            ///////////////////////////////
            cmd = new SqlCommand(" select AhMst_pName,AhMst_Key,AhMst_SplID from AccountHeads_Mst where AhMst_Type = 'Doctor' and   AhMst_IsActive=1 ", sqlcon);
            sda = new SqlDataAdapter(cmd);
            DataTable dtDoctor = new DataTable();
            sda.Fill(dtDoctor);
            foreach (DataRow dr in dtDoctor.Rows)
            {
                collectionDetails dctrDls = new collectionDetails()
                {
                    AhMst_pName = dr["AhMst_pName"].ToString(),
                    AhMst_Key = Convert.ToInt32(dr["AhMst_Key"]),
                    AhMst_SplID = Convert.ToDouble(dr["AhMst_SplID"])
                };
                drDtls.Add(dctrDls);
                //grdDoctrs["SlNo", temprow].Value = temprow + 1;
                //grdDoctrs["DoctorsName", temprow].Value = dr["AhMst_pName"];
                //grdDoctrs["DctrId", temprow].Value = dr["AhMst_Key"];
                //grdDoctrs["SpllId", temprow].Value = dr["AhMst_SplID"];
                tmprow += 1;
            }
            ViewBag.DoctorDtls = drDtls;
            //*********************************************************
            List<Stproc_GET_CORPORATE_DTLS_Result> corpList = new List<Stproc_GET_CORPORATE_DTLS_Result>();
            corpList = db.Stproc_GET_CORPORATE_DTLS().ToList();
            ViewBag.corpList = corpList;
            List<branchdetails> brUsedls = new List<branchdetails>();
            ////******************************************************Usr_Name Usr_EmpId
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            sqlCmd.CommandText = "SELECT ISNULL(Usr_Name,'') AS Usr_Name,ISNULL(Usr_EmpId,0) AS Usr_EmpId FROM Users WITH (NOLOCK) WHERE Usr_EmpId >0  ORDER BY Usr_Name";
            sda = new SqlDataAdapter(sqlCmd);
            //string Usr_Name
            DataTable dt = new DataTable();
            sda.Fill(dt1);
            if (dt1.Rows.Count > 0)
            {
                //grdCorporate.Rows.Add(dt.Rows.Count);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        branchdetails bs1 = new branchdetails()
                        {
                            Usr_Name = dr["Usr_Name"].ToString(),
                            Usr_EmpId = Convert.ToDouble(dr["Usr_EmpId"].ToString())
                        };
                        brUsedls.Add(bs1);
                    }
                    catch { }
                }
            }
            ViewBag.pndUsrDls = brUsedls;
            //*********************************************************
            List<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result> DrSplzdList = new List<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result>();
            DrSplzdList = db.Database.SqlQuery<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result>("Stproc_GET_DOCTOR_SPECIALIZED_DETAILS").ToList();
            ViewBag.DrSplzdList = DrSplzdList;
            List<Stproc_GET_BRANCH_DETAILS_Result> brlists = new List<Stproc_GET_BRANCH_DETAILS_Result>();
            var usrdls = db.Database.SqlQuery<Stproc_GET_USER_DETAILS_Result>("Stproc_GET_USER_DETAILS").ToList();
            ViewBag.Users = usrdls;
            //var divDls = db.Database.SqlQuery<Stproc_GET_DIVISION_DETAILS_Result>("Stproc_GET_DIVISION_DETAILS").ToList();
            //ViewBag.divisions = divDls;
            var doctrDls = db.Database.SqlQuery<Stproc_GET_DOCTOR_DETAILS_Result>("Stproc_GET_DOCTOR_DETAILS").ToList();
            ViewBag.doctors = doctrDls;
            //var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            //foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            //{
            //    branchdetails department = new branchdetails()
            //    {
            //        DptMnt_Id = (int)item.Id,
            //        DptMnt_Name = item.Name
            //    };
            //    dpts.Add(department);

            //}
            //ViewBag.dptmntDls = dptmntDls;
            //var paymodeDls = db.Database.SqlQuery<branchdetails>("Stproc_GET_PAYMODE_DETAILS").ToList();
            //List<branchdetails> bdlss = new List<branchdetails>();
            //foreach (branchdetails itm in paymodeDls)
            //{
            //    branchdetails b = new branchdetails()
            //    {
            //        Inv_PayMode = itm.Inv_PayMode
            //    };
            //    bdlss.Add(b);
            //    if (bdlss != null)
            //    {
            //        Session["payModedls"] = bdlss;
            //    }
            //}
            //ViewBag.paymodes = bdlss;
            //List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result> mstrist = new List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result>();
            //mstrist = db.Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS().ToList();
            //ViewBag.mstrist = mstrist;
            brlist = db.Database.SqlQuery<branchdetails>("Stproc_GET_BRANCH_DETAILS").ToList();
            brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
                if (brnc != null)
                {
                    Session["branchdls"] = bs;
                }
            }
            foreach (Stproc_GET_USER_DETAILS_Result item in usrdls)
            {
                branchdetails usdls = new branchdetails()
                {
                    AhMst_Key = (double)item.AhMst_Key,
                    AhMst_pName = item.AhMst_pName
                };
                usls.Add(usdls);
                if (usdls != null)
                {
                    Session["usrdtls"] = usls;
                }
            }
            ViewBag.brlist = bs;
            sqlcon.Close();
            return View();

        }
        //sreelakshmi-----------------------
        public JsonResult GetACCOUNTNAME()
        {



            var accountlist = from c in db.AccountHeads_Mst
                              where c.AhMst_pName != null
                              //orderby c.AhMst_pName 
                              select c;
            //ViewBag.result = customerlist;

            {
                //return Json(customerlist, JsonRequestBehavior.AllowGet);
                var jsonResult = Json(accountlist, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;
            }

        }
        public JsonResult GETCASHRECACCOUNTNAME()
        {
            var actlist = from c in db.AccountHeads_Mst
                          where c.AhMst_pName != null && c.AhMst_IsActive == 1
                         
                          select c;

            var jsonResult = Json(actlist, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }

        public JsonResult GETSETACCOUNTNAME()
        {
            var actlist = from c in db.AccountHeads_Mst
                          where c.AhMst_pName != null && c.AhMst_IsActive == 1 && (c.AhMst_Type == "AccHd" || c.AhMst_Type == "Hosp")
                          //orderby c.AhMst_pName 
                          select c;

            var jsonResult = Json(actlist, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }
        public JsonResult GETTESTNAME()
        {
            var tstlist = from c in db.Test_Mst orderby c.TstMst_name select c;

            var jsonResult = Json(tstlist, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }


        public JsonResult GETREFNAME()
        {

            var refbyname = (from c in db.AccountHeads_Mst
                             where c.AhMst_Type == "Doctor" && c.AhMst_IsActive == 1
                             select c).ToList();
            //return Json(refbyname, JsonRequestBehavior.AllowGet);
            var jsonResult = Json(refbyname, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;


        }
        public JsonResult GETOUTDR()
        {

            var outdrname = (from c in db.AccountHeads_Mst
                             where c.AhMst_Type == "Patient" && c.AhMst_IsActive == 1
                             select c).ToList();
            //return Json(refbyname, JsonRequestBehavior.AllowGet);
            var jsonResult = Json(outdrname, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;


        }
        public JsonResult GETCORPORATE()
        {

            var corporatelist = (from c in db.AccountHeads_Mst
                                 where c.AhMst_Type == "AccHd" || c.AhMst_Type == "Hosp" && c.AhMst_IsActive == 1
                                 select c).ToList();

            var jsonResult = Json(corporatelist, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;

            //return Json(corporatelist.ToList());

        }






        private static void NewMethod(JsonResult jsonResult)
        {
            jsonResult.MaxJsonLength = int.MaxValue;
        }

        public JsonResult Getaccountgrp()
        {
            //var accountgrp = db.AccountGroups.ToList();
            var accountgrp = from c in db.AccountGroups
                             where c.AcGrp_GrpName != null
                             //orderby c.AcGrp_GrpName
                             select c;

            {
                return Json(accountgrp, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GETCOLLBYSTAFF()
        {

            var collbyedit = (from c in db.AccountHeads_Mst
                              where c.AhMst_Type == "Staff" && c.AhMst_IsActive == 1
                              select c).ToList();
            //return Json(refbyname, JsonRequestBehavior.AllowGet);
            var jsonResult = Json(collbyedit, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;


        }

        public JsonResult SPLACCOUTLEDGER(accountledgercs sprate)
        {

            int AhMst_Key = 0;

            try
            {
                AhMst_Key = sprate.AhMst_Key;

            }
            catch
            {

            }
            if (AhMst_Key != 0)
            {
                var splrlist = db.Special_Rates.Where(sp1 => sp1.SplR_ID == AhMst_Key).ToList();
                if (splrlist.Count > 0)
                {
                    return Json(new { Result = "This Account is Already Set Special Rates" });
                }


            }
            return Json(JsonRequestBehavior.AllowGet);
        }

        //************* SAVE ACCOUNTLEDGER ********************
        [HttpPost]
        public JsonResult SAVEVIEWACCOUTLEDGER(accountledgercs ah)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;

            int IsActive = 0;
            int SendMail = 0;
            int CrLimit = 0;
            double OpeningBal = 0;
            decimal DisPer = 0;
            int SchemeId = 0;
            int AccountKey = 0;
            decimal TstDiscPer = 0;
            int Crdays = 0;
            int CustTypeId = 0;
            string txtAreaid = "";
            string nGroupCode = "";
            bool avoid = ah.IsAvdLettHead;
            bool AvdHd = ah.IsAvdHd;
            int IsAvdLettHead = 0;
            string txtGroupid = "";
            int txtSchemeid = 0;
            int txtCustTypeid = 0;
            int txtLedgerNameid = 0;
            string txtLedgerName = "";
            string txtACgrpName = "";
            bool chkEmailReport = true;
            string txtEmail = "";
            string txtCreditLmt = "";
            string txtOpeningBalnc = "";
            string txtDiscount = "";
            string txtTstDiscPer = "";
            string txtcrDays = "";
            bool chkIsActive = true;
            string InsertMode = "";
            string AhMst_Address = "";
            string AhMst_Phno = "";
            string AhMst_mobile = "";
            string AhMst_Note = "";
            string grpname = "";
            string txtCustType = "";
            string scheme = "";
            int txtACgrpId = 0;
            string cmbPayType = "";
            string cmbOpnType = "";
            //string confirm = "";
            int splrChk = 0;
            int openbalanceid = 0;

            int ExsistHosId = 0;
            string txtArea = "";
            double? YearId = l.Yr_Id;
            string usrLogData = "";

            try
            {
                scheme = ah.txtScheme;
                //txtLedgerName = ah.txtLedgerName;
                grpname = ah.HEAD;
                txtCustType = ah.AhMst_CustType;
                avoid = ah.IsAvdLettHead;
                txtACgrpName = ah.AcGrp_GrpName;
                chkEmailReport = ah.chkEmailReport;

                chkIsActive = ah.chkIsActive;
                InsertMode = ah.InsertMode;
                IsActive = Convert.ToInt16(ah.IsActive);
                SendMail = Convert.ToInt16(ah.SendMail);
                txtLedgerName = ah.AhMst_pName;
                txtGroupid = ah.txtGroupid;
                txtCustTypeid = ah.txtCustTypeid;
                splrChk = ah.splrChk;
                Crdays = ah.AhMst_CRDays;
                CrLimit = ah.AhMst_CrLimit;
                AhMst_Address = ah.AhMst_Address;
                AhMst_Phno = ah.AhMst_Phno;
                AhMst_mobile = ah.AhMst_mobile;
                txtEmail = ah.AhMst_Email;
                AhMst_Note = ah.AhMst_Note;
                txtACgrpId = ah.txtACgrpId;
                //accounthead.AhMst_Type = ah.AhMst_Type;
                txtSchemeid = ah.txtSchemeid;
                txtArea = Convert.ToString(ah.txtArea);
                txtAreaid = Convert.ToString(ah.AhMst_AreaID);
                DisPer = Convert.ToDecimal(ah.AhMst_DiscPer);
                TstDiscPer = Convert.ToDecimal(ah.AhMst_TstDiscPer);
                txtCreditLmt = ah.txtCreditLmt;
                CrLimit = ah.CrLimit;
                OpeningBal = ah.OpeningBal;
                txtDiscount = ah.txtDiscount;
                txtTstDiscPer = ah.txtTstDiscPer;
                cmbPayType = ah.cmbPayType;
                cmbOpnType = ah.cmbOpnType;
                SchemeId = ah.txtSchemeid;
                AccountKey = ah.AhMst_Key;
                txtLedgerNameid = ah.AhMst_Key;






            }
            catch (Exception exe)
            {
            }

            if (avoid == true)
            {
                IsAvdLettHead = 1;
            }

            int IsAvdHd = 0;
            if (AvdHd == true)
            {
                IsAvdHd = 1;
            }
            try
            {
                nGroupCode = txtGroupid.ToString();
            }
            catch { }

            int AreaId = 0;
            try
            {
                AreaId = Convert.ToInt32(txtAreaid);
            }
            catch { }
            try
            {
                SchemeId = Convert.ToInt32(txtSchemeid);

            }
            catch { }

            try
            {
                CustTypeId = Convert.ToInt32(txtCustTypeid);

            }
            catch { }

            SqlCommand cmd5;



            double accKey = 0;
            var saveEdit = db.AccountHeads_Mst.Where(a => a.AhMst_Key == txtLedgerNameid).ToList();
            foreach (var svedt in saveEdit)
            {
                db.AccountHeads_Mst.Remove(svedt);
            }
            db.SaveChanges();
            if (saveEdit.Count > 0)
            {
                InsertMode = "Old";

            }
            else
            {
                InsertMode = "New";
            }


            //string usrLogData = "";





            if (InsertMode == "New")
            {
                accKey = db.AccountHeads_Mst.Max(acc => acc.AhMst_Key) + 1;
                cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='AccHd' And [AhMst_pName]='" + txtLedgerName + "'", sqlcon);
                usrLogData = "ACCOUNT LEDGER CREATED -" + txtLedgerNameid.ToString() + "_" + txtLedgerName;
               UserTrackInsert(usrLogData, "ACCOUNT LEDGER", 15);
            }
            else
            {
                accKey = Convert.ToDouble(txtLedgerNameid);
                ExsistHosId = Convert.ToInt32(txtLedgerNameid);
                cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='AccHd' And [AhMst_pName]='" + txtLedgerName + "' And AhMst_Key!=" + ExsistHosId + " ", sqlcon);
                usrLogData = "ACCOUNT LEDGER EDITED -" + txtLedgerNameid.ToString() + "_" + txtLedgerName;
                UserTrackInsert(usrLogData, "ACCOUNT LEDGER", 16);
            }
            //**********Check in Special Rates*****************
            if (SchemeId > 0)
            {
                SqlCommand SqlCmd;
                int Exisistspec = 0;

                try
                {
                    AccountKey = Convert.ToInt32(txtLedgerNameid);
                    SqlCmd = new SqlCommand("SELECT ISNULL(COUNT(SplR_ID),0) FROM Special_Rates WHERE  SplR_ID=" + AccountKey + "", sqlcon);
                    Exisistspec = Convert.ToInt32(SqlCmd.ExecuteScalar());

                }
                catch { }

                if (Exisistspec > 0)
                {


                    SqlCmd = new SqlCommand("DELETE FROM Special_Rates WHERE SplR_ID='" + AccountKey + "'", sqlcon);
                    SqlCmd.ExecuteNonQuery();


                }
            }
            //****************************
            try
            {
                if (txtLedgerName != "")
                {
                    if (txtACgrpName != "")
                    {
                        if (chkEmailReport == true)
                        {
                            SendMail = 1;
                            if (txtEmail == "")
                            {

                                return Json(new { Result = "Invalid Email" });
                            }
                        }



                        if (txtCreditLmt != "")
                        {
                            CrLimit = Convert.ToInt32(txtCreditLmt);

                        }
                        if (txtOpeningBalnc != "")
                        {
                            double tempVal = 0;
                            try
                            {
                                tempVal = Convert.ToDouble(txtOpeningBalnc);
                            }
                            catch { }
                            OpeningBal = tempVal;

                        }
                        if (txtDiscount != "")
                        {
                            DisPer = Convert.ToInt32(txtDiscount);

                        }
                        if (txtTstDiscPer != "")
                        {
                            TstDiscPer = Convert.ToInt32(txtTstDiscPer);
                        }
                        try { Crdays = Convert.ToInt32(txtcrDays); } catch { }
                        Master mast = new Master();
                        var mastid = db.Masters.Max(acc => acc.Mstr_Key) + 1;
                        mast.Mstr_Key = mastid;
                        mast.Mstr_Desc = ah.txtArea;
                        mast.Mstr_Type = "Area";
                        db.Masters.Add(mast);

                        ah.AhMst_AreaID = mastid;
                        AccountHeads_Mst accounthead = new AccountHeads_Mst();
                        accounthead.AhMst_Key = Convert.ToInt32(accKey);
                        accounthead.AhMst_pName = ah.AhMst_pName;
                        accounthead.AhMst_CRDays = ah.AhMst_CRDays;
                        accounthead.AhMst_CrLimit = ah.AhMst_CrLimit;
                        accounthead.AhMst_Address = ah.AhMst_Address;
                        accounthead.AhMst_Phno = ah.AhMst_Phno;
                        accounthead.AhMst_mobile = ah.AhMst_mobile;
                        accounthead.AhMst_Email = ah.AhMst_Email;
                        accounthead.AhMst_Note = ah.AhMst_Note;
                        accounthead.AhMst_AcGrpId = Convert.ToString(ah.txtACgrpId);

                        accounthead.AhMst_SchemeId = ah.txtSchemeid;
                        accounthead.AhMst_AreaID = ah.AhMst_AreaID;
                        accounthead.AhMst_DiscPer = Convert.ToDouble(ah.AhMst_DiscPer);
                        accounthead.AhMst_TstDiscPer = Convert.ToDouble(ah.AhMst_TstDiscPer);

                        accounthead.GROUPCODE = ah.txtGroupid;
                        accounthead.AhMst_Type = "AccHd";
                        accounthead.AhMst_CustTypeId = ah.txtCustTypeid;

                        accounthead.AhMst_IsLettHd = ah.IsAvdLettHead;
                        accounthead.AhMst_SendMail = Convert.ToInt16(ah.SendMail);
                        accounthead.AhMst_IsActive = Convert.ToInt16(ah.IsActive);
                        accounthead.AhMst_PayType = ah.cmbPayType;
                        db.AccountHeads_Mst.Add(accounthead);


                        var openbalancesave = db.Opening_Balance.Where(a => a.OpBl_AccId == txtLedgerNameid && a.OpBl_YrId == YearId).ToList();
                        foreach (var svedt in openbalancesave)
                        {
                            db.Opening_Balance.Remove(svedt);
                        }
                        db.SaveChanges();
                        if (openbalancesave.Count > 0)
                        {
                            InsertMode = "Old";
                        }
                        else
                        {
                            InsertMode = "New";
                        }


                        if (InsertMode == "New")
                        {

                            Opening_Balance openbalance = new Opening_Balance();


                            openbalanceid = db.Opening_Balance.Max(acc => acc.OpBl_Key) + 1;
                            openbalance.OpBl_Key = openbalanceid;
                            openbalance.OpBl_AccId = Convert.ToInt32(accKey);
                            openbalance.OpBl_OpBalance = ah.OPBALANCE;


                            openbalance.OpBl_UsrId = 2;
                            openbalance.OpBl_YrId = Convert.ToInt32(YearId);

                            openbalance.OpBl_OpStatus = ah.cmbOpnType;
                            openbalance.Head = ah.AhMst_pName;

                            db.Opening_Balance.Add(openbalance);
                        }
                        if (InsertMode == "Old")
                        {

                            Opening_Balance openbalance = new Opening_Balance();
                            openbalanceid = db.Opening_Balance.Max(acc => acc.OpBl_Key) + 1;
                            openbalance.OpBl_Key = openbalanceid;

                            openbalance.OpBl_AccId = Convert.ToInt32(accKey);


                            openbalance.OpBl_OpBalance = ah.OPBALANCE;


                            openbalance.OpBl_UsrId = 2;
                            openbalance.OpBl_YrId = Convert.ToInt32(YearId);

                            openbalance.OpBl_OpStatus = ah.cmbOpnType;
                            openbalance.Head = ah.AhMst_pName;

                            db.Opening_Balance.Add(openbalance);
                        }

                        db.SaveChanges();

                        if (chkIsActive == true)
                        {
                            IsActive = 1;
                        }

                        return Json(new { Result = "Done" });


                    }
                    else
                    {
                        return Json(new { Result = "Empty Account Group" });

                    }

                }
                else
                {
                    return Json(new { Result = "Empty Ledger Name" });

                }

            }
            catch (Exception exe)
            {
                var x = exe.InnerException;
                var y = exe.Message;
                return Json(new { Result = "error" });

            }


        }
        //*************END- SAVE ACCOUNTLEDGER ********************




//***************************SAVE-PENDING-COLLECTION *******************
        public JsonResult SAVEPNDCOLLECTION(PENDINGCOLLECTION savepending)
        {
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();

                string txtCrAccountid = "";
                int nPndC_Key = 0;
                int nInvNo = 0, result = 0;
                double nCurBal = 0, nRcdAmt = 0;
                double nChkVal = 0;
                int Crid = 0;
                string cmbPayMode = "";
                int txtLabNo = 0;
                string txtCollAmt = "";
                string _TempInvNo = "";
                string txtCrNo = "";
                string txtInvAmt = "";
                string txtName = "";
                double txtCurBalance = 0;
                int agedd = 0;
                int agemm = 0;
                int ageyy = 0;
                double YearId = 2223;
                double CompanyId = 2;
                int UserId = l.Usr_key;
                string UserName = l.Usr_Name;
                string SysName = System.Environment.MachineName;
                DateTime dtpCollDate = new DateTime();

                try
                {
                    txtLabNo = savepending.pendlabno;
                    txtLabNo = savepending.pendlabno;
                    txtName = savepending.pndname;
                    txtInvAmt = savepending.pndamt;
                    txtCrAccountid = savepending.pndbankid;
                    txtCollAmt = savepending.pndcollamt;
                    cmbPayMode = savepending.pndpaymode;
                    txtCrNo = savepending.pndcardno;
                    nRcdAmt = Convert.ToDouble(savepending.pndcollamt);
                    txtCurBalance = Convert.ToDouble(savepending.pndcurbalance);
                    dtpCollDate = Convert.ToDateTime(savepending.pndcoldatetime);
                    agedd = savepending.agedd;
                    agemm = savepending.agemm;
                    ageyy = savepending.ageyy;







                }
                catch { }
                try
                {
                    sqlcon.Open();
                    SqlCommand sqlcmd0 = new SqlCommand();
                    sqlcmd0.Connection = sqlcon;
                    sqlcmd0.CommandType = CommandType.Text;
                    sqlcmd0.CommandText = "SELECT ISNULL(A.Inv_No, 0) Inv_No,ISNULL(A.Inv_YrId, 0) Inv_YrId,ISNULL(A.Inv_CpyId, 0) Inv_CpyId,ISNULL(A.Inv_Tittle, '') Inv_Tittle,ISNULL(A.Inv_name, '') Inv_name,ISNULL(A.Inv_Gender, '') Inv_Gender,ISNULL(A.Inv_ageDD, 0) Inv_ageDD ,ISNULL(A.Inv_ageMM, 0) Inv_ageMM,ISNULL(A.Inv_ageYY, 0) Inv_ageYY,ISNULL(A.Inv_phno, '') Inv_phno,ISNULL(A.Inv_date, '') inv_date,ISNULL(A.Inv_Email, '') Inv_Email,ISNULL(A.Inv_Comment, '') Inv_Comment,ISNULL(A.Inv_CurRcvdAmt, 0) Inv_CurRcvdAmt,ISNULL(A.Inv_CurBalAmt, 0) Inv_CurBalAmt,ISNULL(A.Inv_GrosAmt, 0) Inv_GrosAmt,ISNULL(A.Inv_Netamt, 0) Inv_Netamt,ISNULL(A.Invl_IsPending, 0) Invl_IsPending,ISNULL(A.Inv_Status, 0) Inv_Status,ISNULL(B.PndC_Labno, 0) PndC_Labno,B.PndC_Date," + Environment.NewLine
                                          + "ISNULL(B.PndC_Amount, 0) PndC_Amount,ISNULL(B.PndC_TimeSmp, '') PndC_TimeSmp,ISNULL(B.PndC_Cancld, 0) PndC_Cancld,ISNULL(B.PndC_UsrId, 0) PndC_UsrId,ISNULL(B.PndC_YrId, 0) PndC_YrId,ISNULL(B.PndC_CpyId, 0) PndC_CpyId,ISNULL(B.PndC_Updtd, 0) PndC_Updtd,ISNULL(C.Usr_Name, '') Usr_Name" + Environment.NewLine
                                         + "FROM dbo.Invoice_Mst A WITH(NOLOCK) LEFT JOIN dbo.PendingCollections B WITH(NOLOCK) ON B.PndC_Labno = A.Inv_No AND B.PndC_YrId = A.Inv_YrId AND B.PndC_CpyId = A.Inv_CpyId LEFT JOIN dbo.Users C WITH(NOLOCK) ON C.Usr_key = B.PndC_UsrId" + Environment.NewLine
                                         + "WHERE A.Invl_IsPending = 1 AND A.Inv_Status <> -1 AND A.Inv_No =" + txtLabNo + " AND A.Inv_CpyId =" + CompanyId + "  AND A.inv_yrid=" + YearId + " AND  A.Inv_PayMode = 'Cash'";
                    SqlDataReader dataReader = sqlcmd0.ExecuteReader();
                    dataReader.Read();


                    if (dataReader.HasRows == false)
                    {
                        return Json(new { Result = "disablesave" });
                    }
                    else
                    {




                        try
                        {
                            Crid = Convert.ToInt32(txtCrAccountid);
                        }
                        catch { }
                        if (cmbPayMode == "Debit/Credit" || cmbPayMode == "Cheque" || cmbPayMode == "BHIM/UPI Online Payment")

                        {
                            if (Crid == 0)
                            {
                                return Json(new { Result = "Please Select Bank" });

                            }
                        }
                        List<PENDINGCOLLECTION> getpndlist = new List<PENDINGCOLLECTION>();


                        try
                        {
                            nInvNo = Convert.ToInt32(txtLabNo);
                        }
                        catch { }

                        try
                        {
                            nChkVal = Convert.ToInt32(txtCollAmt);
                        }
                        catch { }

                        try
                        {

                            nRcdAmt = Convert.ToDouble(txtCollAmt);
                        }
                        catch { }


                        try
                        {
                            nCurBal = ((nRcdAmt * -1) - Convert.ToInt32(txtCurBalance));
                        }
                        catch { }
                        if (Convert.ToDouble(txtCollAmt) > (txtCurBalance * -1))
                        {
                            return Json(new { Result = "Entered Amount Exceed The Balance. Please Check" });

                        }



                        txtLabNo = nInvNo;

                        txtCurBalance = nCurBal * -1;
                        string PndC_TimeSmp = "User : " + UserName + " " + DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt") + " System : " + SysName;
                        int PndC_Updtd = 0;
                        int PndC_Cancld = 0;
                        double? PndC_YrId = l.Yr_Id;
                        sqlcon.Close();
                        try
                        {
                            SqlCommand sqlcmd01 = new SqlCommand();
                            sqlcmd01.Connection = sqlcon;
                            sqlcmd01.CommandType = CommandType.Text;
                            sqlcon.Open();


                            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(PndC_Key), 0)+1 'PndC_Key' FROM dbo.PendingCollections WITH (NOLOCK) WHERE  PndC_CpyId = " + CompanyId + "", sqlcon);

                            nPndC_Key = Convert.ToInt32(cmd.ExecuteScalar());

                            sqlcmd01.CommandText = "INSERT INTO dbo.PendingCollections(PndC_Key, PndC_Labno, PndC_Date, PndC_Amount, PndC_TimeSmp, PndC_Cancld, PndC_UsrId, PndC_YrId, PndC_CpyId, PndC_Updtd)" + Environment.NewLine

                        + "VALUES(" + nPndC_Key + "," + txtLabNo + ", '" + dtpCollDate + "', " + nRcdAmt + ", '" + PndC_TimeSmp + "'," + PndC_Cancld + ", " + UserId + "," + YearId + ", " + CompanyId + ", " + PndC_Updtd + ")";

                            SqlCommand cmd1 = new SqlCommand(sqlcmd01.CommandText, sqlcon);
                            cmd1.ExecuteNonQuery();
                            sqlcon.Close();
                        }

                        catch (Exception ex)
                        {
                            var x = ex.Message;
                            var y = ex.InnerException;
                        }


                        var getinvno = (from c in db.Invoice_Mst
                                        where c.Inv_No == txtLabNo && c.Inv_YrId == (decimal)(YearId) && c.Inv_CpyId == (decimal)CompanyId
                                        select c).FirstOrDefault();
                        if (txtCurBalance == 0)
                        {



                            if (getinvno != null)
                            {
                                getinvno.Invl_IsPending = 0;
                                getinvno.Inv_CurRcvdAmt = nRcdAmt;
                                getinvno.Inv_CurBalAmt = 0;


                            }

                        }
                        else
                        {
                            if (getinvno != null)
                            {
                                getinvno.Inv_CurRcvdAmt = nRcdAmt;
                                getinvno.Inv_CurBalAmt = txtCurBalance;


                            }
                            db.SaveChanges();
                        }


                        if (getinvno != null)
                        {
                            _TempInvNo = Convert.ToString(nInvNo);
                            //***********************Pending Credit card details Saving*********
                            string SqlsubQuery = "";

                            if (cmbPayMode == "Debit/Credit" || cmbPayMode == "Cheque" || cmbPayMode == "BHIM/UPI Online Payment")
                            {
                                SqlsubQuery = "UPDATE PendingCollections SET PndC_InvPaymode='" + cmbPayMode + "',PndC_InsId=" + Crid + ",PndC_InsNo='" + txtCrNo + "' WHERE PndC_Labno=" + _TempInvNo + " AND PndC_YrId=" + YearId + " AND PndC_CpyId=" + CompanyId + " AND PndC_Key=" + nPndC_Key + "";
                            }
                            else
                            {
                                SqlsubQuery = "UPDATE PendingCollections SET PndC_InvPaymode='" + cmbPayMode + "' WHERE PndC_Labno=" + _TempInvNo + " AND PndC_YrId=" + YearId + " AND PndC_CpyId=" + CompanyId + " AND PndC_Key=" + nPndC_Key + "";
                            }
                            try
                            {
                                SqlCommand cmd = new SqlCommand(SqlsubQuery, sqlcon);
                                cmd.ExecuteNonQuery();
                            }
                            catch { }
                            //******************************************************************
                            int StatusInv = 0;
                            try
                            {
                                sqlcon.Open();

                                SqlCommand cmdnew = new SqlCommand("SELECT ISNULL(Inv_Status,0) FROM Invoice_Mst WHERE Inv_No=" + nInvNo + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + " ", sqlcon);
                                StatusInv = Convert.ToInt32(cmdnew.ExecuteScalar());
                                sqlcon.Close();
                            }
                            catch (Exception exe)
                            {
                                var x = exe.Message;
                                var y = exe.InnerException;
                            }

                            if (nCurBal == 0 && StatusInv == 1)
                            {


                                int UpKey = 0;
                                SqlCommand cmd3;
                                int TestID = 0;
                                int ReportType = 0;
                                int TestType = 0;
                                string SqlQuery = "";
                                int GenFlag = 0;

                                try
                                {
                                    SqlCommand cmd2 = new SqlCommand("SELECT InvDet.InvItm_TstId,Tst.TstMst_TypeId FROM Invoice_Det InvDet LEFT JOIN Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key WHERE InvItm_Invno=" + nInvNo + " AND InvItm_CpyId=" + CompanyId + " AND InvItm_YrId=" + YearId + " AND InvItm_Issued=1", sqlcon);
                                    SqlDataAdapter sda = new SqlDataAdapter(cmd2);
                                    DataTable dt = new DataTable();
                                    sda.Fill(dt);

                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        TestID = 0;
                                        TestType = 0;
                                        ReportType = 0;
                                        TestID = Convert.ToInt32(dr["InvItm_TstId"]);
                                        TestType = Convert.ToInt32(dr["TstMst_TypeId"]);
                                        if (TestType == -1 || TestType == -2)
                                        {
                                            ReportType = 1;
                                            GenFlag += 1;
                                        }
                                        if (ReportType == 1 && GenFlag == 1)
                                        {
                                            SqlQuery = "DELETE FROM WebUpload WHERE Upd_InvNo=" + nInvNo + " AND Upd_CpyId=" + CompanyId + " AND Upd_YrId=" + YearId + " AND Upd_ReportType=1";
                                        }
                                        else
                                        {
                                            SqlQuery = "DELETE FROM WebUpload WHERE Upd_InvNo=" + nInvNo + " AND Upd_CpyId=" + CompanyId + " AND Upd_YrId=" + YearId + " AND Upd_TestId=" + TestID + "";
                                        }
                                        try
                                        {

                                            cmd3 = new SqlCommand(SqlQuery, sqlcon);
                                            cmd3.ExecuteNonQuery();
                                        }
                                        catch { }
                                        if (ReportType == 0 || GenFlag == 1)
                                        {
                                            cmd3 = new SqlCommand("Select isnull(Max(Upd_key),0) from WebUpload WITH (NOLOCK)", sqlcon);
                                            UpKey = Convert.ToInt32(cmd3.ExecuteScalar());
                                            UpKey += 1;
                                            if (ReportType == 1)
                                            {
                                                TestID = 0;
                                            }
                                            cmd3 = new SqlCommand("INSERT INTO WebUpload(Upd_key,Upd_InvNo,Upd_FldrName,Upd_Isupload,Upd_CpyId,Upd_YrId,Upd_ReportType,Upd_TestId,Upd_TestTypeId) Values(" + UpKey + "," + nInvNo + ",'',0," + CompanyId + "," + YearId + "," + ReportType + "," + TestID + "," + TestType + ")", sqlcon);
                                            //string a="INSERT INTO WebUpload(Upd_key,Upd_InvNo,Upd_FldrName,Upd_Isupload,Upd_CpyId,Upd_YrId) Values(" + UpKey + "," + _LabNo + ",'','false'," + cPublic.CompanyId + "," + cPublic.YearId + "";
                                            cmd3.ExecuteNonQuery();
                                        }

                                    }

                                }
                                catch { }
                            }

                            string usrLogData = "";
                            usrLogData = "PENDING COLLECTED -LAB NO: " + txtLabNo + "_NAME:" + txtName + "_AMOUNT:" + txtInvAmt;


                        }
                        //sqlcon.Close();
                    }


                    sqlcon.Close();

                }
                catch (Exception EX)
                {
                    var X = EX.Message;
                    var y = EX.InnerException;
                }



            }
            catch (Exception EX)
            {
                var X = EX.Message;
                var y = EX.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        //****************END-SAVE-PENDINGCOLLECTION***************************************









       
        public JsonResult SEARCHBILLWISECORPORATION(string corp)
        {
            var srchbillwisecorp = from c in db.AccountHeads_Mst
                                   where c.AhMst_pName.Contains(corp)
                                   select c;
            return Json(srchbillwisecorp.ToList());
        }
      
      
       
        public JsonResult GETSCHEME()
        {




            var getscheme = from c in db.Masters
                            where c.Mstr_Type == "Scheme"
                            /*orderby c.Mstr_Desc*/
                            select c;

            return Json(getscheme, JsonRequestBehavior.AllowGet);



        }

        public JsonResult GETCUSTTYPE()
        {

            var getcoustmertype = from c in db.Masters
                                  where c.Mstr_Type == "CustType"
                                  //orderby c.Mstr_Desc
                                  select c;
            return Json(getcoustmertype, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GETTESTORDERDEPARTMENT()
        {
            var getdpt = from c in db.Masters where c.Mstr_Type == "Dept" select c;
            return Json(getdpt, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SEARCHDEPARTMENT(string dept)
        {
            var srchdpt = from c in db.Masters where c.Mstr_Desc.Contains(dept) select c;
            return Json(srchdpt, JsonRequestBehavior.AllowGet);
        }


        public JsonResult GETGROUP()
        {


            var grplist = from c in db.GROUPS

                              //orderby c.HEAD
                          select c;
            return Json(grplist, JsonRequestBehavior.AllowGet);



        }
        public JsonResult GETPAYMODE()
        {
            List<accountledgercs1> tsts = new List<accountledgercs1>();


            var colllist = from c in db.Masters
                           where c.Mstr_Type == "CollMode"
                           select c;
            ViewBag.colllist = colllist;

            return Json(colllist, JsonRequestBehavior.AllowGet);

        }


      
      
        public JsonResult SEARCHREFBY(string REFNAME)
        {


            var GETREFNAME = from c in db.AccountHeads_Mst
                             where c.AhMst_pName.Contains(REFNAME)
                             select c;
            return Json(GETREFNAME.ToList());


        }
       
        public JsonResult SEARCHREFOUTDR(string OUTDR)
        {


            var GETOUTDR = from c in db.AccountHeads_Mst
                           where c.AhMst_pName.Contains(OUTDR)
                           select c;
            return Json(GETOUTDR.ToList());


        }
        
        

        public JsonResult GETBANKACCOUNT()
        {
            var acgrp = "4";
            var acid = "32";

            var GETBANKCT = from c in db.AccountHeads_Mst
                            where c.AhMst_IsActive == 1 && (c.AhMst_AcGrpId == acgrp || c.AhMst_AcGrpId == acid)
                            select c;
            var jsonResult = Json(GETBANKCT, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;



        }


        public JsonResult Getpendingdata(string corpid, string pndfromdate, string pndtodate, int chkcorp)

        {
            List<PENDINGCOLLECTION> getpending = new List<PENDINGCOLLECTION>();

            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            string txtCorpid = "";
            string txtCorp = "";
            string LabNo = "";
            string InvDate = "";
            string InvName = "";
            string InvCurbalance = "";
            string Invuser = "";
            string Invcorporate = "";
            bool chkCorp = false;
            double CompanyId = 2;

            DateTime dtpTo1 = DateTime.Now;
            DateTime dtpFrom1 = DateTime.Now;
            if (chkcorp == 1)
            {
                chkCorp = true;
            }
            else
            {
                chkCorp = false;
            }


            DateTime datefrom = DateTime.ParseExact(pndfromdate, "dd/MM/yyyy", null);
            DateTime dateto = DateTime.ParseExact(pndtodate, "dd/MM/yyyy", null);
            dtpFrom1 = datefrom;
            dtpTo1 = dateto;
            txtCorpid = corpid;



            var dtpFrom = dtpFrom1.ToString("yyyy-MM-dd");
            var dtpTo = dtpTo1.ToString("yyyy-MM-dd");


            int CorpId = 0;
            try
            {

                CorpId = Convert.ToInt32(txtCorpid);
            }
            catch { }
            try
            {
                SqlCommand sqlcmd01 = new SqlCommand();
                sqlcmd01.Connection = sqlcon;
                sqlcmd01.CommandType = CommandType.Text;
                if (chkCorp == false)
                {

                    sqlcmd01.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                      + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 AND Invl_IsPending = 1  AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                }
                else
                {
                    if (CorpId == 0)
                    {
                        sqlcmd01.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                    + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 and  Invl_IsPending = 1 AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' AND Inv_InsId>0 ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                    }
                    else
                    {
                        sqlcmd01.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                                            + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 AND Invl_IsPending = 1 AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' AND Inv_InsId=" + CorpId + " ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                    }
                }
                SqlDataAdapter sd01 = new SqlDataAdapter(sqlcmd01);
                DataTable dt01 = new DataTable();
                sd01.Fill(dt01);
                if (dt01.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt01.Rows)
                    {
                        LabNo = dr["Inv_No"].ToString();
                        InvDate = dr["Inv_Date"].ToString();

                        if (InvDate != "")
                        {
                            DateTime DateInv = Convert.ToDateTime(dr["Inv_Date"]);
                            InvDate = DateInv.ToString("dd-MM-yyyy");
                        }
                        InvName = dr["Inv_name"].ToString();
                        InvCurbalance = dr["Inv_CurBalAmt"].ToString();
                        Invuser = dr["Inv_User"].ToString();
                        Invcorporate = dr["Corporate"].ToString();
                        PENDINGCOLLECTION getinvdetals = new PENDINGCOLLECTION()
                        {
                            LabNo = LabNo,
                            InvDate = InvDate,
                            InvName = InvName,
                            InvCurbalance = InvCurbalance,
                            Invuser = Invuser,
                            Invcorporate = Invcorporate
                        };

                        getpending.Add(getinvdetals);

                    }
                }
                var jsonResult = Json(getpending, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;

                //return Json(getpending, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }


        public JsonResult SEARCHCOLLMODE(string COLLMODE)
        {


            var SEARCHCOLLMODE = from c in db.Masters
                                 where c.Mstr_Desc.Contains(COLLMODE)
                                 select c;
            return Json(SEARCHCOLLMODE.ToList());


        }



        public JsonResult SEARCHGRPNAME(string grptxt)
        {


            var GRPSNAME = from c in db.GROUPS
                           where c.HEAD.Contains(grptxt)
                           select c;
            return Json(GRPSNAME.ToList());


        }
        public JsonResult SEARCHGRPCODE(string grptxt)
        {


            var GRPSNAME = from c in db.GROUPS
                           where c.CODE.Contains(grptxt)
                           select c;
            return Json(GRPSNAME.ToList());


        }
        public JsonResult SEARCHACCGRPCODE(string accgrptxt)
        {


            var AGRPSNAME = from c in db.AccountGroups
                            where c.AcGrp_Key.ToString().Contains(accgrptxt)
                            select c;
            return Json(AGRPSNAME.ToList());


        }
        public JsonResult SEARCHACCGRPNAME(string accgrptxt)
        {


            var AGRPSNAME = from c in db.AccountGroups
                            where c.AcGrp_GrpName.Contains(accgrptxt)
                            select c;
            return Json(AGRPSNAME.ToList());


        }
        public JsonResult SEARCHCUSTNAME(string custtxt)
        {


            var CUSTNAME = from c in db.Masters
                           where c.Mstr_Desc.Contains(custtxt)
                           select c;
            return Json(CUSTNAME.ToList());


        }
        public JsonResult SEARCHCUSTCODE(string custtxt)
        {


            var CUSTNAME = from c in db.Masters
                           where c.Mstr_Code.Contains(custtxt)
                           select c;
            return Json(CUSTNAME.ToList());


        }



        public JsonResult selectsearch(string selectedValue, int selectflag)
        {
            if (selectflag == 1)
            {

                var selectaccountledger = db.AccountHeads_Mst.Where(x => x.AhMst_pName != null).OrderBy(x => x.AhMst_Type).ToList();
                return Json(selectaccountledger, JsonRequestBehavior.AllowGet);

            }
            else if (selectflag == 0)
            {
                var selectaccountledger = db.AccountHeads_Mst.Where(x => x.AhMst_pName != null).OrderBy(x => x.Ahmst_Code).ToList();
                return Json(selectaccountledger, JsonRequestBehavior.AllowGet);
            }

            else
            {
                var selectaccountledger = db.AccountHeads_Mst.Where(x => x.AhMst_pName != null).OrderBy(x => x.AhMst_pName).ToList();
                return Json(selectaccountledger, JsonRequestBehavior.AllowGet);

            }

        }

        public JsonResult SEARCHACCOUTLEDGERtype(string accountledgername)
        {




            var Acttypelist = from c in db.AccountHeads_Mst
                              where c.AhMst_Type.Contains(accountledgername)
                              select c;
            return Json(Acttypelist.ToList());


        }
        public JsonResult SEARCHACCOUTLEDGERCode(string accountledgername)
        {




            var Acttypelist = from c in db.AccountHeads_Mst
                              where c.AhMst_Key.ToString().Contains(accountledgername)
                              select c;
            return Json(Acttypelist.ToList());


        }
        public JsonResult SEARCHSHEMENAME(string schemetxt)
        {




            var SCHMElist = from c in db.Masters
                            where c.Mstr_Desc.Contains(schemetxt)
                            select c;
            return Json(SCHMElist.ToList());


        }
        public JsonResult SEARCHSHEMECODE(string schemetxt)
        {




            var SCHMElist = from c in db.Masters
                            where c.Mstr_Key.ToString().Contains(schemetxt)
                            select c;
            return Json(SCHMElist.ToList());


        }
        public JsonResult SEARCHHOSPNAME(string hosptxt)
        {

            var HOSPlist = from c in db.AccountHeads_Mst
                           where c.AhMst_Type == "Hosp" && c.AhMst_pName.Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHHOSPCODE(string hosptxt)
        {




            var HOSPlist = from c in db.AccountHeads_Mst
                           where c.AhMst_Type == "Hosp" && c.AhMst_Key.ToString().Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHAREAHOSP(string hosptxt)
        {




            var HOSPlist = from c in db.Masters
                           where c.Mstr_Desc.Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHAREACODE(string hosptxt)
        {




            var HOSPlist = from c in db.Masters
                           where c.Mstr_Key.ToString().Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHSPECIAL(string hosptxt)
        {




            var HOSPlist = from c in db.Masters
                           where c.Mstr_Type == "Specilzed" && c.Mstr_Desc.Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHSPECIALCODE(string hosptxt)
        {




            var HOSPlist = from c in db.Masters
                           where c.Mstr_Type == "Specilzed" && c.Mstr_Key.ToString().Contains(hosptxt)
                           select c;
            return Json(HOSPlist.ToList());


        }
        public JsonResult SEARCHEMPLOYEENAME(string emptxt)
        {




            var emplist = from c in db.AccountHeads_Mst
                          where c.AhMst_Type == "Staff" && c.AhMst_pName.Contains(emptxt)
                          select c;
            return Json(emplist.ToList());


        }
        public JsonResult SEARCHEMPLOYEECODE(string emptxt)
        {




            var emplist = from c in db.AccountHeads_Mst
                          where c.AhMst_Type == "Staff" && c.AhMst_Key.ToString().Contains(emptxt)
                          select c;
            return Json(emplist.ToList());


        }













        public JsonResult SEARCHACCOUTLEDGERAccount(string accountledgername)
        {




            var Acttypelist = from c in db.AccountHeads_Mst
                              where c.AhMst_pName.Contains(accountledgername)
                              select c;
            return Json(Acttypelist.ToList());


        }
        public JsonResult selectscheme(string selectedValue)
        {
            var getscheme = from s in db.Masters
                            where s.Mstr_Type == "Scheme"
                            orderby s.Mstr_Desc

                            select s;
            //var x = db.Masters.Where(w => w.Mstr_Type.Contains("Scheme"));

            //orderByResult = db.Masters.OrderBy(x => x.Mstr_Desc);


            //var x = db.Masters.Where(w => w.Mstr_Desc.Contains("Scheme"));
            //var studentname = db.Masters.OrderBy(c => c.Mstr_Type == "Scheme");

            return Json(getscheme, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectschemecode(string selectedValue)
        {
            var schemecode = from s in db.Masters
                             where s.Mstr_Type == "Scheme"
                             orderby s.Mstr_Code

                             select s;
            return Json(schemecode, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectgrp(string selectedValue)
        {
            var grplists = from s in db.GROUPS

                           orderby s.HEAD
                           select s;
            //var grplists = db.GROUPS.OrderBy(x => x.HEAD);
            return Json(grplists, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectgrpcode(string selectedValue)
        {
            var grplists = from s in db.GROUPS

                           orderby s.CODE
                           select s;
            //var grplists1 = db.GROUPS.OrderBy(x => x.CODE);
            return Json(grplists, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectaccgrp(string selectedValue)
        {

            var accgrplist = from s in db.AccountGroups

                             orderby s.AcGrp_Key
                             select s;
            //var accgrplist = db.AccountGroups.OrderBy(x => x.AcGrp_Key);
            return Json(accgrplist, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectaccgrpname(string selectedValue)
        {
            var accgrplist = from s in db.AccountGroups

                             orderby s.AcGrp_GrpName
                             select s;
            //var accgrplist = db.AccountGroups.OrderBy(x => x.AcGrp_GrpName);
            return Json(accgrplist, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectcust(string selectedValue)
        {
            var coustmerlist = from s in db.Masters
                               where s.Mstr_Type == "CustType"
                               orderby s.Mstr_Desc

                               select s;
            return Json(coustmerlist, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectcustcode(string selectedValue)
        {
            var coustmerlistcode = from s in db.Masters
                                   where s.Mstr_Type == "CustType"
                                   orderby s.Mstr_Code

                                   select s;
            return Json(coustmerlistcode, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DISPLAYUSERNAME(CashClosing saveCashclosing)
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            logindetails l = Session["logindls"] as logindetails;
            bool optAllUser = false;
            double CompanyId = (double)l.BrMst_Key;
            double YearId = (double)l.Yr_Id;
            int UserId = l.Usr_EmpId;
            string username = "";
            optAllUser = saveCashclosing.cashAlluser;
            if (Convert.ToInt32(optAllUser) == 1)
            {
                optAllUser = true;
            }
            else
            {
                optAllUser = false;
            }
            if (optAllUser == false)
            {
                username = db.Users.Where(p => p.Usr_EmpId == UserId).Select(pat => pat.Usr_Name).FirstOrDefault();

                CashClosing get = new CashClosing()
                {
                    username = username
                };
                GETCASHCLOSING.Add(get);
            }
            return Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
        }







        public JsonResult DISPLAYCASHFETCH(CashClosing saveCashclosing)
        {
            CashClosing data = TempData["mydata"] as CashClosing;

            try
            {
                logindetails l = Session["logindls"] as logindetails;
                string txtLoginedUser = "";
                string txtColl1 = "";
                string txtColl2 = "";
                string txtPayments = "";
                string txtTotal = "";
                int nRefundSCheme = 0;
                DateTime StartDate = DateTime.Now;
                bool optAllUser = false;
                double CompanyId = (double)l.BrMst_Key;
                double YearId = (double)l.Yr_Id;
                int UserId = l.Usr_EmpId;
                string username = "";
                string nId = "";

                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;
                try
                {




                    optAllUser = saveCashclosing.cashAlluser;
                    if (Convert.ToInt32(optAllUser) == 1)
                    {
                        optAllUser = true;
                    }
                    else
                    {
                        optAllUser = false;
                    }
                }
                catch
                {

                }



                txtColl1 = "";
                txtColl2 = "";
                txtPayments = "";
                txtTotal = "";

                double Coll1 = 0;
                double Coll2 = 0;
                double PendColl = 0;
                double Payments = 0;

                double TotalAmt = 0;

                string CollQuery = "";
                string PendQuery = "";
                string PaymQuery = "";
                string RecQuery = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataTable dt = new DataTable();


                if (optAllUser == true)
                {
                    CollQuery = "SELECT Inv_No, Inv_Name,Inv_RcvdAmt,Inv_UsrId FROM Invoice_Mst WHERE Inv_PayMode='Cash' and Isnull(Inv_CashAllUsr,0)=0 AND Inv_Status <> -1  And Inv_CpyId = " + CompanyId + " ORDER BY Inv_No";



                }
                else
                {
                    CollQuery = "SELECT Inv_No, Inv_Name,Inv_RcvdAmt,Inv_UsrId FROM Invoice_Mst WHERE Inv_PayMode='Cash' and Isnull(Inv_CashUsr,0)=0 AND ISNUll(Inv_UsrId,0)>0 AND Inv_UsrId=" + UserId + " AND Inv_Status <> -1 And Inv_YrId = " + YearId + " And Inv_CpyId = " + CompanyId + " ORDER BY Inv_No";

                }

                //********************Invoice Table*************************

                cmd = new SqlCommand(CollQuery, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt);
                int TempRow = 0;
                double TempColl = 0;
                int Inv_No = 0;
                string Inv_Name = "";
                double Inv_RcvdAmt = 0;
                double Inv_UsrId = 0;

                if (dt.Rows.Count > 0)
                {


                    foreach (DataRow dr in dt.Rows)
                    {

                        Inv_No = Convert.ToInt32(dr["Inv_No"].ToString());

                        Inv_Name = dr["Inv_Name"].ToString();
                        Inv_RcvdAmt = Convert.ToDouble(dr["Inv_RcvdAmt"].ToString());
                        Inv_UsrId = Convert.ToDouble(dr["Inv_UsrId"].ToString());
                        //username= dr["Inv_User"].ToString();
                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["Inv_RcvdAmt"]);
                        }
                        catch { }

                        CashClosing getinvoce = new CashClosing()
                        {
                            Inv_No = Inv_No,
                            Inv_Name = Inv_Name,
                            Inv_RcvdAmt = Inv_RcvdAmt,
                            Inv_UsrId = Inv_UsrId,

                        };

                        //TempData["mydata"] = getinvoce;

                        GETCASHCLOSING.Add(getinvoce);


                    }


                }


                var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;
            }




            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            //********************END Receipts Table*************************

            return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult GETTRANSNOCHQISSUE()
        {

            IsNewChqueIEntry = true;
            List<CHEQUEISSUEcs> GetTranso = new List<CHEQUEISSUEcs>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            string txtTransNo = "";
            int txtTransNoid = 0;
            double CompanyId = l.BrMst_Key;
            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE  vchr_TransType='Cheque Issue' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + " ", sqlcon);
            int TransNo = 0;
            TransNo = Convert.ToInt32(cmd.ExecuteScalar());
            if (TransNo != 0)
            {
                TransNo += 1;
                txtTransNo = TransNo.ToString();
                txtTransNoid = TransNo;

            }
            else
            {
                txtTransNo = "1";
                txtTransNoid = 1;
            }
            CHEQUEISSUEcs getTrsno = new CHEQUEISSUEcs()
            {
              ChqTranNo= txtTransNo,
                ChqTranNoid= txtTransNoid
            };
          
            GetTranso.Add(getTrsno);


            return Json(GetTranso,JsonRequestBehavior.AllowGet);
        }

            





                //************************SAVE-CASHCLOSING********************************************************
                [HttpPost]
        public JsonResult SAVECASHCLOSING(CashClosing cashclosingsave)
        {
            //CashClosing_Mst updatecashclosing = new CashClosing_Mst();
            List<CashClosing> getkey = new List<CashClosing>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            DateTime dtpDate1 = DateTime.Now;


            try
            {
                bool optLognedUser = false;
                int txtId = 0;
                //string dtpDate = "";
                string txtColl1 = "";
                string txtColl2 = "";
                //DateTime dtpDate1 = DateTime.Now;
                DateTime dtptime1 = DateTime.Now;
                //string dtptime1 = "";
                //string dtpDate = "";
                string dtptime;
                string txtPayments = "";
                string txtOfficeAmt = "";
                string txtCoins = "";
                string txtToOffice = "";
                string txtReceipt = "";
                string txt1000 = "";
                string txt2000 = "";
                string txt500 = "";
                string txt200 = "";
                string txt100 = "";
                string txt50 = "";
                string txt20 = "";
                string txt10 = "";
                string txt5 = "";
                string dtpDate = "";
                string txtDnoTotal = "";
                string txtNote = "";
                string txtBalance = "";
                string txtShort = "";
                string txtExcess = "";
                double UserId = l.Usr_EmpId;
                string UserName = l.Usr_Name;
                double YearId = (double)l.Yr_Id;

                double CompanyId = l.BrMst_Key;
                int NewCashCloseKey = 0;
                string txtTotal = "";
                string _CashCloseNo = "";
                bool optAllUser = false;
                int nRefundSCheme = 0;
                string filePath = Server.MapPath("~/bin/RefundId.ini");
                //string 
                //filePath = Application.StartupPath + "\\CashCls.xml";
                if (System.IO.File.Exists(filePath))
                {
                    StreamReader sdr = new StreamReader(filePath);
                    try
                    {
                        nRefundSCheme = Convert.ToInt32(sdr.ReadLine());
                    }
                    catch { }

                }
                //string dtpDate = "";
                try
                {
                    DateTime DateTimedtp = DateTime.ParseExact(cashclosingsave.cashclosingdate, "dd/MM/yyyy", null);

                    txtId = Convert.ToInt32(cashclosingsave.txtId);

                    dtpDate1 = DateTimedtp;
                    dtptime1 = Convert.ToDateTime(cashclosingsave.cashtime);
                    txtColl1 = Convert.ToString(cashclosingsave.txtcoll1);
                    txtColl2 = Convert.ToString(cashclosingsave.txtcoll2);
                    txtPayments = Convert.ToString(cashclosingsave.txtpayment);
                    txtOfficeAmt = Convert.ToString(cashclosingsave.txtofficeamt);
                    txtCoins = Convert.ToString(cashclosingsave.txtcoin);
                    txtToOffice = Convert.ToString(cashclosingsave.txtoffice);
                    txtReceipt = Convert.ToString(cashclosingsave.txtrecp);
                    txt1000 = Convert.ToString(cashclosingsave.txt1000);
                    txt2000 = Convert.ToString(cashclosingsave.txt2000);
                    txt200 = Convert.ToString(cashclosingsave.txt200);
                    txt100 = Convert.ToString(cashclosingsave.txt100);
                    txt50 = Convert.ToString(cashclosingsave.txt50);
                    txt20 = Convert.ToString(cashclosingsave.txt20);
                    txt10 = Convert.ToString(cashclosingsave.txt10);
                    txt5 = Convert.ToString(cashclosingsave.txt5);
                    txtDnoTotal = Convert.ToString(cashclosingsave.txttotals);
                    txtNote = cashclosingsave.txtNote;
                    txtTotal = Convert.ToString(cashclosingsave.txttotal);
                    optLognedUser = cashclosingsave.cashloguser;
                    optAllUser = cashclosingsave.cashAlluser;
                    txtBalance = Convert.ToString(cashclosingsave.txtbalance);
                    txtExcess = Convert.ToString(cashclosingsave.txtexcessamt);
                    txtShort = Convert.ToString(cashclosingsave.txtshortamt);



                }

                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }



                dtptime = dtptime1.ToString("hh:mm:ss tt");

                if (Convert.ToInt32(optLognedUser) == 1)
                {
                    optLognedUser = true;
                }
                if (Convert.ToInt32(optAllUser) == 1)
                {
                    optAllUser = true;
                }
                int result = 0;
                ///*******
                double Coll1 = 0;
                double Coll2 = 0;
                double Payement = 0;
                double Office = 0;
                double Coins = 0;
                double ToOffice = 0;
                // string _Date = "";

                int UsercclKey = 0;

                double CashReceipt = 0;
                ///*****updatecashclosing




                try
                {
                    Coll1 = Convert.ToDouble(txtColl1);
                }
                catch { }
                try
                {
                    Coll2 = Convert.ToDouble(txtColl2);
                }
                catch { }
                try
                {
                    Payement = Convert.ToDouble(txtPayments);
                }
                catch { }
                try
                {
                    Office = Convert.ToDouble(txtOfficeAmt);
                }
                catch { }
                try
                {
                    Coins = Convert.ToDouble(txtCoins);
                }
                catch { }
                try
                {
                    ToOffice = Convert.ToDouble(txtToOffice);
                }
                catch { }
                try
                {
                    CashReceipt = Convert.ToDouble(txtReceipt);
                }
                catch { }
                try
                {

                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }

                try
                {
                    if (Convert.ToInt32(txtId) > 0)
                    {
                        int Nid = Convert.ToInt32(txtId);
                        var updtcashclosing = (from c in db.CashClosing_Mst
                                               where c.Ccl_Key == Nid && c.Ccl_YrId == (decimal)YearId && c.Ccl_CpyId == (decimal)(CompanyId)
                                               select c).FirstOrDefault();
                        if (updtcashclosing != null)
                        {

                            updtcashclosing.Ccl_Date = Convert.ToDateTime(dtpDate1);
                            updtcashclosing.Ccl_Time = (dtptime);
                            updtcashclosing.Ccl_Coll1 = Convert.ToDouble(txtColl1 == "" ? "0" : txtColl1);
                            updtcashclosing.Ccl_Coll2 = Convert.ToDouble(txtColl2 == "" ? "0" : txtColl2);
                            updtcashclosing.Ccl_PayMnt = Convert.ToDouble(txtPayments == "" ? "0" : txtPayments);
                            updtcashclosing.Ccl_OffAmt = Convert.ToDouble(txtOfficeAmt == "" ? "0" : txtOfficeAmt);
                            updtcashclosing.Ccl_Coll1 = Coll1;
                            updtcashclosing.Ccl_Coll2 = Coll2;
                            updtcashclosing.Ccl_PayMnt = Payement;
                            updtcashclosing.Ccl_OffAmt = Office;
                            updtcashclosing.Ccl_Receipt = CashReceipt;
                            updtcashclosing.Ccl_CshDen1000 = Convert.ToInt32(txt1000 == "" ? "0" : txt1000);
                            updtcashclosing.Ccl_CshDen2000 = Convert.ToInt32(txt2000 == "" ? "0" : txt2000);
                            updtcashclosing.Ccl_CshDen500 = Convert.ToInt32(txt500 == "" ? "0" : txt500);
                            updtcashclosing.Ccl_CshDen200 = Convert.ToInt32(txt200 == "" ? "0" : txt200);
                            updtcashclosing.Ccl_CshDen100 = Convert.ToInt32(txt100 == "" ? "0" : txt100);
                            updtcashclosing.Ccl_CshDen50 = Convert.ToInt32(txt50 == "" ? "0" : txt50);
                            updtcashclosing.Ccl_CshDen20 = Convert.ToInt32(txt20 == "" ? "0" : txt20);
                            updtcashclosing.Ccl_CshDen10 = Convert.ToInt32(txt10 == "" ? "0" : txt10);
                            updtcashclosing.Ccl_CshDen5 = Convert.ToInt32(txt5 == "" ? "0" : txt5);

                            updtcashclosing.Ccl_CshDenSum = Convert.ToDouble(txtDnoTotal == "" ? "0" : txtDnoTotal);

                            updtcashclosing.Ccl_CshDenCoins = Coins;
                            updtcashclosing.Ccl_Note = txtNote ?? "";

                            updtcashclosing.Ccl_ToOffice = ToOffice;
                            updtcashclosing.Ccl_Balance = Convert.ToDouble(txtBalance == "" ? "0" : txtBalance);
                            updtcashclosing.Ccl_Short = Convert.ToDouble(txtShort == "" ? "0" : txtShort);
                            updtcashclosing.Ccl_Excess = Convert.ToDouble(txtExcess == "" ? "0" : txtExcess);
                            string SysName = Environment.MachineName;
                            updtcashclosing.Ccl_Tmpstmp = "User : " + UserName + " " + DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt") + " System : " + SysName;

                            updtcashclosing.Ccl_UsrId = (decimal)UserId;
                            updtcashclosing.Ccl_YrId = (decimal)YearId;
                            updtcashclosing.Ccl_CpyId = (decimal)CompanyId;
                            //updatecashclosing.Ccl_Updtd = cashclosing.Ccl_Key > 0 ? 1 : 0;
                            updtcashclosing.Ccl_Updtd = 1;
                            db.SaveChanges();
                        }

                        UsercclKey = Convert.ToInt32(Nid);
                    }
                    else
                    {

                        sqlCmd.Connection = sqlcon;
                        sqlCmd.CommandType = CommandType.Text;
                        CashClosing_Mst cashclose = new CashClosing_Mst();

                        cashclose.Ccl_Date = Convert.ToDateTime(dtpDate1);
                        cashclose.Ccl_Time = (dtptime);
                        cashclose.Ccl_Coll1 = Convert.ToDouble(txtColl1 == "" ? "0" : txtColl1);
                        cashclose.Ccl_Coll2 = Convert.ToDouble(txtColl2 == "" ? "0" : txtColl2);
                        cashclose.Ccl_PayMnt = Convert.ToDouble(txtPayments == "" ? "0" : txtPayments);
                        cashclose.Ccl_OffAmt = Convert.ToDouble(txtOfficeAmt == "" ? "0" : txtOfficeAmt);
                        cashclose.Ccl_Coll1 = Coll1;
                        cashclose.Ccl_Coll2 = Coll2;
                        cashclose.Ccl_PayMnt = Payement;
                        cashclose.Ccl_OffAmt = Office;
                        cashclose.Ccl_Receipt = CashReceipt;
                        cashclose.Ccl_CshDen1000 = Convert.ToInt32(txt1000 == "" ? "0" : txt1000);
                        cashclose.Ccl_CshDen2000 = Convert.ToInt32(txt2000 == "" ? "0" : txt2000);
                        cashclose.Ccl_CshDen500 = Convert.ToInt32(txt500 == "" ? "0" : txt500);
                        cashclose.Ccl_CshDen200 = Convert.ToInt32(txt200 == "" ? "0" : txt200);
                        cashclose.Ccl_CshDen100 = Convert.ToInt32(txt100 == "" ? "0" : txt100);
                        cashclose.Ccl_CshDen50 = Convert.ToInt32(txt50 == "" ? "0" : txt50);
                        cashclose.Ccl_CshDen20 = Convert.ToInt32(txt20 == "" ? "0" : txt20);
                        cashclose.Ccl_CshDen10 = Convert.ToInt32(txt10 == "" ? "0" : txt10);
                        cashclose.Ccl_CshDen5 = Convert.ToInt32(txt5 == "" ? "0" : txt5);

                        cashclose.Ccl_CshDenSum = Convert.ToDouble(txtDnoTotal == "" ? "0" : txtDnoTotal);

                        cashclose.Ccl_CshDenCoins = Coins;
                        cashclose.Ccl_Note = txtNote ?? "";

                        cashclose.Ccl_ToOffice = ToOffice;
                        cashclose.Ccl_Balance = Convert.ToDouble(txtBalance == "" ? "0" : txtBalance);
                        cashclose.Ccl_Short = Convert.ToDouble(txtShort == "" ? "0" : txtShort);
                        cashclose.Ccl_Excess = Convert.ToDouble(txtExcess == "" ? "0" : txtExcess);
                        string SysName = Environment.MachineName;
                        cashclose.Ccl_Tmpstmp = "User : " + UserName + " " + DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt") + " System : " + SysName;

                        cashclose.Ccl_UsrId = (decimal)UserId;
                        cashclose.Ccl_YrId = (decimal)YearId;
                        cashclose.Ccl_CpyId = (decimal)CompanyId;
                        cashclose.Ccl_Updtd = 0;

                        db.CashClosing_Mst.Add(cashclose);


                        db.SaveChanges();


                    }




                    try
                    {
                        SqlCommand cmd2 = new SqlCommand("Select max(Ccl_Key) from CashClosing_Mst WITH (NOLOCK) where Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "", sqlcon);
                        NewCashCloseKey = Convert.ToInt32(cmd2.ExecuteScalar());
                        CashClosing gettxtid = new CashClosing()
                        {
                            txtId = Convert.ToString(NewCashCloseKey)
                        };
                        TempData["mydata"] = gettxtid;
                        getkey.Add(gettxtid);

                    }
                    catch { }
                    UsercclKey = NewCashCloseKey;



                    //db.SaveChanges();


                }



                catch (Exception ex)
                {
                    var y = ex.Message;
                    var x = ex.InnerException;
                }
                //**************************sms*************************************************
                double TotalColl = 0;
                try
                {
                    TotalColl = Convert.ToDouble(txtTotal);
                }
                catch { }
                //****************Cash Closing Sms********************************
                filePath = Server.MapPath("~/bin/CashCls.xml");
                //string 
                //filePath = Application.StartupPath + "\\CashCls.xml";
                if (System.IO.File.Exists(filePath))
                {
                    StreamReader sdr = new StreamReader(filePath);
                    try
                    {
                        _CashCloseNo = sdr.ReadLine();
                    }
                    catch { }


                }
                if (_CashCloseNo != "")
                {
                    string msgs = "";
                    string m_Mob = "";
                    m_Mob = _CashCloseNo.Trim().Substring(_CashCloseNo.Trim().Length - 10, 10);


                    if (m_Mob.Length == 10)
                    {
                        try
                        {
                            m_Mob = "91" + m_Mob;
                            msgs = "Cash Closing(" + DateTime.Now.ToString("dd-MM-yyyy hh:mm tt") + ") Amount:" + TotalColl + " \n Coll1=" + Coll1 + "\n Coll2=" + Coll2 + "\n Paymnt=" + Payement + "\n Recpt=" + CashReceipt + "\n OffcAmt=" + Office + "\n TotalColl=" + TotalColl + "\n CollUser:" + UserName;
                            SqlCommand Sqlcmd = new SqlCommand("INSERT INTO sendSMS(SMS_Text,SMS_InvNo,SMS_Flash,SMS_Mode,SMS_Mobile,SMS_isSent,SMS_YrId,SMS_CpyId,SMS_Type,SMS_Tryed,SMS_WUpd) values('" + msgs.Trim() + "','" + UsercclKey + "','False','TEXT','" + m_Mob.Trim() + "','False'," + YearId + "," + CompanyId + ",'5','0',1)", sqlcon);
                            Sqlcmd.ExecuteNonQuery();
                        }
                        catch { }
                    }
                    //************************************************************************************************************
                }
                //**************************Cash Closing User********************************
                int UserId1 = 0;
                if (optLognedUser == true)
                {
                    UserId1 = Convert.ToInt32(UserId);
                }
                try
                {
                    SqlCommand cmd = new SqlCommand("DELETE FROM CashClosing_UserWise WHERE UsrCash_CclKey=" + UsercclKey + "", sqlcon);
                    cmd.ExecuteNonQuery();
                }
                catch { }
                string Desc = "AllUser";
                if (optLognedUser == true)
                {
                    Desc = UserName;
                }

                try
                {
                    SqlCommand cmd = new SqlCommand("UPDATE  CashClosing_Mst SET Ccl_Description='" + Desc + "' WHERE Ccl_Key=" + UsercclKey + "", sqlcon);
                    cmd.ExecuteNonQuery();
                }
                catch { }
                //***********************.Invoice Data***************************************
                int transNo;
                Double collAmount = 0;
                string CollQuery = "";
                string TempTrnsNo = "";
                string UpdQuery = "";
                string username = "";
                int Inv_CashUserId = 0;
                SqlCommand cmd1 = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataTable dt = new DataTable();

                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();

                if (optAllUser == true)
                {
                    CollQuery = "SELECT Inv_No, Inv_Name,Inv_RcvdAmt,Inv_UsrId FROM Invoice_Mst WHERE Inv_PayMode='Cash' and Isnull(Inv_CashAllUsr,0)=0 AND Inv_Status <> -1  And Inv_CpyId = " + CompanyId + " ORDER BY Inv_No";


                }
                else
                {
                    CollQuery = "SELECT Inv_No, Inv_Name,Inv_RcvdAmt,Inv_UsrId FROM Invoice_Mst WHERE Inv_PayMode='Cash' and Isnull(Inv_CashUsr,0)=0 AND ISNUll(Inv_UsrId,0)>0 AND Inv_UsrId=" + UserId + " AND Inv_Status <> -1 And Inv_YrId = " + YearId + " And Inv_CpyId = " + CompanyId + " ORDER BY Inv_No";
                    username = db.Users.Where(p => p.Usr_key == UserId).Select(pat => pat.Usr_Name).FirstOrDefault();
                    //= (from c in db.Users where c.Usr_key==UserId select c).FirstOrDefault(); 
                    CashClosing get = new CashClosing()
                    {
                        username = username
                    };
                    GETCASHCLOSING.Add(get);
                }




                //********************Invoice Table*************************
                try
                {
                    cmd1 = new SqlCommand(CollQuery, sqlcon);
                    sda = new SqlDataAdapter(cmd1);
                    sda.Fill(dt);
                    int TempRow = 0;
                    double TempColl = 0;
                    int Inv_No = 0;
                    string Inv_Name = "";
                    double Inv_RcvdAmt = 0;
                    double Inv_UsrId = 0;

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {



                            SqlCommand cmd = new SqlCommand("StProc_INSERT_CASH_CLOSING_USERWISE", sqlcon);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@UsrCash_CclKey", UsercclKey);
                            transNo = 0;
                            collAmount = 0;
                            Inv_CashUserId = 0;
                            try
                            {
                                transNo = Convert.ToInt32(dr["Inv_No"].ToString());

                            }
                            catch { }
                            if (transNo > 0)
                            {
                                if (TempTrnsNo == "")
                                {
                                    TempTrnsNo = transNo.ToString();
                                }
                                else
                                {
                                    TempTrnsNo = TempTrnsNo + "," + transNo.ToString();
                                }

                            }
                            try
                            {
                                collAmount = Convert.ToDouble(dr["Inv_RcvdAmt"].ToString());
                            }
                            catch { }
                            try
                            {
                                Inv_CashUserId = Convert.ToInt32(dr["Inv_userId"].ToString());
                            }
                            catch { }
                            cmd.Parameters.AddWithValue("@UsrCash_TransNo", transNo);
                            cmd.Parameters.AddWithValue("@UsrCash_Name", dr["Inv_Name"].ToString());
                            cmd.Parameters.AddWithValue("@UsrCash_Amount", collAmount);
                            cmd.Parameters.AddWithValue("@UsrCash_Type", "Invoice");
                            cmd.Parameters.AddWithValue("@UsrCash_User", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_UsrId", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_YrId", YearId);
                            cmd.Parameters.AddWithValue("@UsrCash_CpyId", CompanyId);
                            cmd.Parameters.AddWithValue("@UsrCash_InvUserId", Inv_CashUserId);
                            cmd.ExecuteNonQuery();

                        }
                    }
                    if (TempTrnsNo != "")
                    {
                        if (optAllUser == true)
                        {
                            UpdQuery = "UPDATE Invoice_Mst SET Inv_CashAllUsr=1 where Inv_No IN (" + TempTrnsNo + ") AND  Inv_YrId = " + YearId + " And Inv_CpyId =" + CompanyId + "";
                        }
                        else
                        {
                            UpdQuery = "UPDATE Invoice_Mst SET Inv_CashUsr=1 where Inv_No IN (" + TempTrnsNo + ") AND  Inv_YrId = " + YearId + " And Inv_CpyId =" + CompanyId + "";

                        }
                        SqlCommand updcmd = new SqlCommand(UpdQuery, sqlcon);
                        updcmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
                //****************************End of Invoice Table**************************
                //***********************Pending Data***************************************
                try
                {
                    transNo = 0;
                    collAmount = 0;
                    TempTrnsNo = "";
                    UpdQuery = "";
                    string PendQuery = "";
                    Inv_CashUserId = 0;
                    SqlCommand cmd4 = new SqlCommand();
                    SqlDataAdapter sda1 = new SqlDataAdapter();
                    DataTable dt1 = new DataTable();


                    if (optAllUser == true)
                    {

                        PendQuery = "SELECT Pend.PndC_Labno, Inv.Inv_Name,Pend.PndC_Amount,PndC_UsrId FROM PendingCollections Pend LEFT JOIN Invoice_Mst Inv ON Pend.PndC_Labno=Inv.Inv_No AND Pend.PndC_YrId=Inv.Inv_YrId AND Pend.PndC_CpyId=Inv.Inv_CpyId WHERE ISNULL(PndC_CashAllUsr,0)=0 AND PndC_Cancld!=1 AND PndC_YrId=" + YearId + " AND PndC_InvPaymode='Cash' AND  PndC_CpyId=" + CompanyId + " ORDER BY PndC_Labno";


                    }
                    else
                    {

                        PendQuery = "SELECT Pend.PndC_Labno, Inv.Inv_Name,Pend.PndC_Amount,PndC_UsrId FROM PendingCollections Pend LEFT JOIN Invoice_Mst Inv ON Pend.PndC_Labno=Inv.Inv_No AND Pend.PndC_YrId=Inv.Inv_YrId AND Pend.PndC_CpyId=Inv.Inv_CpyId WHERE ISNULL(PndC_CashUsr,0)=0 AND PndC_Cancld!=1 AND PndC_InvPaymode='Cash' AND PndC_CpyId=" + CompanyId + " AND Isnull(PndC_UsrId,0)>0 AND PndC_UsrId=" + UserId + " ORDER BY PndC_Labno ";


                    }




                    cmd4 = new SqlCommand(PendQuery, sqlcon);
                    sda = new SqlDataAdapter(cmd4);
                    sda.Fill(dt1);


                    if (dt1.Rows.Count > 0)
                    {


                        foreach (DataRow dr in dt1.Rows)
                        {


                            SqlCommand cmd6 = new SqlCommand("StProc_INSERT_CASH_CLOSING_USERWISE", sqlcon);
                            cmd6.CommandType = CommandType.StoredProcedure;
                            cmd6.Parameters.AddWithValue("@UsrCash_CclKey", UsercclKey);
                            transNo = 0;
                            collAmount = 0;
                            Inv_CashUserId = 0;
                            try
                            {
                                transNo = Convert.ToInt32(dr["PndC_Labno"].ToString());
                            }
                            catch { }
                            if (transNo > 0)
                            {
                                if (TempTrnsNo == "")
                                {
                                    TempTrnsNo = transNo.ToString();
                                }
                                else
                                {
                                    TempTrnsNo = TempTrnsNo + "," + transNo.ToString();
                                }

                            }
                            try
                            {
                                collAmount = Convert.ToDouble(dr["PndC_Amount"].ToString());
                            }
                            catch { }
                            try
                            {
                                Inv_CashUserId = Convert.ToInt32(dr["PndC_UsrId"].ToString());
                            }
                            catch { }
                            cmd6.Parameters.AddWithValue("@UsrCash_TransNo", transNo);
                            cmd6.Parameters.AddWithValue("@UsrCash_Name", dr["Inv_Name"].ToString());
                            cmd6.Parameters.AddWithValue("@UsrCash_Amount", collAmount);
                            cmd6.Parameters.AddWithValue("@UsrCash_Type", "Pending Coll");
                            cmd6.Parameters.AddWithValue("@UsrCash_User", UserId);
                            cmd6.Parameters.AddWithValue("@UsrCash_UsrId", UserId);
                            cmd6.Parameters.AddWithValue("@UsrCash_YrId", YearId);
                            cmd6.Parameters.AddWithValue("@UsrCash_CpyId", CompanyId);
                            cmd6.Parameters.AddWithValue("@UsrCash_InvUserId", Inv_CashUserId);
                            cmd6.ExecuteNonQuery();

                        }
                    }
                    if (TempTrnsNo != "")
                    {
                        if (optAllUser == true)
                        {
                            UpdQuery = "UPDATE PendingCollections SET PndC_CashAllUsr=1 where PndC_Labno IN (" + TempTrnsNo + ") AND   PndC_CpyId =" + CompanyId + "";
                        }
                        else
                        {
                            UpdQuery = "UPDATE PendingCollections SET PndC_CashUsr=1 where PndC_Labno IN (" + TempTrnsNo + ") And PndC_CpyId =" + CompanyId + "";

                        }
                        SqlCommand updcmd = new SqlCommand(UpdQuery, sqlcon);
                        updcmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
                //************************end Pending Coll Table**************************************
                //***********************payment Data***************************************
                try
                {
                    transNo = 0;
                    collAmount = 0;
                    TempTrnsNo = "";
                    UpdQuery = "";
                    //int nRefundSCheme = 0;
                    SqlCommand cmd7 = new SqlCommand();
                    //SqlDataAdapter sda = new SqlDataAdapter();
                    string PaymQuery = "";
                    if (optAllUser == true)
                    {

                        if (nRefundSCheme > 0)
                        {
                            PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_Id!=" + nRefundSCheme + " AND vchr_CpyId=" + CompanyId + "" + Environment.NewLine
                                       + " UNION " + Environment.NewLine
                                       + " SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment'  AND vchr_Id=" + nRefundSCheme + " AND vchr_CpyId=" + CompanyId + "";
                        }
                        else
                        {
                            PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "";
                        }



                    }
                    else
                    {


                        if (nRefundSCheme > 0)
                        {
                            PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "   AND vchr_Id!=" + nRefundSCheme + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "" + Environment.NewLine
                                        + " UNION " + Environment.NewLine
                                       + " SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment'  AND vchr_CpyId=" + CompanyId + "   AND vchr_Id=" + nRefundSCheme + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "";

                        }
                        else
                        {
                            PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "";
                        }

                    }
                    DataTable dt2 = new DataTable();
                    dt.Reset();
                    cmd1 = new SqlCommand(PaymQuery, sqlcon);
                    sda = new SqlDataAdapter(cmd1);
                    sda.Fill(dt2);
                    if (dt2.Rows.Count > 0)
                    {


                        foreach (DataRow dr in dt2.Rows)
                        {
                            //for (int i = 0; i < grdPayments.Rows.Count; i++)
                            //{
                            SqlCommand cmd = new SqlCommand("StProc_INSERT_CASH_CLOSING_USERWISE", sqlcon);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@UsrCash_CclKey", UsercclKey);
                            transNo = 0;
                            collAmount = 0;
                            Inv_CashUserId = 0;
                            try
                            {
                                transNo = Convert.ToInt32(dr["vchr_TransNo"].ToString());
                            }
                            catch { }
                            if (transNo > 0)
                            {
                                if (nRefundSCheme > 0)
                                {
                                    if (TempTrnsNo == "")
                                    {
                                        TempTrnsNo = transNo.ToString();
                                    }
                                    else
                                    {
                                        TempTrnsNo = TempTrnsNo + "," + transNo.ToString();
                                    }
                                }
                                else
                                {
                                    if (TempTrnsNo == "")
                                    {
                                        TempTrnsNo = transNo.ToString();
                                    }
                                    else
                                    {
                                        TempTrnsNo = TempTrnsNo + "," + transNo.ToString();
                                    }
                                }

                            }
                            try
                            {
                                collAmount = Convert.ToDouble(dr["vchr_Payment"].ToString());
                            }
                            catch { }
                            try
                            {
                                Inv_CashUserId = Convert.ToInt32(dr["vchr_UsrId"].ToString());
                            }
                            catch { }
                            cmd.Parameters.AddWithValue("@UsrCash_TransNo", transNo);
                            cmd.Parameters.AddWithValue("@UsrCash_Name", dr["AccountName"].ToString());
                            cmd.Parameters.AddWithValue("@UsrCash_Amount", collAmount);
                            cmd.Parameters.AddWithValue("@UsrCash_Type", "Cash Payment");
                            cmd.Parameters.AddWithValue("@UsrCash_User", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_UsrId", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_YrId", YearId);
                            cmd.Parameters.AddWithValue("@UsrCash_CpyId", CompanyId);
                            cmd.Parameters.AddWithValue("@UsrCash_InvUserId", Inv_CashUserId);
                            cmd.ExecuteNonQuery();

                        }
                    }

                    if (TempTrnsNo != "")
                    {
                        if (nRefundSCheme > 0)
                        {
                            if (optAllUser == true)
                            {
                                UpdQuery = "UPDATE Vouchers SET vchr_CashAllUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_TransType='Cash Payment' And vchr_CpyId =" + CompanyId + "";
                            }
                            else
                            {
                                UpdQuery = "UPDATE Vouchers SET vchr_CashUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_TransType='Cash Payment' And vchr_CpyId =" + CompanyId + "";

                            }
                        }
                        else
                        {
                            if (optAllUser == true)
                            {
                                UpdQuery = "UPDATE Vouchers SET vchr_CashAllUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_YrId = " + YearId + " And vchr_CpyId =" + CompanyId + "";
                            }
                            else
                            {
                                UpdQuery = "UPDATE Vouchers SET vchr_CashUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_YrId = " + YearId + " And vchr_CpyId =" + CompanyId + "";

                            }
                        }
                        SqlCommand updcmd = new SqlCommand(UpdQuery, sqlcon);
                        updcmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
                //************************end Payment Table**************************************
                //***********************Reciept Data***************************************
                try
                {
                    transNo = 0;
                    collAmount = 0;
                    TempTrnsNo = "";
                    UpdQuery = "";
                    SqlCommand cmd9 = new SqlCommand();
                    string RecQuery = "";
                    if (optAllUser == true)
                    {

                        RecQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Receipt,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Receipts' AND vchr_Date>='" + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId=" + CompanyId + "";

                    }
                    else
                    {

                        RecQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Receipt,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Receipts' AND vchr_Date>='" + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId=" + CompanyId + " AND ISNULL(vchr_UsrId,0)>0 AND vchr_UsrId=" + UserId + "";

                    }

                    DataTable dt3 = new DataTable();

                    cmd9 = new SqlCommand(RecQuery, sqlcon);
                    sda = new SqlDataAdapter(cmd9);
                    sda.Fill(dt3);
                    if (dt3.Rows.Count > 0)
                    {


                        foreach (DataRow dr in dt3.Rows)
                        {

                            SqlCommand cmd = new SqlCommand("StProc_INSERT_CASH_CLOSING_USERWISE", sqlcon);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@UsrCash_CclKey", UsercclKey);
                            transNo = 0;
                            collAmount = 0;
                            Inv_CashUserId = 0;
                            try
                            {
                                transNo = Convert.ToInt32(dr["vchr_TransNo"].ToString());
                            }
                            catch { }
                            if (transNo > 0)
                            {
                                if (TempTrnsNo == "")
                                {
                                    TempTrnsNo = transNo.ToString();
                                }
                                else
                                {
                                    TempTrnsNo = TempTrnsNo + "," + transNo.ToString();
                                }

                            }
                            try
                            {
                                collAmount = Convert.ToDouble(dr["vchr_Receipt"].ToString());
                            }
                            catch { }
                            try
                            {
                                Inv_CashUserId = Convert.ToInt32(dr["vchr_UsrId"].ToString());
                            }
                            catch { }
                            cmd.Parameters.AddWithValue("@UsrCash_TransNo", transNo);
                            cmd.Parameters.AddWithValue("@UsrCash_Name", dr["AccountName"].ToString());
                            cmd.Parameters.AddWithValue("@UsrCash_Amount", collAmount);
                            cmd.Parameters.AddWithValue("@UsrCash_Type", "Receipts");
                            cmd.Parameters.AddWithValue("@UsrCash_User", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_UsrId", UserId);
                            cmd.Parameters.AddWithValue("@UsrCash_YrId", YearId);
                            cmd.Parameters.AddWithValue("@UsrCash_CpyId", CompanyId);
                            cmd.Parameters.AddWithValue("@UsrCash_InvUserId", Inv_CashUserId);
                            cmd.ExecuteNonQuery();

                        }
                    }
                    if (TempTrnsNo != "")
                    {
                        if (optAllUser == true)
                        {

                            UpdQuery = "UPDATE Vouchers SET vchr_CashAllUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_Date >= '" + StartDate.ToString("yyyy-MM-dd") + "' And vchr_CpyId =" + CompanyId + "";
                        }
                        else
                        {

                            UpdQuery = "UPDATE Vouchers SET vchr_CashUsr=1 where vchr_TransNo IN (" + TempTrnsNo + ") AND  vchr_Date >= '" + StartDate.ToString("yyyy-MM-dd") + "' And vchr_CpyId =" + CompanyId + "";

                        }
                        SqlCommand updcmd = new SqlCommand(UpdQuery, sqlcon);
                        updcmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
            }





            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(getkey, JsonRequestBehavior.AllowGet);
        }

        //************************END-CASH-CLOSING-SAVE**********************************


        public JsonResult CASHCLOSINGNEXT(string txtid)
        {

            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            logindetails l = Session["logindls"] as logindetails;
            List<CashClosing> getkey = new List<CashClosing>();
            string txtId = txtid;
            double YearId = (double)l.Yr_Id;
            //txtId = txtid;
            int nId = 0;
            double CompanyId = l.BrMst_Key;
            SqlCommand cmd10 = new SqlCommand();

            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }
            if (nId > 0)
            {
                cmd10 = new SqlCommand(" select top 1 Ccl_Key from CashClosing_Mst  where Ccl_Key>" + nId + " AND Ccl_CpyId=" + CompanyId + " order by Ccl_Key", sqlcon);
            }
            else
            {
                return Json(new { Result = "No Data found" });

            }
            try
            {
                nId = Convert.ToInt32(cmd10.ExecuteScalar());
            }
            catch { }
            CashClosing gettxtid = new CashClosing()
            {
                txtId = Convert.ToString(nId)

            };
            TempData["mydata"] = gettxtid;
            getkey.Add(gettxtid);





            return Json(nId, JsonRequestBehavior.AllowGet);
        }
        public JsonResult CASHCLOSINGPREV(string txtid)
        {
            List<CashClosing> getkey = new List<CashClosing>();
            string txtId = txtid;
            int nId = 0;

            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            logindetails l = Session["logindls"] as logindetails;

            double YearId = (double)l.Yr_Id;
            //txtId = txtid;

            double CompanyId = l.BrMst_Key;


            SqlCommand cmd10 = new SqlCommand();
            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }
            if (nId > 0)
            {
                cmd10 = new SqlCommand(" select top 1 Ccl_Key from CashClosing_Mst  where Ccl_Key<" + nId + " AND Ccl_CpyId=" + CompanyId + " order by Ccl_Key desc", sqlcon);
            }
            else
            {
                cmd10 = new SqlCommand("select max( Ccl_Key) from CashClosing_Mst where  Ccl_YrId=" + YearId + " AND Ccl_CpyId=" + CompanyId + "", sqlcon);
            }
            try
            {
                nId = Convert.ToInt32(cmd10.ExecuteScalar());
            }
            catch { }
            CashClosing gettxtid = new CashClosing()
            {
                txtId = Convert.ToString(nId)

            };
            TempData["mydata"] = gettxtid;
            getkey.Add(gettxtid);

            sqlcon.Close();

            return Json(nId, JsonRequestBehavior.AllowGet);

        }
        public JsonResult CASHCLOSINGFILLINGINVOICE()
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            CashClosing data = TempData["mydata"] as CashClosing;
            logindetails l = Session["logindls"] as logindetails;

            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int nId = 0;
            bool optAllUser = false;
            bool ChkusrWise = false;
            int Inv_No = 0;
            string Inv_Name = "";
            string Inv_UsrId = "";
            double Inv_RcvdAmt = 0;
            double PndC_Labno = 0;
            double PndC_Amount = 0;
            string PndC_UsrId = "";
            string vchr_TransNo = "";
            string AccountName = "";
            string vchr_UsrId = "";
            double vchr_Payment = 0;
            string vchr_Receipt = "";
            string txtId = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            var getcclkey = (from c in db.CashClosing_Mst
                             where c.Ccl_YrId == (decimal)(YearId) && c.Ccl_CpyId == (decimal)CompanyId
                             select (c.Ccl_Key)).Max();
            txtId = Convert.ToString(getcclkey);
            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }
            if (nId > 0)
            {
                //***************************************************************

                string Descrip = "";
                SqlCommand cmd = new SqlCommand("SELECT Ccl_Description from CashClosing_Mst WHERE Ccl_Key=" + nId + "", sqlcon);
                Descrip = cmd.ExecuteScalar().ToString();


                //******************Invoice **************************************
                cmd = new SqlCommand("SELECT UsrCash_TransNo,UsrCash_Name,UsrCash_Amount,UsrCash_InvUserId FROM CashClosing_UserWise WHERE UsrCash_CclKey=" + nId + " AND UsrCash_Type='Invoice'", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda1.Fill(dt);
                double TempColl = 0;

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {

                        Inv_No = Convert.ToInt32(dr["UsrCash_TransNo"].ToString());

                        Inv_Name = dr["UsrCash_Name"].ToString();
                        Inv_RcvdAmt = Convert.ToDouble(dr["UsrCash_Amount"].ToString());
                        Inv_UsrId = dr["UsrCash_InvUserId"].ToString();

                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["UsrCash_Amount"]);
                        }
                        catch { }

                        CashClosing getinvoce = new CashClosing()
                        {
                            Inv_No = Inv_No,
                            Inv_Name = Inv_Name,
                            Inv_RcvdAmt = Inv_RcvdAmt,
                            Inv_UsrId = Convert.ToDouble(Inv_UsrId),


                        };



                        GETCASHCLOSING.Add(getinvoce);


                    }
                }
                sqlcon.Close();

            }
            var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;

        }
        public JsonResult CASHCLOSINGSETVALUE(string cashclosingdate)
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            logindetails l = Session["logindls"] as logindetails;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double logInBranchId = l.BrMst_Key;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            //DateTime currentdate = DateTime.Now;
            DateTime currentdate = DateTime.ParseExact(cashclosingdate, "dd/MM/yyyy", null);
            DateTime dtpDate1;
            dtpDate1 = currentdate;
            var dtpDate = dtpDate1.ToString("yyyy-MM-dd");
            double _NetAmt = 0;
            double _PendingCollAmt = 0;
            double _BalanceAmt = 0;
            double TotalCollectionAmt = 0;
            double _ReceiptAmt = 0;
            double _PaymentAmt = 0;
            double _OfficeAmt = 0;
            string txtColl1 = "";
            string txtPayments = "";
            string txtOfficeAmt = "";

            SqlCommand Cmd;
            try
            {
                Cmd = new SqlCommand("select isnull(sum(Inv_Netamt),0) from Invoice_Mst WITH (NOLOCK) where Inv_Status!=-1 and Inv_PayMode='Cash' And Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " And Inv_Date='" + dtpDate + "'", sqlcon);
                _NetAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }
            try
            {
                Cmd = new SqlCommand("select isnull(sum(Inv_BalAmt),0) from Invoice_Mst WITH (NOLOCK) where Inv_Status!=-1 and Inv_PayMode='Cash' And Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " And Inv_Date='" + dtpDate + "'", sqlcon);
                _BalanceAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }
            try
            {
                Cmd = new SqlCommand("select isnull(sum(PndC_Amount),0) from PendingCollections WITH (NOLOCK) where PndC_Cancld=0  and PndC_CpyId=" + CompanyId + " And PndC_Date='" + dtpDate + "' AND ISNULL(PndC_InsId,0)=0", sqlcon);
                _PendingCollAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }

            try
            {
                Cmd = new SqlCommand("Select isnull(sum(vchr_Receipt),0) from   Vouchers WITH (NOLOCK) where   vchr_TransType='Cash Receipts' and   vchr_CpyId=" + CompanyId + " and vchr_Date='" + dtpDate + "'AND vchr_BrId=" + logInBranchId + " ", sqlcon);
                _ReceiptAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }

            try
            {
                Cmd = new SqlCommand("Select isnull(sum(vchr_Payment),0) from   Vouchers WITH (NOLOCK) where   vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " and vchr_Date='" + dtpDate + "'AND vchr_BrId=" + logInBranchId + " ", sqlcon);
                _PaymentAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }

            try
            {
                Cmd = new SqlCommand("select isnull(sum(Ccl_OffAmt),0) from CashClosing_Mst WITH (NOLOCK) where  convert(Date,Ccl_Date,0)='" + dtpDate + "' and Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "", sqlcon);
                string a = "select isnull(sum(Ccl_OffAmt),0) from CashClosing_Mst where  convert(Date,Ccl_Date,0)='" + dtpDate + "' and Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "";
                _OfficeAmt = Convert.ToDouble(Cmd.ExecuteScalar());
            }
            catch { }
            TotalCollectionAmt = _NetAmt + _PendingCollAmt + _ReceiptAmt + _BalanceAmt;
            txtColl1 = TotalCollectionAmt.ToString();
            txtPayments = _PaymentAmt.ToString();
            txtOfficeAmt = _OfficeAmt.ToString();
            CashClosing getsetvalue = new CashClosing()
            {
                txtcoll1 = Convert.ToDouble(txtColl1),
                txtpayment = Convert.ToDouble(txtPayments),
                txtofficeamt = Convert.ToDouble(txtOfficeAmt)




            };


            GETCASHCLOSING.Add(getsetvalue);
            //txtTotal.Text = FindOfficeTotal().ToString();

            return Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);

        }










        public JsonResult CASHCLOSINGFILLINGPENDING()
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            CashClosing data = TempData["mydata"] as CashClosing;
            logindetails l = Session["logindls"] as logindetails;

            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int nId = 0;
            bool optAllUser = false;
            bool ChkusrWise = false;
            int Inv_No = 0;
            string Inv_Name = "";
            string Inv_UsrId = "";
            double Inv_RcvdAmt = 0;
            double PndC_Labno = 0;
            double PndC_Amount = 0;
            string PndC_UsrId = "";
            string vchr_TransNo = "";
            string AccountName = "";
            string vchr_UsrId = "";
            double vchr_Payment = 0;
            string vchr_Receipt = "";
            string txtId = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            var getcclkey = (from c in db.CashClosing_Mst
                             where c.Ccl_YrId == (decimal)(YearId) && c.Ccl_CpyId == (decimal)CompanyId
                             select (c.Ccl_Key)).Max();
            txtId = Convert.ToString(getcclkey);
            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }

            double TempColl = 0;
            if (nId > 0)
            {
                //***************************************************************


                string Descrip = "";
                SqlCommand cmd = new SqlCommand("SELECT Ccl_Description from CashClosing_Mst WHERE Ccl_Key=" + nId + "", sqlcon);
                Descrip = cmd.ExecuteScalar().ToString();
                if (Descrip == "AllUser")
                {

                }
                else
                {

                }
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda1.Fill(dt);
                dt.Reset();
                cmd = new SqlCommand("SELECT UsrCash_TransNo,UsrCash_Name,UsrCash_Amount,UsrCash_InvUserId FROM CashClosing_UserWise WHERE UsrCash_CclKey=" + nId + " AND UsrCash_Type='Pending Coll'", sqlcon);
                sda1 = new SqlDataAdapter(cmd);
                // DataTable dt = new DataTable();
                sda1.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        PndC_Labno = Convert.ToInt32(dr["UsrCash_TransNo"].ToString());
                        Inv_Name = dr["UsrCash_Name"].ToString();
                        PndC_Amount = Convert.ToInt32(dr["UsrCash_Amount"].ToString());
                        PndC_UsrId = dr["UsrCash_InvUserId"].ToString();


                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["UsrCash_Amount"]);
                        }
                        catch { }

                        CashClosing getpending = new CashClosing()
                        {
                            PndC_Labno = PndC_Labno,
                            pndname = Inv_Name,
                            PndC_Amount = PndC_Amount,
                            PndC_UsrId = Convert.ToDouble(PndC_UsrId),
                            //PendColl= PendColl

                        };
                        TempData["mydata"] = getpending;

                        GETCASHCLOSING.Add(getpending);
                    }
                }



            }
            sqlcon.Close();
            var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }
        public JsonResult CASHCLOSINGFILLINGPAYMENT()
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            CashClosing data = TempData["mydata"] as CashClosing;
            logindetails l = Session["logindls"] as logindetails;

            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int nId = 0;
            bool optAllUser = false;
            bool ChkusrWise = false;
            int Inv_No = 0;
            string Inv_Name = "";
            string Inv_UsrId = "";
            double Inv_RcvdAmt = 0;
            double PndC_Labno = 0;
            double PndC_Amount = 0;
            string PndC_UsrId = "";
            string vchr_TransNo = "";
            string AccountName = "";
            string vchr_UsrId = "";
            double vchr_Payment = 0;
            string vchr_Receipt = "";
            string txtId = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            var getcclkey = (from c in db.CashClosing_Mst
                             where c.Ccl_YrId == (decimal)(YearId) && c.Ccl_CpyId == (decimal)CompanyId
                             select (c.Ccl_Key)).Max();
            txtId = Convert.ToString(getcclkey);
            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }
            //SqlCommand cmd = new SqlCommand();

            double TempColl = 0;
            if (nId > 0)
            {
                //***************************************************************


                string Descrip = "";
                SqlCommand cmd = new SqlCommand("SELECT Ccl_Description from CashClosing_Mst WHERE Ccl_Key=" + nId + "", sqlcon);
                Descrip = cmd.ExecuteScalar().ToString();
                if (Descrip == "AllUser")
                {

                }
                else
                {

                }
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda1.Fill(dt);
                dt.Reset();
                cmd = new SqlCommand("SELECT UsrCash_TransNo,UsrCash_Name,UsrCash_Amount,UsrCash_InvUserId  FROM CashClosing_UserWise WHERE UsrCash_CclKey=" + nId + " AND UsrCash_Type='Cash Payment'", sqlcon);
                sda1 = new SqlDataAdapter(cmd);
                // DataTable dt = new DataTable();
                sda1.Fill(dt);
                //grdPayments.Rows.Clear();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        vchr_TransNo = dr["UsrCash_TransNo"].ToString();
                        AccountName = dr["UsrCash_Name"].ToString();
                        vchr_UsrId = dr["UsrCash_Amount"].ToString();
                        vchr_Payment = Convert.ToDouble(dr["UsrCash_InvUserId"].ToString());


                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["UsrCash_Amount"]);
                        }
                        catch { }
                        //Payments = Payments + TempColl;

                        CashClosing gepayment = new CashClosing()
                        {
                            vchr_TransNo = vchr_TransNo,
                            AccountName = AccountName,

                            vchr_UsrId = vchr_UsrId,
                            vchr_Payment = vchr_Payment,
                            //Payments= Payments
                        };
                        TempData["mydata"] = gepayment;
                        GETCASHCLOSING.Add(gepayment);
                    }
                }


            }
            var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }

        public JsonResult CASHCLOSINGFILLINGRECEPT()
        {
            List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
            CashClosing data = TempData["mydata"] as CashClosing;
            logindetails l = Session["logindls"] as logindetails;

            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int nId = 0;
            bool optAllUser = false;
            bool ChkusrWise = false;
            int Inv_No = 0;
            string Inv_Name = "";
            string Inv_UsrId = "";
            double Inv_RcvdAmt = 0;
            double PndC_Labno = 0;
            double PndC_Amount = 0;
            string PndC_UsrId = "";
            string vchr_TransNo = "";
            string AccountName = "";
            string vchr_UsrId = "";
            double vchr_Payment = 0;
            string vchr_Receipt = "";
            string txtId = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            var getcclkey = (from c in db.CashClosing_Mst
                             where c.Ccl_YrId == (decimal)(YearId) && c.Ccl_CpyId == (decimal)CompanyId
                             select (c.Ccl_Key)).Max();
            txtId = Convert.ToString(getcclkey);
            try
            {
                nId = Convert.ToInt32(txtId);
            }
            catch { }
            //SqlCommand cmd = new SqlCommand();

            double TempColl = 0;
            if (nId > 0)
            {
                //***************************************************************


                string Descrip = "";
                SqlCommand cmd = new SqlCommand("SELECT Ccl_Description from CashClosing_Mst WHERE Ccl_Key=" + nId + "", sqlcon);
                Descrip = cmd.ExecuteScalar().ToString();
                if (Descrip == "AllUser")
                {

                }
                else
                {

                }
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda1.Fill(dt);
                dt.Reset();
                cmd = new SqlCommand("SELECT UsrCash_TransNo,UsrCash_Name,UsrCash_Amount,UsrCash_InvUserId FROM CashClosing_UserWise WHERE UsrCash_CclKey=" + nId + " AND UsrCash_Type='Receipts'", sqlcon);
                sda1 = new SqlDataAdapter(cmd);
                // DataTable dt = new DataTable();
                sda1.Fill(dt);
                //grdReceipts.Rows.Clear();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        vchr_TransNo = dr["UsrCash_TransNo"].ToString();
                        AccountName = dr["UsrCash_Name"].ToString();
                        vchr_Receipt = dr["UsrCash_Amount"].ToString();
                        vchr_UsrId = dr["UsrCash_InvUserId"].ToString();

                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["UsrCash_Amount"]);
                        }
                        catch { }


                        CashClosing getrecepit = new CashClosing()
                        {
                            vchr_recpno = vchr_TransNo,
                            AccountNamerecp = AccountName,
                            vchr_Receipt = vchr_Receipt,
                            vchr_UsrIdrecp = vchr_UsrId,




                        };
                        TempData["mydata"] = getrecepit;
                        GETCASHCLOSING.Add(getrecepit);

                    }
                }
            }
            var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;
        }


        public JsonResult CASHCLOSINGFILLING()
        {
            try
            {
                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
                CashClosing data = TempData["mydata"] as CashClosing;
                logindetails l = Session["logindls"] as logindetails;

                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                int nId = 0;
                bool optAllUser = false;
                bool ChkusrWise = false;
                int Inv_No = 0;
                string Inv_Name = "";
                string Inv_UsrId = "";
                double Inv_RcvdAmt = 0;
                double PndC_Labno = 0;
                double PndC_Amount = 0;
                string PndC_UsrId = "";
                string vchr_TransNo = "";
                string AccountName = "";
                string vchr_UsrId = "";
                double vchr_Payment = 0;
                string vchr_Receipt = "";
                string txtColl1 = "";
                string txtPayments = "";
                string txtColl2 = "";
                string txtReceipt = "";
                string txtOfficeAmt = "";
                string txt1000 = "";
                string txt2000 = "";
                string txt500 = "";
                string txt200 = "";
                string txt100 = "";
                string txt50 = "";
                string txt20 = "";
                string txt10 = "";
                string txt5 = "";
                int txtCoins = 0;
                string txtNote = "";
                string txtToOffice = "";
                string txtBalance = "";
                string txtShort = "";
                string txtExcess = "";
                string txtDnoTotal = "";
                string txtUserInfo = "";
                string txtId = data.txtId;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                try
                {
                    nId = Convert.ToInt32(txtId);
                }
                catch { }
                //SqlCommand sqlcmd0 = new SqlCommand();

                sqlCmd.CommandType = CommandType.Text;
                sqlCmd.CommandText = "SELECT ISNULL(Ccl_Key, 0) Ccl_Key,Ccl_Date,ISNULL(Ccl_Time, '') Ccl_Time,ISNULL(Ccl_Coll1, 0) Ccl_Coll1,ISNULL(Ccl_Coll2, 0) Ccl_Coll2,ISNULL(Ccl_PayMnt, 0) Ccl_PayMnt," + Environment.NewLine
               + "ISNULL(Ccl_OffAmt, 0) Ccl_OffAmt,ISNULL(Ccl_Receipt,0) Ccl_Receipt,ISNULL(Ccl_CshDen1000, 0) Ccl_CshDen1000,ISNULL(Ccl_CshDen2000, 0) Ccl_CshDen2000,ISNULL(Ccl_CshDen500, 0) Ccl_CshDen500" + Environment.NewLine
            + ",ISNULL(Ccl_CshDen200, 0) Ccl_CshDen200,ISNULL(Ccl_CshDen100, 0) Ccl_CshDen100,ISNULL(Ccl_CshDen50, 0) Ccl_CshDen50,ISNULL(Ccl_CshDen20, 0) Ccl_CshDen20" + Environment.NewLine
            + ",ISNULL(Ccl_CshDen10, 0) Ccl_CshDen10,ISNULL(Ccl_CshDen5, 0) Ccl_CshDen5,ISNULL(Ccl_CshDenCoins, 0) Ccl_CshDenCoins,ISNULL(Ccl_CshDenSum, 0) Ccl_CshDenSum" + Environment.NewLine
            + ",ISNULL(Ccl_Note, '') Ccl_Note,ISNULL(Ccl_ToOffice, 0) Ccl_ToOffice,ISNULL(Ccl_Balance, 0) Ccl_Balance,ISNULL(Ccl_Short, 0) Ccl_Short,ISNULL(Ccl_Excess, 0) Ccl_Excess" + Environment.NewLine
            + ",ISNULL(Ccl_Tmpstmp, '') Ccl_Tmpstmp,ISNULL(Ccl_UsrId, 0) Ccl_UsrId,ISNULL(Ccl_YrId, 0) Ccl_YrId,ISNULL(Ccl_CpyId, 0) Ccl_CpyId,ISNULL(Ccl_Updtd, 0)Ccl_Updtd" + Environment.NewLine
         + "FROM dbo.CashClosing_Mst WITH (NOLOCK) WHERE  Ccl_Key =" + nId + " AND Ccl_YrId =" + YearId + " AND Ccl_CpyId =" + CompanyId + "";
                SqlDataAdapter sd0 = new SqlDataAdapter(sqlCmd);
                DataTable dt0 = new DataTable();
                sd0.Fill(dt0);




                if (nId > 0)
                {
                    //***************************************************************


                    string Descrip = "";
                    SqlCommand cmd = new SqlCommand("SELECT Ccl_Description from CashClosing_Mst WHERE Ccl_Key=" + nId + "", sqlcon);
                    Descrip = cmd.ExecuteScalar().ToString();
                    if (Descrip == "AllUser")
                    {

                    }
                    else
                    {

                    }

                    txtId = dt0.Rows[0]["Ccl_Key"].ToString();

                    string dtpDate = "";
                    string dtptime = "";


                    try
                    {
                        dtpDate = dt0.Rows[0]["Ccl_Date"].ToString();
                        dtptime = dt0.Rows[0]["Ccl_Time"].ToString(); /*Convert.ToDateTime(_Obj.Ccl_Time);*/
                                                                      //dtpDate.Value = Convert.ToDateTime(_Obj.Ccl_Date.ToString("dd/MM/yyyy"));          //dtpDate.Value = _Obj.Ccl_Time;         
                    }
                    catch { }

                    txtColl1 = dt0.Rows[0]["Ccl_Coll1"].ToString();
                    txtColl2 = dt0.Rows[0]["Ccl_Coll2"].ToString();
                    txtPayments = dt0.Rows[0]["Ccl_PayMnt"].ToString();
                    txtReceipt = dt0.Rows[0]["Ccl_Receipt"].ToString();
                    txtOfficeAmt = dt0.Rows[0]["Ccl_OffAmt"].ToString();
                    txt1000 = dt0.Rows[0]["Ccl_CshDen1000"].ToString();
                    txt2000 = dt0.Rows[0]["Ccl_CshDen2000"].ToString();
                    txt500 = dt0.Rows[0]["Ccl_CshDen500"].ToString();
                    txt200 = dt0.Rows[0]["Ccl_CshDen200"].ToString();
                    txt100 = dt0.Rows[0]["Ccl_CshDen100"].ToString();
                    txt50 = dt0.Rows[0]["Ccl_CshDen50"].ToString();
                    txt20 = dt0.Rows[0]["Ccl_CshDen20"].ToString();
                    txt10 = dt0.Rows[0]["Ccl_CshDen10"].ToString();
                    txt5 = dt0.Rows[0]["Ccl_CshDen5"].ToString();
                    txtCoins = Convert.ToInt32(dt0.Rows[0]["Ccl_CshDenCoins"].ToString());
                    //lblHundSum.Text = _Obj.Ccl_CshDenSum.ToString();
                    txtNote = dt0.Rows[0]["Ccl_Note"].ToString();
                    txtToOffice = dt0.Rows[0]["Ccl_ToOffice"].ToString();
                    txtBalance = dt0.Rows[0]["Ccl_Balance"].ToString();
                    txtShort = dt0.Rows[0]["Ccl_Short"].ToString();
                    txtExcess = dt0.Rows[0]["Ccl_Excess"].ToString();
                    txtDnoTotal = dt0.Rows[0]["Ccl_CshDenSum"].ToString();
                    //FindCollectionTotal();
                    txtUserInfo = dt0.Rows[0]["Ccl_Tmpstmp"].ToString();

                    CashClosing getcashdetails = new CashClosing()
                    {
                        txtId = txtId,
                        cashclosingdate = dtpDate,
                        cashtime = dtptime,
                        txtcoll1 = Convert.ToDouble(txtColl1),
                        txtcoll2 = Convert.ToDouble(txtColl2),
                        txtpayment = Convert.ToDouble(txtPayments),
                        txtrecp = Convert.ToDouble(txtReceipt),
                        txtofficeamt = Convert.ToDouble(txtOfficeAmt),
                        txt2000 = Convert.ToDouble(txt2000),
                        txt1000 = Convert.ToDouble(txt1000),
                        txt500 = Convert.ToDouble(txt500),
                        txt200 = Convert.ToDouble(txt200),
                        txt100 = Convert.ToDouble(txt100),

                        txt50 = Convert.ToDouble(txt50),
                        txt20 = Convert.ToDouble(txt20),
                        txt10 = Convert.ToDouble(txt10),
                        txt5 = Convert.ToDouble(txt5),
                        txtcoin = Convert.ToDouble(txtCoins),
                        txtNote = txtNote,
                        txtoffice = Convert.ToDouble(txtToOffice),
                        txtbalance = Convert.ToDouble(txtBalance),
                        txtshortamt = Convert.ToDouble(txtShort),
                        txtexcessamt = Convert.ToDouble(txtExcess),

                        txttotal = Convert.ToDouble(txtDnoTotal),

                        userinfo = txtUserInfo











                    };
                    GETCASHCLOSING.Add(getcashdetails);



                }

                var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;


            }


            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }





















        public JsonResult DISPLAYCASHPENDINGCOLLECTION(CashClosing saveCashclosing)
        {
            CashClosing data = TempData["mydata"] as CashClosing;
            string nId = "";
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                string txtLoginedUser = "";
                string txtColl1 = "";
                string txtColl2 = "";
                string txtPayments = "";
                string txtTotal = "";
                int nRefundSCheme = 0;
                DateTime StartDate = DateTime.Now;
                bool optAllUser = false;
                double CompanyId = (double)l.BrMst_Key;
                double YearId = (double)l.Yr_Id;
                int UserId = l.Usr_EmpId;



                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;

                try
                {


                    optAllUser = saveCashclosing.cashAlluser;
                    if (Convert.ToInt32(optAllUser) == 1)
                    {
                        optAllUser = true;
                    }
                    else
                    {
                        optAllUser = false;
                    }
                }
                catch
                {

                }



                txtColl1 = "";
                txtColl2 = "";
                txtPayments = "";
                txtTotal = "";

                double Coll1 = 0;
                double Coll2 = 0;
                double PendColl = 0;
                double Payments = 0;

                double TotalAmt = 0;

                string CollQuery = "";
                string PendQuery = "";
                string PaymQuery = "";
                string RecQuery = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataTable dt = new DataTable();

                if (optAllUser == true)
                {
                    //CollQuery = "SELECT Inv_No, Inv_Name,Inv_RcvdAmt,Inv_UsrId FROM Invoice_Mst WHERE Inv_PayMode='Cash' and Isnull(Inv_CashAllUsr,0)=0 AND Inv_Status <> -1  And Inv_CpyId = " + CompanyId + " ORDER BY Inv_No";
                    PendQuery = "SELECT Pend.PndC_Labno, Inv.Inv_Name,Pend.PndC_Amount,PndC_UsrId FROM PendingCollections Pend LEFT JOIN Invoice_Mst Inv ON Pend.PndC_Labno=Inv.Inv_No AND Pend.PndC_YrId=Inv.Inv_YrId AND Pend.PndC_CpyId=Inv.Inv_CpyId WHERE ISNULL(PndC_CashAllUsr,0)=0 AND PndC_Cancld!=1 AND PndC_YrId=" + YearId + " AND PndC_InvPaymode='Cash' AND  PndC_CpyId=" + CompanyId + " ORDER BY PndC_Labno";


                }
                else
                {

                    PendQuery = "SELECT Pend.PndC_Labno, Inv.Inv_Name,Pend.PndC_Amount,PndC_UsrId FROM PendingCollections Pend LEFT JOIN Invoice_Mst Inv ON Pend.PndC_Labno=Inv.Inv_No AND Pend.PndC_YrId=Inv.Inv_YrId AND Pend.PndC_CpyId=Inv.Inv_CpyId WHERE ISNULL(PndC_CashUsr,0)=0 AND PndC_Cancld!=1 AND PndC_InvPaymode='Cash' AND PndC_CpyId=" + CompanyId + " AND Isnull(PndC_UsrId,0)>0 AND PndC_UsrId=" + UserId + " ORDER BY PndC_Labno ";


                }

                DataTable dt1 = new DataTable();
                dt.Reset();
                cmd = new SqlCommand(PendQuery, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt1);

                double PndC_Labno = 0;
                double TempRow = 0;
                double TempColl = 0;
                double PndC_Amount = 0;
                double PndC_UsrId = 0;
                string Inv_Name = "";

                if (dt1.Rows.Count > 0)
                {


                    foreach (DataRow dr in dt1.Rows)
                    {
                        PndC_Labno = Convert.ToInt32(dr["PndC_Labno"].ToString());
                        Inv_Name = dr["Inv_Name"].ToString();
                        PndC_Amount = Convert.ToInt32(dr["PndC_Amount"].ToString());
                        PndC_UsrId = Convert.ToInt32(dr["PndC_UsrId"].ToString());


                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["PndC_Amount"]);
                        }
                        catch { }

                        CashClosing getpending = new CashClosing()
                        {
                            PndC_Labno = PndC_Labno,
                            pndname = Inv_Name,
                            PndC_Amount = PndC_Amount,
                            PndC_UsrId = PndC_UsrId,


                        };
                        TempData["mydata"] = getpending;

                        GETCASHCLOSING.Add(getpending);

                    }
                }

                var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;


            }
            catch { }
            return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult DISPLAYCASHPAYMENT(CashClosing saveCashclosing)
        {
            CashClosing data = TempData["mydata"] as CashClosing;
            string nId = ""; /*data.txtId;*/
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                string txtLoginedUser = "";
                string txtColl1 = "";
                string txtColl2 = "";
                string txtPayments = "";
                string txtTotal = "";
                int nRefundSCheme = 0;
                DateTime StartDate = DateTime.Now;
                bool optAllUser = false;
                double CompanyId = (double)l.BrMst_Key;
                double YearId = (double)l.Yr_Id;
                int UserId = l.Usr_EmpId;

                string filePath = Server.MapPath("~/bin/RefundId.ini");
                //string 
                //filePath = Application.StartupPath + "\\CashCls.xml";
                if (System.IO.File.Exists(filePath))
                {
                    StreamReader sdr = new StreamReader(filePath);
                    try
                    {
                        nRefundSCheme = Convert.ToInt32(sdr.ReadLine());
                    }
                    catch { }

                }

                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;

                try
                {


                    optAllUser = saveCashclosing.cashAlluser;
                    if (Convert.ToInt32(optAllUser) == 1)
                    {
                        optAllUser = true;
                    }
                    else
                    {
                        optAllUser = false;
                    }
                }
                catch
                {

                }



                txtColl1 = "";
                txtColl2 = "";
                txtPayments = "";
                txtTotal = "";

                double Coll1 = 0;
                double Coll2 = 0;
                double PendColl = 0;
                double Payments = 0;

                double TotalAmt = 0;

                string CollQuery = "";
                string PendQuery = "";
                string PaymQuery = "";
                string RecQuery = "";

                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataTable dt = new DataTable();

                if (optAllUser == true)
                {

                    if (nRefundSCheme > 0)
                    {
                        PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_Id!=" + nRefundSCheme + " AND vchr_CpyId=" + CompanyId + "" + Environment.NewLine
                                   + " UNION " + Environment.NewLine
                                   + " SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment'  AND vchr_Id=" + nRefundSCheme + " AND vchr_CpyId=" + CompanyId + "";
                    }
                    else
                    {
                        PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "";
                    }



                }
                else
                {


                    if (nRefundSCheme > 0)
                    {
                        PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "   AND vchr_Id!=" + nRefundSCheme + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "" + Environment.NewLine
                                    + " UNION " + Environment.NewLine
                                   + " SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment'  AND vchr_CpyId=" + CompanyId + "   AND vchr_Id=" + nRefundSCheme + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "";

                    }
                    else
                    {
                        PaymQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Payment,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Payment' AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND ISNULL(vchr_UsrId,0)>0 AND  vchr_UsrId=" + UserId + "";
                    }

                }

                DataTable dt2 = new DataTable();
                dt.Reset();
                cmd = new SqlCommand(PaymQuery, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt2);
                string vchr_TransNo = ""; ;
                string AccountName = "";
                string vchr_UsrId = "";
                double vchr_Payment = 0;
                double TempRow = 0;
                double TempColl = 0;

                if (dt2.Rows.Count > 0)
                {


                    foreach (DataRow dr in dt2.Rows)
                    {
                        vchr_TransNo = dr["vchr_TransNo"].ToString();
                        AccountName = dr["AccountName"].ToString();
                        vchr_UsrId = dr["vchr_UsrId"].ToString();
                        vchr_Payment = Convert.ToDouble(dr["vchr_Payment"].ToString());


                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["vchr_Payment"]);
                        }
                        catch { }
                        //Payments = Payments + TempColl;

                        CashClosing gepayment = new CashClosing()
                        {
                            vchr_TransNo = vchr_TransNo,
                            AccountName = AccountName,

                            vchr_UsrId = vchr_UsrId,
                            vchr_Payment = vchr_Payment,
                            //Payments= Payments
                        };
                        TempData["mydata"] = gepayment;
                        GETCASHCLOSING.Add(gepayment);

                    }


                }

                var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;


            }
            catch { }
            return Json(JsonRequestBehavior.AllowGet);
        }

        public JsonResult DISPLAYCASHRECEPIT(CashClosing saveCashclosing)
        {
            CashClosing data = TempData["mydata"] as CashClosing;
            string nId = "";
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                string txtLoginedUser = "";
                string txtColl1 = "";
                string txtColl2 = "";
                string txtPayments = "";
                string txtTotal = "";
                int nRefundSCheme = 0;
                DateTime StartDate = DateTime.Now;
                bool optAllUser = false;
                double CompanyId = (double)l.BrMst_Key;
                double YearId = (double)l.Yr_Id;
                int UserId = l.Usr_EmpId;



                List<CashClosing> GETCASHCLOSING = new List<CashClosing>();
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;

                try
                {


                    optAllUser = saveCashclosing.cashAlluser;
                    if (Convert.ToInt32(optAllUser) == 1)
                    {
                        optAllUser = true;
                    }
                    else
                    {
                        optAllUser = false;
                    }
                }
                catch
                {

                }



                txtColl1 = "";
                txtColl2 = "";
                txtPayments = "";
                txtTotal = "";

                double Coll1 = 0;
                double Coll2 = 0;
                double PendColl = 0;
                double Payments = 0;

                double TotalAmt = 0;

                string CollQuery = "";
                string PendQuery = "";
                string PaymQuery = "";
                string RecQuery = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataTable dt = new DataTable();

                if (optAllUser == true)
                {

                    RecQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Receipt,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashAllUsr,0)=0 AND vchr_TransType='Cash Receipts' AND vchr_Date>='" + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId=" + CompanyId + "";

                }
                else
                {

                    RecQuery = "SELECT Vch.vchr_TransNo,Vch.vchr_Receipt,Ahmst.AhMst_pName As AccountName,Vch.vchr_UsrId FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE ISNULL(vchr_CashUsr,0)=0 AND vchr_TransType='Cash Receipts' AND vchr_Date>='" + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId=" + CompanyId + " AND ISNULL(vchr_UsrId,0)>0 AND vchr_UsrId=" + UserId + "";

                }

                DataTable dt3 = new DataTable();
                //dt.Reset();
                cmd = new SqlCommand(RecQuery, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt3);
                string vchr_Receipt = "";
                double TempRow = 0;
                double TempColl = 0;
                string vchr_TransNo = "";
                string AccountName = "";
                string vchr_UsrId = "";

                if (dt3.Rows.Count > 0)
                {


                    foreach (DataRow dr in dt3.Rows)
                    {
                        vchr_TransNo = dr["vchr_TransNo"].ToString();
                        AccountName = dr["AccountName"].ToString();
                        vchr_Receipt = dr["vchr_Receipt"].ToString();
                        vchr_UsrId = dr["vchr_UsrId"].ToString();

                        TempColl = 0;
                        try
                        {
                            TempColl = Convert.ToDouble(dr["vchr_Receipt"]);
                        }
                        catch { }
                        //Coll2 = Coll2 + TempColl;

                        CashClosing getrecepit = new CashClosing()
                        {
                            vchr_recpno = vchr_TransNo,
                            AccountNamerecp = AccountName,
                            vchr_Receipt = vchr_Receipt,
                            vchr_UsrIdrecp = vchr_UsrId,


                        };
                        TempData["mydata"] = getrecepit;
                        GETCASHCLOSING.Add(getrecepit);
                    }
                }


                var jsonResult = Json(GETCASHCLOSING, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;


            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }








//***********************DISPLAY-PENDING-COLLECTION **********************************

        public JsonResult DISPLAYPENDINING(string pndlabno)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<PENDINGCOLLECTION> GETPENDING = new List<PENDINGCOLLECTION>();
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            string txtLabNo = "";
            string txtPrefix = "";
            string txtName = "";
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtGender = "";
            string txtPhone = "";
            string txtEmail = "";
            string txtNote = "";
            string txtInvAmt = "";
            string txtCurBalance = "";
            string pndc_date = "";
            double txtCollAmt = 0;
            double PndC_Amount = 0;
            DateTime dtpDate = DateTime.Now;
            int nInvNo = 0, nRow = 0;
            string PndC_TimeSmp = "";
            string PndC_YrId = "";
            int agedd = 0, agemm = 0, ageyy = 0;


            try
            {
                try
                {
                    nInvNo = Convert.ToInt32(pndlabno);
                }
                catch { }

                if (nInvNo < 0) { }

                SqlCommand sqlcmd0 = new SqlCommand();
                sqlcmd0.Connection = sqlcon;
                sqlcmd0.CommandType = CommandType.Text;
                sqlcmd0.CommandText = "SELECT ISNULL(A.Inv_No, 0) Inv_No,ISNULL(A.Inv_YrId, 0) Inv_YrId,ISNULL(A.Inv_CpyId, 0) Inv_CpyId,ISNULL(A.Inv_Tittle, '') Inv_Tittle,ISNULL(A.Inv_name, '') Inv_name,ISNULL(A.Inv_Gender, '') Inv_Gender,ISNULL(A.Inv_ageDD, 0) Inv_ageDD,ISNULL(A.Inv_ageMM, 0) Inv_ageMM,ISNULL(A.Inv_ageYY, 0) Inv_ageYY, ISNULL(A.Inv_phno, '') Inv_phno,ISNULL(A.Inv_date, '') inv_date,ISNULL(A.Inv_Email, '') Inv_Email,ISNULL(A.Inv_Comment, '') Inv_Comment,ISNULL(A.Inv_CurRcvdAmt, 0) Inv_CurRcvdAmt,ISNULL(A.Inv_CurBalAmt, 0) Inv_CurBalAmt,ISNULL(A.Inv_GrosAmt, 0) Inv_GrosAmt,ISNULL(A.Inv_Netamt, 0) Inv_Netamt,ISNULL(A.Invl_IsPending, 0) Invl_IsPending,ISNULL(A.Inv_Status, 0) Inv_Status,ISNULL(B.PndC_Labno, 0) PndC_Labno,B.PndC_Date," + Environment.NewLine
                                      + "ISNULL(B.PndC_Amount, 0) PndC_Amount,ISNULL(B.PndC_TimeSmp, '') PndC_TimeSmp,ISNULL(B.PndC_Cancld, 0) PndC_Cancld,ISNULL(B.PndC_UsrId, 0) PndC_UsrId,ISNULL(B.PndC_YrId, 0) PndC_YrId,ISNULL(B.PndC_CpyId, 0) PndC_CpyId,ISNULL(B.PndC_Updtd, 0) PndC_Updtd,ISNULL(C.Usr_Name, '') Usr_Name" + Environment.NewLine
                                     + "FROM dbo.Invoice_Mst A WITH(NOLOCK) LEFT JOIN dbo.PendingCollections B WITH(NOLOCK) ON B.PndC_Labno = A.Inv_No AND B.PndC_YrId = A.Inv_YrId AND B.PndC_CpyId = A.Inv_CpyId LEFT JOIN dbo.Users C WITH(NOLOCK) ON C.Usr_key = B.PndC_UsrId" + Environment.NewLine
                                     + "WHERE A.Invl_IsPending = 1 AND A.Inv_Status <> -1 AND A.Inv_No =" + nInvNo + " AND A.Inv_CpyId =" + CompanyId + " AND A.Inv_PayMode = 'Cash'";
                //BO.LabRegistration _Obj = DA.LabRegistration.GET_PENDINGCOLLECTION(nInvNo, cPublic.YearId, cPublic.CompanyId);
                SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
                DataTable dt0 = new DataTable();
                sd0.Fill(dt0);
                //BO.LabRegistration _ObjLabRegMaster = DA.LabRegistration.GET_INVOICE_MST(nInvNo, cPublic.YearId, cPublic.CompanyId);
                txtLabNo = dt0.Rows[0]["Inv_No"].ToString();


                //**********************************

                if (Convert.ToInt32(txtLabNo) != 0)
                {
                    SqlCommand cmdS = new SqlCommand("SELECT COUNT(PndC_Labno) FROM PendingCollections WHERE PndC_Labno=" + nInvNo + " AND PndC_YrId=" + YearId + " AND PndC_CpyId=" + CompanyId + " AND PndC_Cancld<>1", sqlcon);
                    SqlDataAdapter sda = new SqlDataAdapter(cmdS);
                    DataTable dt = new DataTable();
                    sda.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {

                        SqlCommand sqlcmd01 = new SqlCommand();
                        sqlcmd0.Connection = sqlcon;
                        sqlcmd0.CommandType = CommandType.Text;
                        sqlcmd0.CommandText = "SELECT ISNULL(A.Inv_No, 0) Inv_No,ISNULL(A.Inv_YrId, 0) Inv_YrId,ISNULL(A.Inv_CpyId, 0) Inv_CpyId,ISNULL(A.Inv_Tittle, '') Inv_Tittle,ISNULL(A.Inv_name, '') Inv_name," + Environment.NewLine
                  + "ISNULL(A.Inv_Gender, '') Inv_Gender,ISNULL(A.Inv_ageDD, 0) Inv_ageDD,ISNULL(A.Inv_ageMM, 0) Inv_ageMM,ISNULL(A.Inv_ageYY, 0) Inv_ageYY,ISNULL(A.Inv_phno, '') Inv_phno,ISNULL(A.Inv_Email, '') Inv_Email,ISNULL(A.Inv_Comment, '') Inv_Comment," + Environment.NewLine
         + "ISNULL(A.Inv_CurRcvdAmt, 0) Inv_CurRcvdAmt,ISNULL(A.Inv_CurBalAmt, 0) Inv_CurBalAmt,ISNULL(A.Inv_GrosAmt, 0) Inv_GrosAmt,ISNULL(A.Inv_Netamt, 0) Inv_Netamt,ISNULL(A.Invl_IsPending, 0) Invl_IsPending,ISNULL(A.Inv_Status, 0) Inv_Status," + Environment.NewLine
            + "ISNULL(B.PndC_Labno, 0) PndC_Labno,B.PndC_Date,ISNULL(B.PndC_Amount, 0) PndC_Amount,ISNULL(B.PndC_TimeSmp, '') PndC_TimeSmp,ISNULL(B.PndC_Cancld, 0) PndC_Cancld,ISNULL(B.PndC_UsrId, 0) PndC_UsrId,ISNULL(B.PndC_YrId, 0) PndC_YrId,ISNULL(B.PndC_CpyId, 0) PndC_CpyId," + Environment.NewLine
             + "ISNULL(B.PndC_Updtd, 0) PndC_Updtd,ISNULL(C.Usr_Name, '') Usr_Name FROM dbo.Invoice_Mst A WITH(NOLOCK) LEFT JOIN dbo.PendingCollections B  WITH(NOLOCK) ON B.PndC_Labno = A.Inv_No AND B.PndC_YrId = A.Inv_YrId AND B.PndC_CpyId = A.Inv_CpyId" + Environment.NewLine
                + "LEFT JOIN dbo.Users C  WITH(NOLOCK) ON C.Usr_key = B.PndC_UsrId WHERE A.Inv_Status <> -1 AND A.Inv_No =" + nInvNo + "  AND A.Inv_CpyId =" + CompanyId + "  AND A.Inv_YrId =" + YearId + " AND A.Inv_PayMode = 'Cash'";

                        SqlDataAdapter sd01 = new SqlDataAdapter(sqlcmd0);
                        DataTable dt01 = new DataTable();
                        sd01.Fill(dt01);

                        txtLabNo = dt01.Rows[0]["Inv_No"].ToString();



                        //**********************************
                        if (Convert.ToInt32(txtLabNo) > 0)
                        {
                            try
                            {
                                dtpDate = Convert.ToDateTime(dt0.Rows[0]["Inv_Date"].ToString());
                            }
                            catch (Exception ex)
                            {
                                var x = ex.Message;
                                var y = ex.InnerException;
                            }

                            txtPrefix = dt0.Rows[0]["Inv_Tittle"].ToString();
                            txtName = dt0.Rows[0]["Inv_name"].ToString();
                            txtGender = dt0.Rows[0]["Inv_Gender"].ToString().Trim() == "M" ? "Male" : "Female";

                            agedd = Convert.ToInt32(dt0.Rows[0]["Inv_ageDD"].ToString());
                            agemm = Convert.ToInt32(dt0.Rows[0]["Inv_ageMM"].ToString());
                            agemm = Convert.ToInt32(dt0.Rows[0]["Inv_ageYY"].ToString());

                            txtPhone = dt0.Rows[0]["Inv_phno"].ToString();
                            txtEmail = dt0.Rows[0]["Inv_Email"].ToString();
                            txtNote = dt0.Rows[0]["Inv_Comment"].ToString();
                            txtInvAmt = dt0.Rows[0]["Inv_Netamt"].ToString();
                            txtCurBalance = dt0.Rows[0]["Inv_CurBalAmt"].ToString();
                            double invamt = Convert.ToInt32(dt0.Rows[0]["Inv_Netamt"].ToString());
                            int invcurbal = Convert.ToInt32(dt0.Rows[0]["Inv_CurBalAmt"].ToString());
                            //invcurbal = (+invcurbal);
                            txtCollAmt = Convert.ToInt32(invamt) - Convert.ToInt32(invcurbal * -1);


                        }
                        if (dt01.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt01.Rows)
                            {
                                pndc_date = dr["PndC_Date"].ToString();
                                PndC_Amount = Convert.ToDouble(dr["PndC_Amount"].ToString());
                                PndC_TimeSmp = dr["PndC_TimeSmp"].ToString();
                                PndC_YrId = dr["PndC_YrId"].ToString();

                                PENDINGCOLLECTION getpndlist = new PENDINGCOLLECTION()

                                {
                                    pendlabno = Convert.ToInt32(txtLabNo),

                                    pnddatetime = Convert.ToString(dtpDate),
                                    pndprifix = txtPrefix,
                                    pndname = txtName,
                                    pndgender = txtGender,
                                    pndphono = txtPhone,
                                    pndemail = txtEmail,
                                    pndcurbalance = txtCurBalance,
                                    pndamt = txtInvAmt,
                                    pndcollamt = Convert.ToString(txtCollAmt),
                                    pndc_date = pndc_date,
                                    PndC_Amount = PndC_Amount,
                                    PndC_TimeSmp = PndC_TimeSmp,
                                    PndC_YrId = PndC_YrId,
                                    agedd = agedd,
                                    agemm = agemm,
                                    ageyy = ageyy




                                };
                                GETPENDING.Add(getpndlist);
                            }


                        }
                        return Json(GETPENDING, JsonRequestBehavior.AllowGet);
                    }
                }
            }





            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }




            return Json(JsonRequestBehavior.AllowGet);
        }

//*************************END-DISPLAY-PENDINGCOLLECTION***************************************************





        public JsonResult PRINTPENDINGCOLLTION(string corpid, string pndcorptxt, int chkcorp, string pndfromdate, string pndtodate)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<PENDINGCOLLECTION> getdate = new List<PENDINGCOLLECTION>();
            int txtCorpid = 0;
            string txtCorp = "";
            bool chkCorp = false;
            double CompanyId = 2;
            string FilePath = "";
            string NfileName = "";



            DateTime dtpTo1 = DateTime.Now;
            DateTime dtpFrom1 = DateTime.Now;
            DateTime datefrom = DateTime.ParseExact(pndfromdate, "dd/MM/yyyy", null);
            DateTime dateto = DateTime.ParseExact(pndtodate, "dd/MM/yyyy", null);

            dtpFrom1 = datefrom;
            dtpTo1 = dateto;
            pndfrm = datefrom.ToString("ddMMyyyyhhmm");
            pndto = dateto.ToString("ddMMyyyyhhmm");
            var dtpFrom = dtpFrom1.ToString("yyyy-MM-dd");
            var dtpTo = dtpTo1.ToString("yyyy-MM-dd");

            PENDINGCOLLECTION getpnddate = new PENDINGCOLLECTION()

            {
                pndfrm = pndfrm,
                pndto = pndto
            };
            TempData["mydata"] = getpnddate;

            getdate.Add(getpnddate);

            try
            {
                txtCorpid = Convert.ToInt32(corpid);
                txtCorp = pndcorptxt;

                //chkcorp =chkcorp;
                if (chkcorp == 1)
                {
                    chkCorp = true;
                }
                else
                {
                    chkCorp = false;
                }
            }
            catch
            {

            }


            int CorpId = 0;
            try
            {
                CorpId = Convert.ToInt32(txtCorp);
            }
            catch { }
            try
            {
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;
                if (chkCorp == false)
                {

                    sqlCmd.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                          + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 AND Invl_IsPending = 1 AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                }
                else
                {
                    if (CorpId == 0)
                    {
                        sqlCmd.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                        + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 AND Invl_IsPending = 1 AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' AND Inv_InsId>0 ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                    }
                    else
                    {
                        sqlCmd.CommandText = "SELECT ''AS SlNo,Inv_No,Inv_Date,Inv_name,Inv_CurBalAmt, Inv_User, Inv_YrId, Inv_CpyId,Ahmst.AhMst_pName as Corporate  " + Environment.NewLine
                                                                + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT JOIN AccountHeads_Mst Ahmst ON dbo.Invoice_Mst.Inv_InsId=Ahmst.AhMst_Key WHERE Inv_PayMode='Cash' AND Inv_CpyId=" + CompanyId + " AND Inv_Status <> -1 AND Invl_IsPending = 1 AND Inv_Date >= '" + dtpFrom + "' AND Inv_Date <= '" + dtpTo + "' AND Inv_InsId=" + CorpId + " ORDER BY Inv_YrId DESC, Inv_Date DESC,Inv_No DESC";

                    }
                }

                // string cb = "SELECT SUM(ISNULL(InvItm_rate,0)) as NetAmount,Mst.Mstr_Desc  As Division ,Mst1.Mstr_Desc As Department  FROM Invoice_Det Invdet Left join Invoice_Mst Inv On Invdet.InvItm_Invno=Inv.Inv_No  Left Join Test_Mst Tst On Invdet.InvItm_TstId=Tst.TstMst_Key Left Join Masters Mst On Tst.TstMst_DivsnId=Mst.Mstr_Key Left Join Masters Mst1 On Tst.TstMst_DeptId=Mst1.Mstr_Key WHERE Inv_Date='" + dtpfrmDate.Value.ToShortDateString() + "' AND InvItm_YrId=" + cPublic.YearId + " AND InvItm_CpyId=" + cPublic.CompanyId + " Group By Mst.Mstr_Desc,Mst1.Mstr_Desc ";
                SqlDataAdapter sd0 = new SqlDataAdapter(sqlCmd);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "PendingColl");
                ////****************************************************
                sqlCmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(sqlCmd);
                sd0.Fill(ds0, "[dbo].[Company_Mst]");
                //****************************************************
                string filepath = "";

                string Head2 = dtpFrom + " TO " + dtpTo;
                DataTable dt = new DataTable();
                dt.Reset();

                dt.Columns.Add("DateInterval", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;


                ds0.Tables.Add(dt);

                NfileName += pndfrm + "_" + pndto + "_" + "_PendingReport";
                string Reportfilepaths = Server.MapPath("~/Reports/");
                ReportDocument reportDocument = new ReportDocument();
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PendingReport.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_PendingReport.xsd");

                try
                {
                    reportDocument.Load(filepath);

                    reportDocument.SetDataSource(ds0);


                    //Exporting Result Report into .pdf format--------------
                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";

                    try
                    {

                        //if (nflaghead == 0)
                        //{

                        NfileName = NfileName + ".pdf";
                        pdfFile = pdfFilepath + NfileName;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;
                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                        CrExportOptions.FormatOptions = CrFormatTypeOptions;
                        reportDocument.Export();


                    }
                    catch (Exception exe)
                    {
                        var x = exe.Message;
                        var y = exe.InnerException;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                }
                catch (Exception exe)
                {

                }
            }
            catch (Exception exe)
            {

            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        public FileResult GetPDFPending()
        {
            PENDINGCOLLECTION data = TempData["mydata"] as PENDINGCOLLECTION;

            string dtpTo = "";

            string dtpFrom = data.pndfrm;
            dtpTo = data.pndto;





            string fileName = "";
            fileName += dtpFrom + "_" + dtpTo + "_" + "_PendingReport";
            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");
        }
        public JsonResult CASHCLOSINGPRINT(string printclosing, string cashclosingdate, string cashtime, string txtid)
        {
            List<CashClosing> getdate = new List<CashClosing>();
            logindetails l = Session["logindls"] as logindetails;
            CashClosing data = TempData["mydata"] as CashClosing;
            string txtId = txtid;
            int NewCashCloseKey = 0;
            bool chkPrintAll = false;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            SqlCommand cmd0;
            SqlDataAdapter sd0;
            DataSet ds0;
            string pndfrm = "";
            int CAshCloseKey = 0;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            //DateTime dtpDate = DateTime.Now;
            string dtpDate = cashclosingdate;


            CashClosing getpnddate = new CashClosing()

            {
                cashclosingdate = dtpDate
            };
            TempData["mydata"] = getpnddate;

            getdate.Add(getpnddate);

            try
            {

                CAshCloseKey = Convert.ToInt32(txtId);
            }
            catch { CAshCloseKey = 0; }
            if (CAshCloseKey == 0)
            {
                CAshCloseKey = NewCashCloseKey;
            }
            if (chkPrintAll == false)
            {
                cmd0 = new SqlCommand("select * from CashClosing_Mst WITH (NOLOCK) where Ccl_Key=" + CAshCloseKey + " and Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "", sqlcon);
            }
            else
            {
                cmd0 = new SqlCommand("select * from CashClosing_Mst WITH (NOLOCK) where  convert(Date,Ccl_Date,0)='" + dtpDate + "' and Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "", sqlcon);

            }
            string a = "select * from CashClosing_Mst WITH (NOLOCK) where Ccl_Date='" + dtpDate + "' and Ccl_YrId=" + YearId + " and Ccl_CpyId=" + CompanyId + "";

            sd0 = new SqlDataAdapter(cmd0);
            ds0 = new DataSet();
            sd0.Fill(ds0, "CasClosing_Mst");
            //****************************************************
            cmd0.CommandText = "SELECT CashCls.*,Ahmst.AhMst_pName as UserName FROM CashClosing_UserWise CashCls LEFT JOIN  AccountHeads_Mst Ahmst ON CashCls.UsrCash_InvUserId=Ahmst.AhMst_Key Where UsrCash_CclKey=" + CAshCloseKey + " and UsrCash_YrId=" + YearId + " and UsrCash_CpyId=" + CompanyId + "";
            sd0 = new SqlDataAdapter(cmd0);
            sd0.Fill(ds0, "CashCloseUserWise");
            //*****************************************************
            cmd0.CommandText = "SELECT * FROM [dbo].[Company_Mst] WITH (NOLOCK)";
            sd0 = new SqlDataAdapter(cmd0);
            sd0.Fill(ds0, "Company_Mst");
            //****************************************************

            string filepath = "";
            string NfileName = "";

            NfileName += "_" + "_CashClosingReport";
            //NfileName += pndfrm + "_" + pndto + "_" + "_PendingReport";
            string Reportfilepaths = Server.MapPath("~/Reports/");
            ReportDocument reportDocument = new ReportDocument();
            filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CashClosing.rpt");
            ds0.WriteXmlSchema(Reportfilepaths + "rpt_CashClosing.xsd");



            try
            {
                reportDocument.Load(filepath);

                reportDocument.SetDataSource(ds0);
                //Exporting Result Report into .pdf format--------------
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";

                try
                {



                    NfileName = NfileName + ".pdf";
                    pdfFile = pdfFilepath + NfileName;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();


                }



                catch { }


                return Json(new { Result = "OK" });


            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        public FileResult GetPDFCashClosing()
        {
            //try {
            CashClosing data = TempData["mydata"] as CashClosing;


            string dtpTo = "";
            dtpTo = data.cashclosingdate;

            string fileName = "";
            fileName += "_" + "_CashClosingReport";
            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult BILLWISEPRINT(string currentdate, string corpid, string txtName)
        {
            List<BillWiseCollectionArea> getdate = new List<BillWiseCollectionArea>();
            logindetails l = Session["logindls"] as logindetails;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            int CorpId = 0;

            DateTime dtpDate = DateTime.ParseExact(currentdate, "dd/MM/yyyy", null);
            BillWiseCollectionArea getbilldate = new BillWiseCollectionArea()

            {
                dtpDate = Convert.ToString(dtpDate)
            };
            TempData["mydata"] = getbilldate;

            getdate.Add(getbilldate);

            string txtNameid = corpid;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);
            }
            catch { }
            if (CorpId > 0)
            {

                SqlCommand cmd0 = new SqlCommand("SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt,Inv_CurRcvdAmt FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + CorpId + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "  ORDER BY Inv_No ", sqlcon);
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);



                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "Invoice_Mst");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");

                cmd0.CommandText = "SELECT InvDet.*,Tst.TstMst_name FROM Invoice_Mst Inv LEFT JOIN Invoice_Det InvDet ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key WHERE  Inv_PayMode='Credit' AND Inv_InsId=" + CorpId + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "  ORDER BY Inv_No ";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Invoice_det");
                //ReportDocument reportDocument = new ReportDocument();

                string Head2 = "Up To : " + dtpDate.ToString("dd-MMM-yyyy");
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");


                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("CorpName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["CorpName"] = txtName;
                ds0.Tables.Add(dt);

                string filepath = "";
                string NfileName = "";

                NfileName += "_" + "_rpt_BillWiseColl";
                //NfileName += pndfrm + "_" + pndto + "_" + "_PendingReport";
                string Reportfilepaths = Server.MapPath("~/Reports/");
                ReportDocument reportDocument = new ReportDocument();
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BillWiseColl.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_BillWiseColl.xsd");


                try
                {
                    reportDocument.Load(filepath);

                    reportDocument.SetDataSource(ds0);
                    //Exporting Result Report into .pdf format--------------
                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";

                    try
                    {


                        NfileName = NfileName + ".pdf";
                        pdfFile = pdfFilepath + NfileName;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;
                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                        CrExportOptions.FormatOptions = CrFormatTypeOptions;
                        reportDocument.Export();


                    }



                    catch { }

                    return Json(new { Result = "OK" });


                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
                return Json(JsonRequestBehavior.AllowGet);
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        public FileResult GetPDFbillwise()
        {


            BillWiseCollectionArea data = TempData["mydata"] as BillWiseCollectionArea;

            string dtpTo = "";
            dtpTo = data.dtpDate;

            string fileName = "";
            fileName += "_" + "_rpt_BillWiseColl";
            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }






        public JsonResult DISPLAYREPORTDISPATCHTABLE(string reportlabno, string ServerSelect)
        {
            List<ReportDispatch> getreport = new List<ReportDispatch>();
            try
            {

                logindetails l = Session["logindls"] as logindetails;
                string txtLabNo = "";
                int txtLabNoid = 0;
                txtLabNo = reportlabno;
                int cmbServer = 0;
                int Flag = 0;



                cmbServer = Convert.ToInt32(ServerSelect);

                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;


                txtLabNoid = Convert.ToInt32(reportlabno);
                SqlConnection sqlcon = new SqlConnection();

                sqlcon = con.dbcon();
                sqlcon.Open();
                string Query = "";
                string Query1 = "";

                if (cmbServer == 0)
                {


                    Query1 = "Select RptDis_Dispmode,RptDis_Userinfo,RptDis_Note,RptDis_Key,RptDis_Person from CARE011112.dbo.Report_Dispatching WITH (NOLOCK) Where RptDis_LabNo=" + txtLabNo + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + "";
                }
                else if (cmbServer == 1)
                {


                    Query1 = "Select RptDis_Dispmode,RptDis_Userinfo,RptDis_Note,RptDis_Key,RptDis_Person from CARE021112.dbo.Report_Dispatching WITH (NOLOCK) Where RptDis_LabNo=" + txtLabNo + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + "";
                }

                SqlCommand cmd1 = new SqlCommand(Query1, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd1);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                string RptDis_Dispmode = "";
                string RptDis_Userinfo = "";
                string txtNote = "";
                int txtEnrtyNo = 0;
                string RptDis_Person = "";
                cmd1.ExecuteNonQuery();
                if (dt.Rows.Count > 0)
                {

                    foreach (DataRow dr1 in dt.Rows)
                    {

                        RptDis_Dispmode = dr1["RptDis_Dispmode"].ToString();
                        RptDis_Userinfo = dr1["RptDis_Userinfo"].ToString();

                        txtNote = dr1["RptDis_Note"].ToString();
                        txtEnrtyNo = Convert.ToInt32(dr1["RptDis_Key"].ToString());
                        RptDis_Person = dr1["RptDis_Person"].ToString();
                        ReportDispatch getreportdispatch = new ReportDispatch()
                        {

                            RptDis_Dispmode = RptDis_Dispmode,
                            RptDis_Userinfo = RptDis_Userinfo,
                            RptDis_Person = RptDis_Person,
                            Note = txtNote,
                            ReportdisEntryNo = txtEnrtyNo
                        };
                        getreport.Add(getreportdispatch);


                    }


                }
                return Json(getreport, JsonRequestBehavior.AllowGet);



            }
            catch { }
            return Json(JsonRequestBehavior.AllowGet);
        }


//***********************DISPLAY-REPORT-DISPATCH******************************
        public JsonResult DISPLAYREPORTDISPATCH(string reportlabno, string ServerSelect)
        {
            List<ReportDispatch> getreport = new List<ReportDispatch>();
            try
            {

                logindetails l = Session["logindls"] as logindetails;
                string txtLabNo = "";
                int txtLabNoid = 0;
                txtLabNo = reportlabno;
                int cmbServer = 0;
                int Flag = 0;
                string txtPatientName = "";
                string dtpDate = "";
                string dtpSampleOn = "";
                string dtpRportOn = "";
                string txtTime = "";
                string txtAge = "";
                string txtAgeMM = "";
                string txtAgeYY = "";
                string Gender = "";
                string txtGender = "";
                string txtIpOp = "";
                string txtRefBy = "";
                string Paymode = "";
                int Ispending = 0;
                string txtBranchName = "";
                string ThrPersonal = "";
                string ThrCourier = "";
                string ThrPhone = "";
                string ThrEmail = "";
                string txtEmail = "";
                string TxtRepMode = "";
                string txtRegNote = "";
                bool chkPersonally = false;
                bool chkCourier = false;
                bool chkTelephone = false;
                bool chkEmail = false;
                string txtPendAmt = "";
                int Inv_Status = 0;
                string txtSms = "";
                bool chksms = false;



                cmbServer = Convert.ToInt32(ServerSelect);

                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;

                txtLabNoid = Convert.ToInt32(reportlabno);
                SqlConnection sqlcon = new SqlConnection();

                sqlcon = con.dbcon();
                sqlcon.Open();
                string Query = "";
                string Query1 = "";

                if (cmbServer == 0)
                {

                    Query = " Select Inv.Inv_No,inv.Inv_RepThrPersonal,Inv.Inv_RepThrCourier,Inv.Inv_RptMode,Inv.Inv_Comment,Inv.Inv_Email,Inv.Inv_RepThrPhone,Inv.Inv_RepThrEmail,Inv.Inv_RepThrSms,Inv.Inv_CurBalAmt,Inv.Inv_PayMode,Inv.Inv_Status,Inv.Invl_IsPending,Inv.Inv_RsltNO,Inv.Inv_Tittle,Inv.Inv_name,Inv.Inv_Gender,Inv.Inv_ageDD,Inv.Inv_ageMM,Inv.Inv_ageYY,Inv.Inv_Date,Inv.Inv_time,Inv.Inv_DrId,Inv.Inv_SmplDate,Inv.Inv_RepTime,Ag.AhMst_pName,Br.BrMst_Name from CARE021112.dbo.Invoice_Mst Inv WITH (NOLOCK)  left join  CARE011112.dbo.AccountHeads_Mst Ag WITH (NOLOCK) ON Inv.Inv_DrId=Ag.AhMst_Key left join CARE011112.dbo.Baranches_Mst Br WITH (NOLOCK) ON Inv.Inv_BrID=Br.BrMst_Key  Where Inv_No=" + txtLabNo + " And Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + "";

                }
                else if (cmbServer == 1)
                {

                    Query = "  Select Inv.Inv_No,inv.Inv_RepThrPersonal,Inv.Inv_RepThrCourier,Inv.Inv_RptMode,Inv.Inv_Comment,Inv.Inv_Email,Inv.Inv_RepThrPhone,Inv.Inv_RepThrEmail,Inv.Inv_RepThrSms,Inv.Inv_CurBalAmt,Inv.Inv_PayMode,Inv.Inv_Status,Inv.Invl_IsPending,Inv.Inv_RsltNO,Inv.Inv_Tittle,Inv.Inv_name,Inv.Inv_Gender,Inv.Inv_ageDD,Inv.Inv_ageMM,Inv.Inv_ageYY,Inv.Inv_Date,Inv.Inv_time,Inv.Inv_DrId,Inv.Inv_SmplDate,Inv.Inv_RepTime,Ag.AhMst_pName,Br.BrMst_Name from CARE021112.dbo.Invoice_Mst Inv WITH (NOLOCK)  left join  CARE021112.dbo.AccountHeads_Mst Ag WITH (NOLOCK) ON Inv.Inv_DrId=Ag.AhMst_Key left join CARE021112.dbo.Baranches_Mst Br WITH (NOLOCK) ON Inv.Inv_BrID=Br.BrMst_Key  Where Inv_No=" + txtLabNo + " And Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + "";

                }
                SqlCommand cmd = new SqlCommand(Query, sqlcon);


                SqlDataReader dr;
                dr = cmd.ExecuteReader();


                while (dr.Read())
                {
                    Flag = 1;
                    txtPatientName = dr["Inv_name"].ToString();
                    dtpDate = dr["Inv_Date"].ToString();
                    Inv_Status = Convert.ToInt32(dr["Inv_Status"].ToString());
                    dtpSampleOn = dr["Inv_SmplDate"].ToString();
                    dtpRportOn = dr["Inv_RepTime"].ToString();
                    txtTime = dr["Inv_time"].ToString();
                    txtAge = dr["Inv_ageDD"].ToString();
                    txtAgeMM = dr["Inv_ageMM"].ToString();
                    txtAgeYY = dr["Inv_ageYY"].ToString();
                    Gender = dr["Inv_Gender"].ToString();
                    if (Gender == "M")
                    {
                        txtGender = "Male";
                    }
                    else
                    {
                        txtGender = "Female";
                    }
                    txtIpOp = dr["Inv_RsltNO"].ToString();
                    txtRefBy = dr["AhMst_pName"].ToString();
                    Paymode = dr["Inv_PayMode"].ToString();
                    Ispending = Convert.ToInt32(dr["Invl_IsPending"].ToString());
                    txtBranchName = dr["BrMst_Name"].ToString();
                    ThrPersonal = dr["Inv_RepThrPersonal"].ToString();
                    ThrCourier = dr["Inv_RepThrCourier"].ToString();
                    ThrPhone = dr["Inv_RepThrPhone"].ToString();
                    ThrEmail = dr["Inv_RepThrEmail"].ToString();
                    txtEmail = dr["Inv_Email"].ToString();
                    txtSms = dr["Inv_RepThrSms"].ToString();
                    TxtRepMode = dr["Inv_RptMode"].ToString();
                    txtRegNote = dr["Inv_Comment"].ToString();
                    if (ThrPersonal == "True")
                    {
                        chkPersonally = true;

                    }
                    else
                    {
                        chkPersonally = false;

                    }
                    if (ThrCourier == "True")
                    {
                        chkCourier = true;

                    }
                    else
                    {
                        chkCourier = false;

                    }
                    if (ThrPhone == "True")
                    {
                        chkTelephone = true;

                    }
                    else
                    {
                        chkTelephone = false;

                    }
                    if (ThrEmail == "True")
                    {
                        chkEmail = true;

                    }
                    else
                    {
                        chkEmail = false;

                    }
                    if (txtSms == "True")
                    {
                        chksms = true;

                    }
                    else
                    {
                        chksms = false;

                    }



                    if (Paymode == "Cash" && Ispending == 1)
                    {

                        txtPendAmt = dr["Inv_CurBalAmt"].ToString();
                    }


                }

                if (Flag == 0)
                {
                    dr.Close();
                    return Json(new { Result = "InvalidLabNo" });


                }



                try
                {
                    ReportDispatch getreportdispatch1 = new ReportDispatch()
                    {

                        ReportdisPname = txtPatientName,
                        ReportDisDate = dtpDate,
                        Sampleon = dtpSampleOn,
                        Reporton = dtpRportOn,
                        ReportDisTime = txtTime,
                        Inv_Status = Inv_Status,
                        AgeDD = txtAge,
                        AgeMM = txtAgeMM,
                        AgeYY = txtAgeYY,
                        ReportDisipop = txtIpOp,
                        reportPending = txtPendAmt,
                        RefBy = txtRefBy,
                        BranchName = txtBranchName,
                        chkPersonally = chkPersonally,
                        chkTelephone = chkCourier,
                        checkCourier = chkCourier,
                        chkEmail = chkEmail,
                        chksms = chksms,
                        ReportDisEmail = txtEmail,
                        RepMode = TxtRepMode,
                        RegNote = txtRegNote


                    };

                    getreport.Add(getreportdispatch1);
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }

                return Json(getreport, JsonRequestBehavior.AllowGet);
            }


            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }

            return Json(JsonRequestBehavior.AllowGet);
        }


        //***************************END-DISPLAY-REPORT-DISPATCH***************





//*********************DELETE-REPORT-DISPATCH****************************
        public JsonResult DELETEREPORTDISPATCH(string ReportDisLabno, string ServerSelect)
        {
            logindetails l = Session["logindls"] as logindetails;
            string txtLabNoid = ReportDisLabno;
            string cmbServer = ServerSelect;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlConnection sqlcon = new SqlConnection();

            sqlcon = con.dbcon();
            sqlcon.Open();
            try
            {
                int Labno = Convert.ToInt32(txtLabNoid);
                if (Labno == 0)
                {
                    return Json(new { Result = "Invalid LabNo" });

                }
                if (Convert.ToInt32(cmbServer) == 0)
                {

                    {

                        SqlCommand cmd1 = new SqlCommand("Delete from CARE011112.dbo.Report_Dispatching  Where RptDis_LabNo=" + txtLabNoid + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ", sqlcon);
                        cmd1.ExecuteNonQuery();

                    }
                }
                else
                {


                    SqlCommand cmd1 = new SqlCommand("Delete from CARE021112.dbo.Report_Dispatching  Where RptDis_LabNo=" + txtLabNoid + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ", sqlcon);
                    cmd1.ExecuteNonQuery();

                }
            }
            catch (Exception exe)
            {

            }

            return Json(JsonRequestBehavior.AllowGet);
        }

        //**********************END-DELETE-REPORT-DISPATCH*********************************



        public JsonResult NEWREPORTDISPATCH(string ServerSelect)
        {
            List<ReportDispatch> getreport = new List<ReportDispatch>();

            logindetails l = Session["logindls"] as logindetails;
            string cmbServer = ServerSelect;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int RepDisKey = 0;
            string query = "";
            SqlConnection sqlcon = new SqlConnection();

            sqlcon = con.dbcon();
            sqlcon.Open();
            if (Convert.ToInt32(cmbServer) == 0)
            {
                query = "SELECT ISNULL(MAX(RptDis_Key),0) FROM CARE011112.dbo.Report_Dispatching WITH (NOLOCK) Where RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ";
            }
            else
            {
                query = "SELECT ISNULL(MAX(RptDis_Key),0) FROM CARE021112.dbo.Report_Dispatching WITH (NOLOCK) Where RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ";
            }
            SqlCommand cmd = new SqlCommand(query, sqlcon);
            try
            {
                RepDisKey = Convert.ToInt32(cmd.ExecuteScalar());
            }


            catch (Exception ex)
            {
                var x = ex.InnerException;
                var y = ex.Message;
            }
            if (RepDisKey != 0)
            {
                RepDisKey += 1;
            }
            if (RepDisKey == 0)
            {
                RepDisKey = 1;
            }
            ReportDispatch getkey = new ReportDispatch()
            {


                ReportdisEntryNo = RepDisKey,



            };

            getreport.Add(getkey);





            return Json(getreport, JsonRequestBehavior.AllowGet);
        }




        public JsonResult DISPLAYUSERINFO()
        {
            List<ReportDispatch> getreport = new List<ReportDispatch>();

            logindetails l = Session["logindls"] as logindetails;
            string UserName = l.Usr_Name;
            string SysName = Environment.MachineName.ToString();
            string UserInfo = UserName + " " + DateTime.Now.ToString("dd-MM-yyyy hh:mm") + " Work Station:" + SysName;
            ReportDispatch getreportdispatch = new ReportDispatch()
            {


                RptDis_Userinfo = UserInfo,


                //txtEnrtyNo= txtEnrtyNo;
            };
            getreport.Add(getreportdispatch);

            return Json(getreport, JsonRequestBehavior.AllowGet);
        }





//***********************SAVE-REPORT-DISPATCH**********************************************

        public JsonResult SAVEREPORTDISPATCH(List<ReportDispatch> rpdispatch, string ReportdisEntryNo, string ReportDisLabno, string ServerSelect)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<ReportDispatch> getreport = new List<ReportDispatch>();

            int EntryNo = 0;
            int Labno = 0;
            int RowCount = 0;
            string txtEnrtyNoid = "";
            string txtLabNoid = "";

            string cmbServer = "";
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int userid = l.Usr_key;
            txtLabNoid = ReportDisLabno;
            txtEnrtyNoid = ReportdisEntryNo;
            cmbServer = ServerSelect;

            int EntryNo1 = 0;

            SqlConnection sqlcon = new SqlConnection();

            sqlcon = con.dbcon();
            sqlcon.Open();

            try
            {
                EntryNo = Convert.ToInt32(txtEnrtyNoid);
            }
            catch (Exception exe)
            {
                EntryNo = 0;
            }
            try
            {
                Labno = Convert.ToInt32(txtLabNoid);
            }
            catch (Exception exe)
            {
                Labno = 0;
            }
            if (EntryNo == 0)
            {
                return Json(new { Result = "Invalid EntryNo" });

            }
            if (Labno == 0)
            {
                return Json(new { Result = "Invalid LabNo" });

            }
            try
            {

                string Person = "";
                string ProcedureName = "";
                if (Convert.ToInt32(cmbServer) == 0)
                {
                    SqlCommand cmd1 = new SqlCommand("Delete from CARE011112.dbo.Report_Dispatching  Where RptDis_LabNo=" + txtLabNoid + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ", sqlcon);
                    cmd1.ExecuteNonQuery();
                    if (rpdispatch != null)
                    {
                        foreach (ReportDispatch rpdispatchin in rpdispatch)
                        {
                            Report_Dispatching rep = new Report_Dispatching();
                            rep.RptDis_Key = EntryNo;
                            rep.RptDis_LabNo = Labno;
                            rep.RptDis_Dispmode = rpdispatchin.RptDis_Dispmode;
                            rep.RptDis_Userinfo = rpdispatchin.RptDis_Userinfo;
                            rep.RptDis_Person = rpdispatchin.RptDis_Person;
                            rep.RptDis_Note = rpdispatchin.Note;
                            rep.RptDis_UsrId = userid;
                            rep.RptDis_YrId = (decimal)YearId;
                            rep.RptDis_CpyId = (decimal)CompanyId;
                            //if (rpdispatch > 1)
                            db.Report_Dispatching.Add(rep);

                        }

                        db.SaveChanges();

                    }
                }


                else
                {
                    SqlCommand cmd1 = new SqlCommand("Delete from CARE021112.dbo.Report_Dispatching  Where RptDis_LabNo=" + txtLabNoid + " And RptDis_YrId=" + YearId + " and RptDis_CpyId=" + CompanyId + " ", sqlcon);
                    cmd1.ExecuteNonQuery();
                    EntryNo1 = EntryNo;
                    if (rpdispatch != null)
                    {
                        foreach (ReportDispatch rpdispatchin in rpdispatch)
                        {
                            //var key = from u in db.Report_Dispatching
                            //          from s. in EntryNo
                            //          where u.FullName.Contains(s)
                            //            select u;
                            //var key = db.Report_Dispatching.Where(x => x.RptDis_Key.ToString().Contains(EntryNo.ToString())).Select(x => x.RptDis_Key);
                            var key = (from c in db.Report_Dispatching
                                       where c.RptDis_Key.ToString().Contains(EntryNo1.ToString())
                                       select (c.RptDis_Key)).FirstOrDefault();
                            int keynum = Convert.ToInt32(key);


                            Report_Dispatching rep = new Report_Dispatching();

                            if (keynum == EntryNo1)
                            {
                                EntryNo1 = EntryNo1 + 1;
                                rep.RptDis_Key = EntryNo1;
                            }
                            else
                            {
                                EntryNo = EntryNo1;


                                rep.RptDis_Key = EntryNo;
                            }
                            rep.RptDis_LabNo = Labno;
                            rep.RptDis_Dispmode = rpdispatchin.RptDis_Dispmode;
                            rep.RptDis_Userinfo = rpdispatchin.RptDis_Userinfo;
                            rep.RptDis_Person = rpdispatchin.RptDis_Person;
                            rep.RptDis_Note = rpdispatchin.Note;
                            rep.RptDis_UsrId = userid;
                            rep.RptDis_YrId = (decimal)YearId;
                            rep.RptDis_CpyId = (decimal)CompanyId;
                            //if (rpdispatch > 1)
                            db.Report_Dispatching.Add(rep);
                            db.SaveChanges();
                        }



                    }
                }

            }
          
            catch (Exception exe)
            {
                var x = exe.Message;
                var y = exe.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }

//****************END-SAVE-REPORT-DISPATCH**************************


        public JsonResult GETLABL(List<BillWiseCollectionArea> billwisearea, string selectbillwiseall)
        {
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            bool ChkSelectS = false;

            string lblSelectedBillAmt = "";
            double BalanceAmt = 0;
            if (billwisearea != null)
            {
                BillWiseCollectionArea bills = new BillWiseCollectionArea();
                foreach (BillWiseCollectionArea billwiseareain in billwisearea)
                {


                    {
                        ChkSelectS = false;
                        ChkSelectS = false;
                        try
                        {
                            ChkSelectS = billwiseareain.selectall;


                        }
                        catch { }
                        if (ChkSelectS == true)
                        {
                            try
                            {
                                double TempBalAmt = Convert.ToDouble(billwiseareain.TempBalAmt);
                                BalanceAmt = BalanceAmt + TempBalAmt;
                                bills.BalanceAmt = BalanceAmt;
                            }
                            catch { }
                        }
                    }

                    lblSelectedBillAmt = "Selected Bill Total: " + BalanceAmt.ToString();
                }
                bills = new BillWiseCollectionArea()
                {
                    lblSelectedBillAmt = lblSelectedBillAmt
                };
                getbillwisecollection.Add(bills);
            }
            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }



        public JsonResult GETAutoAlloc(List<BillWiseCollectionArea> billwisearea, string allowamt)
        {
            double AllocAmt = 0;
            double TempAmount = 0;
            double Amount = 0;
            double tempAllocamt = 0;
            double BalanceAmt = 0;
            string slno = "";
            string labno = "";
            string date = "";
            string pat = "";
            string corpname = "";
            double amount = 0;
            double balamount = 0;
            string corpid = "";
            string phonono = "";
            Boolean ChkSelectS = false;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();


            try
            {
                AllocAmt = Convert.ToDouble(allowamt);
            }
            catch { }

            if (billwisearea != null)
            {
                BillWiseCollectionArea bills = new BillWiseCollectionArea();
                foreach (BillWiseCollectionArea billwiseareain in billwisearea)
                {



                    ChkSelectS = false;
                    try
                    {
                        ChkSelectS = billwiseareain.selectall;
                        slno = billwiseareain.slno;
                        labno = billwiseareain.labno;
                        date = billwiseareain.date;
                        pat = billwiseareain.pat;
                        corpname = billwiseareain.corpname;
                        amount = billwiseareain.amount;
                        balamount = billwiseareain.balamount;
                        corpid = billwiseareain.corpid;
                        phonono = billwiseareain.phonono;


                    }
                    catch { }
                    if (ChkSelectS == true)
                    {
                        try
                        {
                            double TempBalAmt = Convert.ToDouble(billwiseareain.TempBalAmt);
                            BalanceAmt = BalanceAmt + TempBalAmt;
                            bills.BalanceAmt = BalanceAmt;

                        }
                        catch { }
                    }

                }


            }
            if (BalanceAmt == 0)
            {
                return Json(new { Result = "Please Select Invoice" });

            }
            if (AllocAmt > BalanceAmt)
            {
                return Json(new { Result = "Excess Amount,Check the Total Balance Amount" });

            }
            BillWiseCollectionArea bill = new BillWiseCollectionArea();
            if (billwisearea != null)
            {

                foreach (BillWiseCollectionArea billwisearea1 in billwisearea)
                {

                    try
                    {
                        TempAmount = Convert.ToDouble(billwisearea1.TempBalAmt);
                        slno = billwisearea1.slno;
                        labno = billwisearea1.labno;
                        ChkSelectS = billwisearea1.selectall;
                        date = billwisearea1.date;
                        pat = billwisearea1.pat;
                        corpname = billwisearea1.corpname;
                        amount = billwisearea1.amount;
                        balamount = billwisearea1.balamount;
                        corpid = billwisearea1.corpid;
                        phonono = billwisearea1.phonono;
                    }
                    catch { }
                    bill = new BillWiseCollectionArea()
                    {
                        AllowAmt = Convert.ToString("0.00"),
                        currentbal = TempAmount.ToString("#0.00"),
                        slno = slno,
                        labno = labno,
                        date = date,
                        pat = pat,
                        corpname = corpname,
                        amount = amount,
                        balamount = balamount,
                        selectall = ChkSelectS,
                        corpid = corpid,
                        phonono = phonono
                    };

                    ChkSelectS = false;
                    try
                    {
                        ChkSelectS = Convert.ToBoolean(billwisearea1.selectall);
                    }
                    catch { }
                    if (ChkSelectS == true)
                    {


                        if (AllocAmt > 0)
                        {
                            Amount = AllocAmt - TempAmount;
                            if (Amount > 0)
                            {

                                AllocAmt = Amount;
                                bill = new BillWiseCollectionArea()
                                {
                                    AllowAmt = TempAmount.ToString("#0.00"),
                                    currentbal = "0.00",
                                    slno = slno,
                                    labno = labno,
                                    date = date,
                                    pat = pat,
                                    corpname = corpname,
                                    amount = amount,
                                    balamount = balamount,
                                    selectall = ChkSelectS,
                                    corpid = corpid,
                                    phonono = phonono
                                };

                            }
                            else
                            {
                                Double BalAmt = 0;
                                tempAllocamt = TempAmount - AllocAmt;
                                BalAmt = TempAmount - tempAllocamt;
                                bill = new BillWiseCollectionArea()
                                {
                                    AllowAmt = AllocAmt.ToString("#0.00"),
                                    currentbal = tempAllocamt.ToString("#0.00"),
                                    slno = slno,
                                    labno = labno,
                                    date = date,
                                    pat = pat,
                                    corpname = corpname,
                                    amount = amount,
                                    balamount = balamount,
                                    selectall = ChkSelectS,
                                    corpid = corpid,
                                    phonono = phonono
                                };

                                AllocAmt = 0;

                            }
                        }

                        else
                        {
                            bill = new BillWiseCollectionArea()
                            {
                                AllowAmt = "0.00",
                                currentbal = TempAmount.ToString("#0.00"),
                                slno = slno,
                                labno = labno,
                                date = date,
                                pat = pat,
                                corpname = corpname,
                                amount = amount,
                                balamount = balamount,
                                selectall = ChkSelectS,
                                corpid = corpid,
                                phonono = phonono
                            };

                        }

                    }

                    getbillwisecollection.Add(bill);
                }
                var jsonResult = Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;

                //return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);

            }

            return Json(JsonRequestBehavior.AllowGet);




        }
        public JsonResult BillwiseGetAutoAlloc(List<Billwisecollections> billwisearea, string allowamt)
        {
            double AllocAmt = 0;
            double TempAmount = 0;
            double Amount = 0;
            double tempAllocamt = 0;
            double BalanceAmt = 0;
            string slno = "";
            string labno = "";
            string date = "";
            string pat = "";
            string corpname = "";
            double amount = 0;
            double balamount = 0;
            string corpid = "";
            string phonono = "";
            Boolean ChkSelectS = false;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();


            try
            {
                AllocAmt = Convert.ToDouble(allowamt);
            }
            catch { }

            if (billwisearea != null)
            {
                Billwisecollections bills = new Billwisecollections();
                foreach (Billwisecollections billwiseareain in billwisearea)
                {



                    ChkSelectS = false;
                    try
                    {
                        ChkSelectS = billwiseareain.selectall;
                        slno = billwiseareain.slno;
                        labno = billwiseareain.labno;
                        date = billwiseareain.date;
                        pat = billwiseareain.pat;

                        amount = billwiseareain.amount;
                        balamount = billwiseareain.balamount;


                    }
                    catch { }
                    if (ChkSelectS == true)
                    {
                        try
                        {
                            double TempBalAmt = Convert.ToDouble(billwiseareain.TempBalAmt);
                            BalanceAmt = BalanceAmt + TempBalAmt;
                            bills.BalanceAmt = BalanceAmt;

                        }
                        catch { }
                    }

                }


            }
            if (BalanceAmt == 0)
            {
                return Json(new { Result = "Please Select Invoice" });

            }
            if (AllocAmt > BalanceAmt)
            {
                return Json(new { Result = "Excess Amount,Check the Total Balance Amount" });

            }
            Billwisecollections bill = new Billwisecollections();
            if (billwisearea != null)
            {

                foreach (Billwisecollections billwisearea1 in billwisearea)
                {

                    try
                    {
                        TempAmount = Convert.ToDouble(billwisearea1.TempBalAmt);
                        slno = billwisearea1.slno;
                        labno = billwisearea1.labno;
                        ChkSelectS = billwisearea1.selectall;
                        date = billwisearea1.date;
                        pat = billwisearea1.pat;

                        amount = billwisearea1.amount;
                        balamount = billwisearea1.balamount;

                    }
                    catch { }
                    bill = new Billwisecollections()
                    {
                        AllowAmt = Convert.ToString("0.00"),
                        currentbal = TempAmount.ToString("#0.00"),
                        slno = slno,
                        labno = labno,
                        date = date,
                        pat = pat,

                        amount = amount,
                        balamount = balamount,
                        selectall = ChkSelectS,

                    };

                    ChkSelectS = false;
                    try
                    {
                        ChkSelectS = Convert.ToBoolean(billwisearea1.selectall);
                    }
                    catch { }
                    if (ChkSelectS == true)
                    {


                        if (AllocAmt > 0)
                        {
                            Amount = AllocAmt - TempAmount;
                            if (Amount > 0)
                            {

                                AllocAmt = Amount;
                                bill = new Billwisecollections()
                                {
                                    AllowAmt = TempAmount.ToString("#0.00"),
                                    currentbal = "0.00",
                                    slno = slno,
                                    labno = labno,
                                    date = date,
                                    pat = pat,

                                    amount = amount,
                                    balamount = balamount,
                                    selectall = ChkSelectS,

                                };
                                //bill.AllowAmt = TempAmount.ToString("#0.00");
                                //bill.currentbal = "0.00";

                            }
                            else
                            {
                                Double BalAmt = 0;
                                tempAllocamt = TempAmount - AllocAmt;
                                BalAmt = TempAmount - tempAllocamt;
                                bill = new Billwisecollections()
                                {
                                    AllowAmt = AllocAmt.ToString("#0.00"),
                                    currentbal = tempAllocamt.ToString("#0.00"),
                                    slno = slno,
                                    labno = labno,
                                    date = date,
                                    pat = pat,

                                    amount = amount,
                                    balamount = balamount,
                                    selectall = ChkSelectS,

                                };
                                //bill.AllowAmt = AllocAmt.ToString("#0.00");
                                //bill.currentbal = tempAllocamt.ToString("#0.00");
                                AllocAmt = 0;

                            }
                        }

                        else
                        {
                            bill = new Billwisecollections()
                            {
                                AllowAmt = "0.00",
                                currentbal = TempAmount.ToString("#0.00"),
                                slno = slno,
                                labno = labno,
                                date = date,
                                pat = pat,

                                amount = amount,
                                balamount = balamount,
                                selectall = ChkSelectS,

                            };

                        }

                    }

                    getbillwisecollection.Add(bill);
                }
                var jsonResult = Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
                NewMethod(jsonResult);
                return jsonResult;

                //return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);

            }

            return Json(JsonRequestBehavior.AllowGet);




        }
        public void journals()
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            Billwisecollections data1 = Session["data"] as Billwisecollections;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int _BillWiseSms = 0;
            //string logInBranchId = l.;
            double logInBranchId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            int TdsId = Convert.ToInt32(data1.TdsId);
            StoreBillWiseDetails data = TempData["mydata"] as StoreBillWiseDetails;

            int CorpId = 0;
            double BalAmt = 0;
            double AllocAmt = 0;
            int Inv_No = 0;
            int Vchrkey = 0;
            int TransNo = 0;
            SqlCommand cmd1;
            double totalAllocAmt = 0;
            int ChqNo = 0;
            int BankId = 0;
            double Tdsamt = 0;
            double Bankamt = 0;
            double Totalbankamt = 0;
            string txtNameid = data.txtNameid;
            string txtbankamt = data.bankamount;
            string txtAlloAmt = data.txtAlloAmt;
            string txtTdsamt = data.txtTdsamt;


            int id = 0;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);
            }
            catch { }
            try
            {
                Bankamt = Convert.ToDouble(txtbankamt);
            }
            catch { }

            //if (CorpId == 0)
            //{
            //    //MessageBox.Show("Invalid Corporate", cPublic.ProjectName);
            //    //txtName.Focus();
            //    //return;
            //}

            try
            {
                totalAllocAmt = Convert.ToDouble(txtAlloAmt);
            }
            catch { }

            try
            {
                Tdsamt = Convert.ToDouble(txtTdsamt);
            }
            catch { }

            try
            {
                Bankamt = Convert.ToDouble(txtbankamt);
            }
            catch { }


            if (totalAllocAmt == 0)
            {
                Json(new { Result = "InValid Bill Amount" });

            }

            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
            Vchrkey += 1;

            try
            {
                SqlCommand cmd9 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Journal' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + logInBranchId + "  ", sqlcon);
                TransNo = 0;
                TransNo = Convert.ToInt32(cmd9.ExecuteScalar());
                TransNo += 1;
            }
            catch { }

            try
            {
                //***********TDS JOURNAL TDS ROW ENTRY ********************
                journalstds(TransNo, TdsId, 0, Tdsamt);
                //*********************************************************

                //**********TDS JOURNAL CORPORATE ROW ENTRY ***************
                journalstds(TransNo, CorpId, Tdsamt, 0);
                //*********************************************************
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message, cPublic.ProjectName);
            }
        }
        public void journalstds(int vchrTransNo, int vchrId, double vchrPaymnt, double vchrRcpt)
        {
            logindetails l = Session["logindls"] as logindetails;

            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int _BillWiseSms = 0;
            string UserName = l.Usr_Name;
            int UserId = l.Usr_EmpId;
            //string logInBranchId = l.;
            double logInBranchId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            StoreBillWiseDetails data = TempData["mydata"] as StoreBillWiseDetails;
            string dtpDate = data.dtpDate;
            string txtName = data.txtName;
            string txtChqNo = data.txtChqNo;
            string SysName = Environment.MachineName;
            int Vchrkey = 0;
            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
            Vchrkey += 1;


            SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
            cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate;
            cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = 0;
            cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = vchrId;
            cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = "Journal";
            cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = vchrTransNo;

            cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = "Automated TDS Journal Entry:'" + txtName + "',Cheque No:'" + txtChqNo + "'";
            cmd.Parameters.Add("@vchr_TdsAmt", SqlDbType.NVarChar).Value = 0;
            //}            
            cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = vchrPaymnt;
            cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = vchrRcpt;

            string UserInfo = UserName + "  " + DateTime.Now.ToString("MM-dd-yy hh:mm tt") + " Work Station:" + SysName;

            cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = UserInfo;
            cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
            cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
            cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
            cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
            cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = logInBranchId;
            cmd.ExecuteNonQuery();
        }



        //**************SAVE-BILLWISECOLLECTION********************************************************
        public JsonResult BILLWISAVE(List<Billwisecollections> billwisearea, string corpid, string allowamt, string optCollection1, string optCollectionpur, string optCollectionpha, string bankname, string chqno, string narration, string chqDate, string Chequeradio, string Cashradio, string bankid, string currentbal, string bankamount, string tdsamount, string curdate, string corpname, string corphone, string tdsid)
        {
            logindetails l = Session["logindls"] as logindetails;
            Billwisecollections data = Session["data"] as Billwisecollections;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            List<StoreBillWiseDetails> storebillwisecollection = new List<StoreBillWiseDetails>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int _BillWiseSms = 0;
            //string logInBranchId = l.;
            double logInBranchId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            bool OptChq = false;

            int TdsId = 0;
            if (tdsid != "")
            {
                TdsId = Convert.ToInt32(tdsid);
            }
            bool optCollection = false;
            bool optPharmacy = false;
            bool optPurchase = false;
            string txtPhone = corphone;
            string txtAlloAmt = allowamt;
            string txtTdsamt = tdsamount;
            DateTime dtpDate = DateTime.ParseExact(curdate, "dd/MM/yyyy", null);
            DateTime dtpChqDate = DateTime.ParseExact(chqDate, "dd/MM/yyyy", null);

            string SysName = Environment.MachineName;
            //curdate
            //DateTime dtpDate =
            string UserName = l.Usr_Name;
            int UserId = l.Usr_EmpId;
            string txtName = corpname;
            StoreBillWiseDetails getdetails = new StoreBillWiseDetails()
            {
                dtpDate = Convert.ToString(dtpDate),
                txtAlloAmt = txtAlloAmt,
                txtTdsamt = txtTdsamt,
                txtNameid = corpid,
                bankamount = bankamount,
                txtName = corpname,
                txtChqNo = chqno




            };
            TempData["mydata"] = getdetails;

            storebillwisecollection.Add(getdetails);



            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            if (Convert.ToInt32(optCollectionpur) == 1)
            {
                optPurchase = true;
            }
            else
            {
                optPurchase = false;
            }
            if (Convert.ToInt32(optCollectionpha) == 1)
            {
                optPharmacy = true;
            }
            else
            {
                optPharmacy = false;
            }



            bool OptCash = false;

            if (Convert.ToInt32(Cashradio) == 1)
            {
                OptCash = true;
            }
            else
            {
                OptCash = false;
            }
            if (Convert.ToInt32(Chequeradio) == 1)
            {
                OptChq = true;
            }
            else
            {
                OptChq = false;
            }
            int CorpId = 0;
            double BalAmt = 0;
            double AllocAmt = 0;
            int Inv_No = 0;
            int Vchrkey = 0;
            int TransNo = 0;
            SqlCommand cmd1;
            double totalAllocAmt = 0;
            int ChqNo = 0;
            int BankId = 0;
            double Tdsamt = 0;
            double Bankamt = 0;
            double Totalbankamt = 0;

            double TotalPayamt = 0;
            double TotalBalAmount = 0;
            string txtNameid = corpid;
            string txtbankamt = bankamount;
            string txtBankid = bankid;
            string txtChqNo = chqno;
            string txtNarr = narration;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);

            }

            catch { }
            try
            {
                Bankamt = Convert.ToDouble(txtbankamt);
            }
            catch { }


            if (CorpId == 0)
            {
                return Json(new { Result = "Invalid Corporate" });

            }
            try
            {
                totalAllocAmt = Convert.ToDouble(txtAlloAmt);

            }
            catch { }

            //***************Total Amount Taken*****************
            try
            {
                string QueryTemp = "SELECT Sum(Inv_CurBalAmt) FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + CorpId + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "";
                SqlCommand cmd12 = new SqlCommand(QueryTemp, sqlcon);
                TotalPayamt = Convert.ToDouble(cmd12.ExecuteScalar());
                TotalPayamt = TotalPayamt * -1;
            }
            catch (Exception ex) { string nmsg = ex.Message; }
            if (TotalPayamt > 0)
            {
                TotalBalAmount = TotalPayamt - totalAllocAmt;
            }
            //**************************************************
            if (totalAllocAmt == 0)
            {
                return Json(new { Result = "InValid Bill Amount" });

            }

            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
            Vchrkey += 1;
            string SubQuery = "";
            string TransType = "";

            if (OptCash == true)
            {
                if (optCollection == true || optPharmacy == true)
                {
                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                    TransType = "Cash Receipts";
                }
                else
                {
                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                    TransType = "Cash Payment";
                }
                BankId = 1;
            }
            else
            {
                try
                {
                    Tdsamt = Convert.ToDouble(txtTdsamt);
                }
                catch { }
                try
                {
                    Bankamt = Convert.ToDouble(txtbankamt);
                }
                catch { }
                if ((Tdsamt > 0) && (TdsId != 0))
                {
                    try
                    {
                        totalAllocAmt = Bankamt;
                    }
                    catch { }
                }

                if (optCollection == true || optPharmacy == true)
                {
                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                    TransType = "Cheque Receive";
                }

                else
                {
                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                    TransType = "Cheque Issue";
                }
                try
                {
                    BankId = Convert.ToInt32(txtBankid);

                }
                catch { }
                if (BankId == 0)
                {
                    return Json(new { Result = "Invalid Bank" });

                }
                try
                {
                    ChqNo = Convert.ToInt32(txtChqNo);

                }
                catch { }
                if (ChqNo == 0)
                {
                    return Json(new { Result = "Invalid Cheque No" });


                }
            }
            cmd1 = new SqlCommand(SubQuery, sqlcon);
            TransNo = 0;
            TransNo = Convert.ToInt32(cmd1.ExecuteScalar());
            TransNo += 1;

            SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
            cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
            cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = BankId;
            cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = txtNameid;
            cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = TransType;
            cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = TransNo;

            if (OptChq == true)
            {
                cmd.Parameters.Add("@vchr_Chq", SqlDbType.Int).Value = 1;
                cmd.Parameters.Add("@vchr_ChqNo", SqlDbType.NVarChar).Value = txtChqNo;
                cmd.Parameters.Add("@vchr_ChqDate", SqlDbType.DateTime).Value = dtpChqDate.ToShortDateString();
                cmd.Parameters.Add("@vchr_ChqPassed", SqlDbType.Int).Value = 0;
                cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarr;
                cmd.Parameters.Add("@vchr_TdsAmt", SqlDbType.NVarChar).Value = Tdsamt;
            }
            //  cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarration.Text.Trim();
            if (optCollection == true || optPharmacy == true)
            {
                cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = 0;
                cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = totalAllocAmt;
            }
            else
            {
                cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = float.Parse(txtAlloAmt);
                cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = 0;
            }

            string UserInfo = UserName + "  " + DateTime.Now.ToString("MM-dd-yy hh:mm tt") + " Work Station:" + SysName;

            cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = UserInfo;
            cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
            cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
            cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
            cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
            cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = logInBranchId;
            //  cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = cPublic.CompanyId;
            cmd.ExecuteNonQuery();

            if ((Tdsamt > 0) && (TdsId != 0))
            {
                journals(); // JOURNAL ENTRY
            }

            //********Billing SMS ***************

            int SMS_ID = 0;
            string m_Text = "";
            string m_Mob = "";
            try
            {
                m_Mob = txtPhone.Substring(txtPhone.Length - 10, 10);
            }
            catch { }
            string SmsText = "";
            try
            {
                SqlCommand cmdsms = new SqlCommand("SELECT BrMst_BillWiseCollSms FROM Baranches_Mst WHERE BrMst_Key=" + CompanyId + "", sqlcon);
                SmsText = cmdsms.ExecuteScalar().ToString();
            }
            catch { }
            if (SmsText != "")
            {
                SmsText = SmsText.Replace("@PTotalAmount", TotalPayamt.ToString());
                SmsText = SmsText.Replace("@PAmount", txtAlloAmt);
                SmsText = SmsText.Replace("@PCorpName", txtName);
                SmsText = SmsText.Replace("@PBal", TotalBalAmount.ToString().Trim());
                SmsText = SmsText.Replace("@PVchrNo", TransNo.ToString());
                SmsText = SmsText.Replace("@PVchrDate", DateTime.Now.ToString("dd-MM-yyyy"));



                if (m_Mob.Length == 10 && _BillWiseSms == 1)
                {
                    m_Mob = "91" + m_Mob;
                    SqlCommand Sqlcmd;

                    Sqlcmd = new SqlCommand("SELECT ISNULL(SMS_ID,0) FROM sendSMS WHERE SMS_InvNo=" + TransNo + " AND SMS_YrId=" + YearId + " AND SMS_CpyId=" + CompanyId + " AND SMS_Type=3", sqlcon);
                    try
                    {
                        SMS_ID = Convert.ToInt32(Sqlcmd.ExecuteScalar());
                    }
                    catch { }
                    if (SMS_ID == 0)
                    {
                        Sqlcmd = new SqlCommand("INSERT INTO sendSMS(SMS_Text,SMS_InvNo,SMS_Flash,SMS_Mode,SMS_Mobile,SMS_isSent,SMS_YrId,SMS_CpyId,SMS_Type,SMS_Tryed,SMS_WUpd) values('" + SmsText + "','" + txtNameid + "','False','TEXT','" + m_Mob.Trim() + "','False'," + YearId + "," + CompanyId + ",'3','0',1)", sqlcon);
                        Sqlcmd.ExecuteNonQuery();
                    }
                }
            }

            //************************
            double invAmt = 0;
            double RecAmt = 0;
            double InvNo = 0;
            if (billwisearea != null)
            {

                foreach (Billwisecollections billwisearea1 in billwisearea)
                {


                    BalAmt = 0;
                    AllocAmt = 0;
                    double TempCurBal = 0;
                    Inv_No = 0;
                    try
                    {
                        BalAmt = Convert.ToDouble(billwisearea1.TempBalAmt);
                    }
                    catch { }
                    try
                    {
                        invAmt = Convert.ToDouble(billwisearea1.Inv_Netamt);
                    }
                    catch { }
                    try
                    {
                        AllocAmt = Convert.ToDouble(billwisearea1.collallowAmt);
                        TempCurBal = Convert.ToDouble(billwisearea1.currentbal);
                    }
                    catch { }
                    try
                    {
                        Inv_No = Convert.ToInt32(billwisearea1.invno);
                    }
                    catch { }

                    if (AllocAmt > 0)
                    {
                        SqlCommand Sqlcmd = new SqlCommand("SP_INSERT_BILLWISECOLLECTION", sqlcon);
                        Sqlcmd.CommandType = CommandType.StoredProcedure;
                        Sqlcmd.Parameters.Add("@BlWsCol_CorpId", SqlDbType.Int).Value = CorpId;
                        Sqlcmd.Parameters.Add("@BlWsCol_VchrKey", SqlDbType.Int).Value = Vchrkey;
                        Sqlcmd.Parameters.Add("@BlWsCol_InvNo", SqlDbType.Int).Value = Inv_No;
                        Sqlcmd.Parameters.Add("@BlWsCol_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                        Sqlcmd.Parameters.Add("@BlWsCol_AlloAmt", SqlDbType.Float).Value = AllocAmt;
                        Sqlcmd.Parameters.Add("@BlWsCol_CurBal", SqlDbType.Float).Value = TempCurBal;
                        Sqlcmd.Parameters.Add("@BlWsCol_YearId", SqlDbType.Int).Value = YearId;
                        Sqlcmd.Parameters.Add("@BlWsCol_CompanyId", SqlDbType.Int).Value = CompanyId;
                        Sqlcmd.Parameters.Add("@BlWsCol_UserInfo", SqlDbType.NVarChar).Value = UserInfo;
                        //Sqlcmd.Parameters.Add("@BlWsCol_BrId", SqlDbType.NVarChar).Value = UserInfo;
                        Sqlcmd.ExecuteNonQuery();

                    }
                    if (optCollection == true)
                    {
                        if (BalAmt == AllocAmt)
                        {


                            cmd1 = new SqlCommand("UPDATE Invoice_Mst SET Invl_IsPending=0 ,Inv_CurBalAmt=0 WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                            cmd1.ExecuteNonQuery();
                        }
                        else if (AllocAmt > 0)
                        {

                            TempCurBal = -1 * TempCurBal;

                            SqlCommand cmd3 = new SqlCommand("UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                            //string aa = "UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + cPublic.YearId + " AND Inv_CpyId=" + cPublic.CompanyId + "";
                            cmd3.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        RecAmt = invAmt - TempCurBal;
                        SqlCommand cmd3;
                        if (optPurchase == true)
                        {
                            cmd3 = new SqlCommand("UPDATE PURCHASE SET PBalAmt=" + TempCurBal + ",PPaidAmt=" + RecAmt + " WHERE PNo=" + Inv_No + " AND PFinYearID=" + YearId + " AND PCmpID=" + CompanyId + "", sqlcon);

                        }
                        else
                        {
                            cmd3 = new SqlCommand("UPDATE Pharma_Invoice SET InvCurBal=" + TempCurBal + ",InvCurRec=" + RecAmt + " WHERE InvNo=" + Inv_No + " AND InvFinyearID=" + YearId + " AND InvCompanyID=" + CompanyId + "", sqlcon);
                        }
                        cmd3.ExecuteNonQuery();
                    }
                }
            }

            string usrLogData = "";
            usrLogData = "BILLWISE COLLECTION -CORPORATE: " + txtName.ToString() + "_AMT_" + txtAlloAmt;
           UserTrackInsert(usrLogData, "BILLWISE COLLECTION", 23);







            return Json(JsonRequestBehavior.AllowGet);

        }

        //*************END-BILLWISECOLLECTION-SAVE**************************************


        public JsonResult DISPLAYCHEQUEISSUE(string ChqTransNo)
        {
            List<CHEQUEISSUEcs> getchqissue = new List<CHEQUEISSUEcs>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            string txtTransNo = "";
            string txtpartyName = "";
            int txtpartyNameid = 0;
            txtTransNo = ChqTransNo;
            int _vchrKey = 0;
           string txtbank = "";
            string txtbankid = "";
            string dtpdate = "";
            string txtAmount = "";
            string txtnarrartion = "";
            string txtuserinfo = "";
            int txtTransNoid = 0;
            string txtChequeno ="";
            string dtpchequedate = "";
            int _IsCheqPass = 0;
            bool chkpassed = false;
            try
            {
                if (txtTransNo!= "")
                {

                    SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                    _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                    if (_vchrKey != 0)
                    {
                        SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Vo.vchr_TimeStamp,Ah.AhMst_pName,Vo.vchr_Chq ,Vo.vchr_ChqNo,Vo.vchr_ChqDate ,Vo.vchr_ChqPassed,Vo.vchr_BookId,Ah1.AhMst_pName as Bank from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key  left join AccountHeads_Mst Ah1 WITH (NOLOCK) ON Vo.vchr_BookId=Ah1.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                      
                        SqlDataAdapter sda = new SqlDataAdapter(cmd1);
                        DataTable dt = new DataTable();
                        sda.Fill(dt);

                        foreach (DataRow dr in dt.Rows)
                        {
                            txtpartyName = dr["AhMst_pName"].ToString();
                            txtpartyNameid = Convert.ToInt32(dr["vchr_Id"]);
                            txtbank = dr["Bank"].ToString();
                            txtbankid = dr["vchr_BookId"].ToString();
                            dtpdate = (dr["vchr_Date"]).ToString();
                            txtAmount = dr["vchr_Payment"].ToString();
                            txtnarrartion = dr["vchr_Narration"].ToString();
                            txtuserinfo = dr["vchr_TimeStamp"].ToString();
                            txtTransNoid = Convert.ToInt32(dr["vchr_TransNo"]);
                            txtChequeno = dr["vchr_ChqNo"].ToString();
                            dtpchequedate = (dr["vchr_ChqDate"]).ToString();
                            _IsCheqPass = Convert.ToInt32(dr["vchr_ChqPassed"]);
                            chkpassed = false;
                            if (_IsCheqPass == 1)
                            {
                                chkpassed = true;
                            }
                        }

                        IsNewChqueIEntry = false;

                    }
                    else
                    {
                        return Json(new { Result = "No Data Found" });
                        //MessageBox.Show("No Data Found", cPublic.ProjectName);
                        //btn_New_Click(null, null);
                        //txtTransNo.Focus();
                    }

                }

                CHEQUEISSUEcs dispaychqissue = new CHEQUEISSUEcs()
                {
                    ChqTranNoid = txtTransNoid,
                    ChqisuParty= txtpartyName,
                    ChqisuPartyid= txtpartyNameid,
                    ChqisueBank= txtbank,
                    ChqisueBankid= txtbankid,
                    ChqissuecurDate= dtpdate,
                    ChqisueAmt= txtAmount,
                    ChqisuNarr= txtnarrartion,
                    ChqUsrinfo= txtuserinfo,
                    ChqissueDate= dtpchequedate,
                    _IsCheqPass= _IsCheqPass,
                    ChqisueNo= txtChequeno

                };
                getchqissue.Add(dispaychqissue);

            }

            catch (Exception Ex)
            {
                //MessageBox.Show("No Data Found", cPublic.ProjectName);
                //btn_New_Click(null, null);
                //txtTransNo.Focus();
            }
            return Json(getchqissue,JsonRequestBehavior.AllowGet);
        }
        public JsonResult DISPLAYCHEQUEREC(string ChqTransNo)
        {
            List<ChequeReceival> getchqRec = new List<ChequeReceival>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtTransNo = "";
            txtTransNo = ChqTransNo;
            int _vchrKey = 0;
            string txtpartyName = "";
            string txtbank = "";
            string txtbankid = "";
            string dtpdate = "";
            string txtAmount = "";
            string txtnarrartion = "";
            string txtuserinfo = "";
            int txtTransNoid = 0;
            string txtChequeno = "";
            string dtpchequedate = "";
            int _IsCheqPass = 0;


            int txtpartyNameid = 0;


            try
            {
                if (txtTransNo != "")
                {

                    SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                    _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                    if (_vchrKey != 0)
                    {
                        SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Vo.vchr_TimeStamp,Ah.AhMst_pName,Vo.vchr_Chq ,Vo.vchr_ChqNo,Vo.vchr_ChqDate ,Vo.vchr_ChqPassed,Vo.vchr_BookId,Ah1.AhMst_pName as Bank from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key  left join AccountHeads_Mst Ah1 WITH (NOLOCK) ON Vo.vchr_BookId=Ah1.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                        //string a = "Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName,Vo.vchr_Chq ,Vo.vchr_ChqNo,Vo.vchr_ChqDate ,Vo.vchr_ChqPassed,Vo.vchr_BookId,Ah1.AhMst_pName as Bank from Vouchers Vo left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key left join left join AccountHeads_Mst Ah1 WITH (NOLOCK) ON Vo.vchr_BookId=Ah1.AhMst_Keywhere vchr_TransNo=" + Convert.ToInt32(txtTransNo.Text) + " and  vchr_TransType='Cheque Receive' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + " ";
                        SqlDataAdapter sda = new SqlDataAdapter(cmd1);
                        DataTable dt = new DataTable();
                        sda.Fill(dt);

                        foreach (DataRow dr in dt.Rows)
                        {
                            txtpartyName = dr["AhMst_pName"].ToString();
                            txtpartyNameid = Convert.ToInt32(dr["vchr_Id"]);
                            txtbank = dr["Bank"].ToString();
                            txtbankid = dr["vchr_BookId"].ToString();
                            dtpdate = (dr["vchr_Date"]).ToString(); 
                            txtAmount = dr["vchr_Receipt"].ToString();
                            txtnarrartion = dr["vchr_Narration"].ToString();
                            txtuserinfo = dr["vchr_TimeStamp"].ToString();
                            txtTransNoid = Convert.ToInt32(dr["vchr_TransNo"]);
                            txtChequeno = dr["vchr_ChqNo"].ToString();
                            dtpchequedate = (dr["vchr_ChqDate"]).ToString(); ;
                            _IsCheqPass = Convert.ToInt32(dr["vchr_ChqPassed"]);
                          
                        }

                        IsNewChqueREntry = false;

                    }
                    else
                    {
                        return Json(new { Result = "No Data Found" });
                       
                    }
                    ChequeReceival getchqRecdata = new ChequeReceival()
                    {
                        ChqRecParty= txtpartyName,
                        ChqRecPartyid= txtpartyNameid,
                        ChqRecBank= txtbank,
                        ChqRecBankid= txtbankid,
                        ChqReccurDate= dtpdate,
                        ChqRecAmt= txtAmount,
                        ChqRecNarr= txtnarrartion,
                        ChqRecUsrinfo= txtuserinfo,
                        ChqRecTransNoid= txtTransNoid,
                        ChqRecNo= txtChequeno,
                        ChqRecDate= dtpchequedate,
                        _IsCheqPass= _IsCheqPass
                    };

                    getchqRec.Add(getchqRecdata);

                }

            }
            catch (Exception Ex)
            {
                return Json(new { Result = "No Data Found" });
               
            }
        


            return Json(getchqRec,JsonRequestBehavior.AllowGet);
        }
        public JsonResult DELETECHEQUEREC( string partyName,string partyNameid,string ChqRecAmt,string Trano)
        {
            int TransNo = 0;
            string txtTransNoid = "";
            txtTransNoid = Trano;
            List<ChequeReceival> getchqRec = new List<ChequeReceival>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int VchrKey = 0;

            try
            {
                TransNo = Convert.ToInt32(txtTransNoid);
            }
            catch { }
            try
            {
                SqlCommand cmd = new SqlCommand("SELECT ISNULL(vchr_TransNo,0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransNo=" + TransNo + " and  vchr_TransType='Cheque Receive' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                VchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                if (VchrKey == 0)
                {
                    return Json(new { Result = "No Data Found" });
                   
                }
            }
            catch { }

            if (TransNo != 0)
            {

              
                    SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_TransNo=" + TransNo + " and  vchr_TransType='Cheque Receive' and  vchr_YrId=" +YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                    cmd3.ExecuteNonQuery();
                   
                }
            
            else
            {
                return Json(new { Result = "No Data Found" });
               

            }

            return Json(JsonRequestBehavior.AllowGet);
        }

        public JsonResult GETTRANSNOCHQREC()
        {
            List<ChequeReceival> getchqRec = new List<ChequeReceival>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtTransNo = "";
            int txtTransNoid = 0;

            IsNewChqueREntry = true;
         
            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE  vchr_TransType='Cheque Receive' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
            int TransNo = 0;
            TransNo = Convert.ToInt32(cmd.ExecuteScalar());
            if (TransNo != 0)
            {
                TransNo += 1;
                txtTransNo = TransNo.ToString();
                txtTransNoid= TransNo;

            }
            else
            {
                txtTransNo = "1";
                txtTransNoid = 1;
            }

            ChequeReceival gettranso = new ChequeReceival()
            {
                ChqRecTransNo= txtTransNo,
                ChqRecTransNoid= txtTransNoid
            };

            getchqRec.Add(gettranso);

            return Json(getchqRec,JsonRequestBehavior.AllowGet);
        }

        public JsonResult SAVECHEQUERECEIVAL(string partyName,string partyNameid,string ChqRecTransNo,string ChqReccurDate,string ChqRecBank,string ChqRecBankid, string ChqRecAmt,string ChqRecNo,string ChqRecDate,string ChqRecNarr,string ChqRecPass,string ChqRecUsrinfo)
        {

            try {
                List<ChequeReceival> getchqrec = new List<ChequeReceival>();
                logindetails l = Session["logindls"] as logindetails;
                SqlConnection sqlcon = new SqlConnection();
                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                string UserName = l.Usr_Name;
                string SysName = Environment.MachineName;
                string txtuserinfo = "";
                txtuserinfo= ChqRecUsrinfo;
                string txtAmount = "";
                txtAmount = ChqRecAmt;

                int _Vchrkey = 0;
                int UserId = l.Usr_EmpId;
                sqlcon = con.dbcon();
                int _TransNo = 0;
                string txtTransNo = "";
                string txtnarrartion = "";
                txtnarrartion = ChqRecNarr;
                int txtTransNoid = 0;
                int txtbankid = 0;
                int _ChequePass = 0;
                _ChequePass =Convert.ToInt32(ChqRecPass);


                string txtChequeno = ChqRecNo;
                bool chkpassed = false;
                if (_ChequePass==1)
                {
                    chkpassed = true;
                }
                else
                {
                    chkpassed = false;
                }

                txtbankid = Convert.ToInt32(ChqRecBankid);
                int txtpartyNameid = 0;
                txtpartyNameid = Convert.ToInt32(partyNameid);
                sqlcon.Open();
                DateTime dtpdate = DateTime.ParseExact(ChqReccurDate, "dd/MM/yyyy", null);
                DateTime dtpchequedate = DateTime.ParseExact(ChqRecDate, "dd/MM/yyyy", null);
                txtuserinfo = UserName + " " + DateTime.Now.ToString("dd-MM-yyyy hh:mm") + " Work Station:" + SysName;
            if (IsNewChqueREntry == true)
            {
                SqlCommand cmd1 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                _TransNo = 0;
                _TransNo = Convert.ToInt32(cmd1.ExecuteScalar());
                _TransNo += 1;
                txtTransNo = _TransNo.ToString();
                txtTransNoid = _TransNo;


            }
            else
            {
                _TransNo = Convert.ToInt32(ChqRecTransNo);
                SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_TransNo=" + _TransNo + " and  vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                cmd3.ExecuteNonQuery();
            }
            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
            _Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
            _Vchrkey += 1;

            SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = _Vchrkey;
            cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpdate.ToShortDateString();
            cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = txtbankid;
            cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = txtpartyNameid;
            cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = "Cheque Receive";
            cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = _TransNo;

            cmd.Parameters.Add("@vchr_Chq", SqlDbType.Int).Value = 1;
            cmd.Parameters.Add("@vchr_ChqNo", SqlDbType.NVarChar).Value = txtChequeno;
            cmd.Parameters.Add("@vchr_ChqDate", SqlDbType.DateTime).Value = dtpchequedate.ToShortDateString();
            if (chkpassed == true)
            {
                _ChequePass = 1;
            }
            cmd.Parameters.Add("@vchr_ChqPassed", SqlDbType.Int).Value = _ChequePass;


            cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtnarrartion;
            cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = 0;
            cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = (txtAmount);
            cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = txtuserinfo;
            cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value =UserId;
            cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
            cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value =CompanyId;
            cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
            cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = CompanyId;
            cmd.ExecuteNonQuery();
          
        }
            catch (Exception E)
            {
                return Json(new { Result = "Check The Data Entered Correctly" });

            }

            return Json(JsonRequestBehavior.AllowGet);
        }

        public JsonResult SAVECHEQUEISSUE(string partyName,string partyNameid,string ChqisuTransNo,string ChqissuecurDate,string ChqisueBank,string ChqisueBankid,string ChqisueAmt,string ChqisueNo,string ChqissueDate,string ChqisuNarr,string ChkPass,string ChqUsrinfo,string Trano)
        {
            try
            {
                List<CHEQUEISSUEcs> getchqissue = new List<CHEQUEISSUEcs>();
                logindetails l = Session["logindls"] as logindetails;
                SqlConnection sqlcon = new SqlConnection();
                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                string UserName = l.Usr_Name;
                string SysName = Environment.MachineName;
                string txtuserinfo = ChqUsrinfo;
                int UserId = l.Usr_EmpId;
                sqlcon = con.dbcon();
                int _TransNo = 0;
                string txtTransNo = "";
                string txtpartyName = partyName;

                string txtnarrartion = ChqisuNarr;
                int txtpartyNameid = 0;
                txtpartyNameid = Convert.ToInt32(partyNameid);
                int txtTransNoid = 0;
                int _ChequePass = 0;
                bool chkpassed = false;
                string txtAmount = ChqisueAmt;
                if (Convert.ToInt32(ChkPass) == 1)
                {
                    chkpassed = true;
                }
                else
                {
                    chkpassed = false;
                }

                int _Vchrkey = 0;
                int txtbankid = 0;
                string txtChequeno = ChqisueNo;
                txtbankid = Convert.ToInt32(ChqisueBankid);
                DateTime dtpdate = DateTime.ParseExact(ChqissuecurDate, "dd/MM/yyyy", null);
                DateTime dtpchequedate = DateTime.ParseExact(ChqissueDate, "dd/MM/yyyy", null);

                sqlcon.Open();
                txtuserinfo = UserName + " " + DateTime.Now.ToString("dd-MM-yyyy hh:mm") + " Work Station:" + SysName;
                if (IsNewChqueIEntry == true)
                {
                    SqlCommand cmd1 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                    _TransNo = 0;
                    _TransNo = Convert.ToInt32(cmd1.ExecuteScalar());
                    _TransNo += 1;
                    txtTransNo = _TransNo.ToString();
                    txtTransNoid = _TransNo;


                }
                else
                {
                    _TransNo = Convert.ToInt32(Trano);
                    SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_TransNo=" + _TransNo + " and  vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND vchr_BrId=" + CompanyId + " ", sqlcon);
                    cmd3.ExecuteNonQuery();
                }
                SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
                _Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
                _Vchrkey += 1;

                SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = _Vchrkey;
                cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpdate.ToShortDateString();
                cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = txtbankid;
                cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = txtpartyNameid;
                cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = "Cheque Issue";
                cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = _TransNo;

                cmd.Parameters.Add("@vchr_Chq", SqlDbType.Int).Value = 1;
                cmd.Parameters.Add("@vchr_ChqNo", SqlDbType.NVarChar).Value = txtChequeno;
                cmd.Parameters.Add("@vchr_ChqDate", SqlDbType.DateTime).Value = dtpchequedate.ToShortDateString();
                if (chkpassed == true)
                {
                    _ChequePass = 1;
                }
                cmd.Parameters.Add("@vchr_ChqPassed", SqlDbType.Int).Value = _ChequePass;


                cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtnarrartion;
                cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = (txtAmount);
                cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = 0;
                cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = txtuserinfo;
                cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
                cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
                cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
                cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
                cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = CompanyId;
                cmd.ExecuteNonQuery();

                string usrLogData = "";
                if (IsNewChqueIEntry == true)
                {
                    usrLogData = "CHEQUE ISSUE CREATED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtpartyNameid.ToString() + "_" + txtpartyName + "AMOUNT:" + txtAmount;
                    UserTrackInsert(usrLogData, "CHEQUE ISSUE", 0);
                }
                else
                {
                    usrLogData = "CHEQUE ISSUE EDITED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtpartyNameid.ToString() + "_" + txtpartyName + "AMOUNT:" + txtAmount;
                    UserTrackInsert(usrLogData, "CHEQUE ISSUE", 0);
                }





            }catch(Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
                return Json(new { Result = "Check The Data Entered Correctly" });
            }



            return Json(JsonRequestBehavior.AllowGet);
        }

        public JsonResult DELETECHEQUEISSUE(string partyName, string partyNameid, string ChqisueAmt, string Trano)
        {
            List<CashReceipt> getcashreceipt = new List<CashReceipt>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            int TransNo = 0;
            string txtpartyNameid = partyNameid;
            string txtTransNoid = Trano;
            int VchrKey = 0;
            string txtpartyName = partyName;
            string txtAmount = ChqisueAmt;

            try
            {
                TransNo = Convert.ToInt32(txtTransNoid);
            }
            catch { }
            try
            {
                SqlCommand cmd = new SqlCommand("SELECT ISNULL(vchr_TransNo,0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransNo=" + TransNo + " and  vchr_TransType='Cheque Issue' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                VchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                if (VchrKey == 0)
                {
                    return Json(new { Result = "No Data Found" });

                    //MessageBox.Show("No Data Found", cPublic.ProjectName);
                    //btn_New_Click(null, null);
                    //txtTransNo.Focus();
                    //return;
                }
            }
            catch { }
            if (TransNo != 0)
            {
                //if (MessageBox.Show("Are you sure to delete this entry..?", cPublic.ProjectName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                //{
                SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_TransNo=" + TransNo + " and  vchr_TransType='Cheque Issue' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" +CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);
                cmd3.ExecuteNonQuery();


                string usrLogData = "";
                usrLogData = "CHEQUE ISSUE DELETED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtpartyNameid.ToString() + "_" + txtpartyName + "AMOUNT:" + txtAmount;
               UserTrackInsert(usrLogData, "CHEQUE ISSUE", 0);

              

            }

            else
            {
                return Json(new { Result = "No Data Found" });
                //MessageBox.Show("No Data Found", cPublic.ProjectName);
                //btn_New_Click(null, null);
                //txtTransNo.Focus();

            }

            return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult FILLCHEQUETRANSACTIONPARTY(string partyname,string partynameid)
        {
            List<ChequeTransaction> getChqTr = new List<ChequeTransaction>();
            
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            string txt_bankparty = partyname;
            string ChqTrName = "";
            string ChqTrBank = "";
            string datts = "";
            string datts1 = "";
            string ChqTrNarr = "";
            string ChqTrChqNo = "";
            string ChqTrPayment = "";
            string ChqTrRec = "";
            string ChqTrTransType = "";
            string ChqTrTransNo = "";
            bool ChqTrPass = false;
            SqlCommand cmd_fil = new SqlCommand();
            cmd_fil = new SqlCommand("SELECT AccountHeads_Mst.AhMst_pName As HeadName,Ahmst.AhMst_pName As Bank, Vouchers.vchr_Date, Vouchers.vchr_Narration, Vouchers.vchr_ChqNo,Vouchers.vchr_ChqDate, Vouchers.vchr_Payment, Vouchers.vchr_Receipt, Vouchers.vchr_TransType, Vouchers.vchr_ChqPassed,Vouchers.vchr_TransNo FROM AccountHeads_Mst with(nolock) INNER JOIN Vouchers ON AccountHeads_Mst.AhMst_Key = Vouchers.Vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vouchers.vchr_BookId=Ahmst.AhMst_Key WHERE (Vouchers.vchr_TransType = 'Cheque Receive' OR Vouchers.vchr_TransType = 'Cheque Issue') AND AccountHeads_Mst.AhMst_pName='" + txt_bankparty + "' And vchr_Yrid=" + YearId + " AND Vchr_CpyId=" + CompanyId + " ORDER BY Vouchers.vchr_Key DESC", sqlcon);
            SqlDataAdapter adt_fil = new SqlDataAdapter(cmd_fil);
            DataTable dt_fil = new DataTable();
            adt_fil.Fill(dt_fil);
            if (dt_fil.Rows.Count > 0)
            {
                //if(dr_fil>0)
                foreach (DataRow dr_fil in dt_fil.Rows)
                {
                    DateTime datt = Convert.ToDateTime(dr_fil["vchr_Date"]);
                    datts = datt.ToString("dd-MM-yyyy");

                    DateTime datt1 = Convert.ToDateTime(dr_fil["vchr_ChqDate"]);
                     datts1 = datt.ToString("dd-MM-yyyy");

                    ChqTrName = dr_fil["HeadName"].ToString();
                    ChqTrBank = dr_fil["Bank"].ToString();
                   
                   ChqTrNarr= dr_fil["vchr_Narration"].ToString();
                   ChqTrChqNo = dr_fil["vchr_ChqNo"].ToString();
                    
                    ChqTrPayment = dr_fil["vchr_Payment"].ToString();
                  ChqTrRec = dr_fil["vchr_Receipt"].ToString();
                  ChqTrTransType = dr_fil["vchr_TransType"].ToString();
                    ChqTrTransNo= dr_fil["vchr_TransNo"].ToString();
                    if (Convert.ToInt16(dr_fil["vchr_ChqPassed"]) == 0)
                    {
                        ChqTrPass = false;
                    }
                    else
                    {
                        ChqTrPass = true;
                    }
                    ChequeTransaction getTrdetails = new ChequeTransaction()
                    {
                  datts= datts,
                        datts1= datts1,
                        ChqTrName= ChqTrName,
                        ChqTrBank= ChqTrBank,
                        ChqTrNarr= ChqTrNarr,
                        ChqTrChqNo= ChqTrChqNo,
                        ChqTrPayment= ChqTrPayment,
                        ChqTrRec= ChqTrRec,
                        ChqTrTransType= ChqTrTransType,
                        ChqTrTransNo= ChqTrTransNo,
                        ChqTrPass= ChqTrPass


                    };

                    getChqTr.Add(getTrdetails);
                }


            }
                return Json(getChqTr,JsonRequestBehavior.AllowGet);
        }
        public JsonResult FILLCHEQUETRANSACTIONBANK(string bankname, string banknameid)
        {
            List<ChequeTransaction> getChqTr = new List<ChequeTransaction>();

            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            string txt_bankparty = bankname;
            string ChqTrName = "";
            string ChqTrBank = "";
            string datts = "";
            string datts1 = "";
            string ChqTrNarr = "";
            string ChqTrChqNo = "";
            string ChqTrPayment = "";
            string ChqTrRec = "";
            string ChqTrTransType = "";
            string ChqTrTransNo = "";
            bool ChqTrPass = false;
            SqlCommand cmd_fil = new SqlCommand();
            cmd_fil = new SqlCommand("SELECT AccountHeads_Mst.AhMst_pName As Bank,Ahmst.AhMst_pName As HeadName, Vouchers.vchr_Date, Vouchers.vchr_Narration, Vouchers.vchr_ChqNo,Vouchers.vchr_ChqDate, Vouchers.vchr_Payment, Vouchers.vchr_Receipt, Vouchers.vchr_TransType, Vouchers.vchr_ChqPassed,Vouchers.vchr_TransNo FROM AccountHeads_Mst with(nolock) INNER JOIN Vouchers ON AccountHeads_Mst.AhMst_Key = Vouchers.vchr_BookId LEFT JOIN AccountHeads_Mst Ahmst ON Vouchers.Vchr_Id=Ahmst.AhMst_Key  WHERE (Vouchers.vchr_TransType = 'Cheque Receive' OR Vouchers.vchr_TransType = 'Cheque Issue') AND AccountHeads_Mst.AhMst_pName='" + txt_bankparty + "' And vchr_Yrid=" + YearId + " AND Vchr_CpyId=" + CompanyId + " ORDER BY Vouchers.vchr_Key DESC", sqlcon);
            SqlDataAdapter adt_fil = new SqlDataAdapter(cmd_fil);
            DataTable dt_fil = new DataTable();
            adt_fil.Fill(dt_fil);
            if (dt_fil.Rows.Count > 0)
            {
                //if(dr_fil>0)
                foreach (DataRow dr_fil in dt_fil.Rows)
                {
                    DateTime datt = Convert.ToDateTime(dr_fil["vchr_Date"]);
                    datts = datt.ToString("dd-MM-yyyy");

                    DateTime datt1 = Convert.ToDateTime(dr_fil["vchr_ChqDate"]);
                    datts1 = datt.ToString("dd-MM-yyyy");

                    ChqTrName = dr_fil["HeadName"].ToString();
                    ChqTrBank = dr_fil["Bank"].ToString();

                    ChqTrNarr = dr_fil["vchr_Narration"].ToString();
                    ChqTrChqNo = dr_fil["vchr_ChqNo"].ToString();

                    ChqTrPayment = dr_fil["vchr_Payment"].ToString();
                    ChqTrRec = dr_fil["vchr_Receipt"].ToString();
                    ChqTrTransType = dr_fil["vchr_TransType"].ToString();
                    ChqTrTransNo = dr_fil["vchr_TransNo"].ToString();
                    if (Convert.ToInt16(dr_fil["vchr_ChqPassed"]) == 0)
                    {
                        ChqTrPass = false;
                    }
                    else
                    {
                        ChqTrPass = true;
                    }
                    ChequeTransaction getTrdetails = new ChequeTransaction()
                    {
                        datts = datts,
                        datts1 = datts1,
                        ChqTrName = ChqTrName,
                        ChqTrBank = ChqTrBank,
                        ChqTrNarr = ChqTrNarr,
                        ChqTrChqNo = ChqTrChqNo,
                        ChqTrPayment = ChqTrPayment,
                        ChqTrRec = ChqTrRec,
                        ChqTrTransType = ChqTrTransType,
                        ChqTrTransNo = ChqTrTransNo,
                        ChqTrPass = ChqTrPass


                    };

                    getChqTr.Add(getTrdetails);
                }

              
            }
            return Json(getChqTr, JsonRequestBehavior.AllowGet);
        }
            






        public JsonResult DISPLAYCASHRECEIPT(string CashRecTransNo)
        {
            List<CashReceipt> getcashreceipt = new List<CashReceipt>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            //bool IsNewPayement = true;
            string txtAccount = "";
            string txtUserInfoid = "";
            string txtNarration = "";
            string txtUserInfo = "";
            int _vchrKey = 0;
            string txtTransNo = "";
            string txtAmount = "";
            string dtpDate = "";
            int txtTransNoid = 0;
            int txtAccountid = 0;
            txtTransNo = CashRecTransNo;
            //CashRecTransNo = txtTransNo;
            if (txtTransNo != "")
            {

                SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                if (_vchrKey != 0)
                {
                    SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                    string q = "Select Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ";
                    SqlDataReader sdr;
                    sdr = cmd1.ExecuteReader();
                    while (sdr.Read())
                    {
                        txtAccount = sdr["AhMst_pName"].ToString();
                        dtpDate = (sdr["vchr_Date"].ToString());
                        txtAmount = sdr["vchr_Receipt"].ToString();
                        txtNarration = sdr["vchr_Narration"].ToString();
                        txtUserInfo = sdr["vchr_TimeStamp"].ToString();
                        txtUserInfoid = sdr["vchr_Key"].ToString();
                        txtTransNoid = Convert.ToInt32(sdr["vchr_TransNo"]);
                        txtAccountid = Convert.ToInt32(sdr["vchr_Id"]);
                    }
                    sdr.Close();
                    IsNewPayement = false;
                    //int IsNewPayement1 = 0;
                    //if (IsNewPayement == true)
                    //{
                    //   IsNewPayement1 = 1;
                    //}
                    //else
                    //{
                    //    IsNewPayement1 = 0;
                    //}

                }
                else
                {
                    return Json(new { Result = "No Data Found" });
                }

            }
            CashReceipt getcancelinvoice = new CashReceipt()
            {
                CashRecAccountTxt = txtAccount,
                CashRecDate = dtpDate,
                CashRecamount = txtAmount,
                CashRecNarr = txtNarration,
                CashRecUsrInfo = txtUserInfo,
                CashRecUsrInfoid = txtUserInfoid,
                CashRecTransNoid = txtTransNoid,
                CashRecAccountTxtid = txtAccountid


            };
            getcashreceipt.Add(getcancelinvoice);



            return Json(getcashreceipt, JsonRequestBehavior.AllowGet);
        }
        public JsonResult SAVECASHRECEIPT(string CashRecUsrInfoid, string CashRecNarr, string CashRecTransNo, string CashReDate, string CashRecAccountTxtid, string CashRecamount, string CashRecUsrInfo)
        {
            logindetails l = Session["logindls"] as logindetails;

            try
            {
                int txtAccountid = 0;
                txtAccountid = Convert.ToInt32(CashRecAccountTxtid);
                int _AccTagId = 0;
                string txtAmount = "";
                string txtUserInfo = "";
                txtAmount = CashRecamount;
                string UserName = l.Usr_Name;
                string SysName = Environment.MachineName;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                int UserId = l.Usr_EmpId;
                string txtTransNo = CashRecTransNo;
                int txtTransNoid = Convert.ToInt32(CashRecTransNo);
                int userinfid = Convert.ToInt32(CashRecUsrInfoid);
                int txtUserInfoid = 0;
                txtUserInfoid = userinfid;



                string txtNarration = CashRecNarr;

                DateTime dtpDate = DateTime.ParseExact(CashReDate, "dd/MM/yyyy", null);

                try
                {
                    _AccTagId = Convert.ToInt32(txtAccountid);
                }
                catch
                {
                    _AccTagId = 0;
                }
                if (_AccTagId != 0)
                {

                    if (txtAmount != "")
                    {
                        int TransNo = 0;
                        int Vchrkey = 0;
                        txtUserInfo = UserName + " " + DateTime.Now.ToString("dd-MM-yyyy hh:mm") + " Work Station:" + SysName;
                        if (IsNewPayement == true)
                        {
                            SqlCommand cmd1 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                            TransNo = 0;
                            TransNo = Convert.ToInt32(cmd1.ExecuteScalar());

                            if (TransNo != 0)
                            {
                                TransNo += 1;
                                txtTransNo = TransNo.ToString();
                                txtTransNoid = TransNo;

                            }
                            else
                            {
                                txtTransNo = "1";
                                txtTransNoid = 1;
                            }
                            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);

                            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());

                            if (Vchrkey != 0)
                            {
                                Vchrkey += 1;
                            }
                            else
                            {
                                Vchrkey = 1;
                            }
                        }
                        else
                        {
                            Vchrkey = (txtUserInfoid);
                            //if (Vchrkey == 0)
                            //{
                            //    return;
                            //}
                            SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_Key=" + Vchrkey + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
                            cmd3.ExecuteNonQuery();

                        }
                        //if (Vchrkey == 0)
                        //{
                        //    return;
                        //}

                        SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
                        cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                        cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = 1;
                        cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = txtAccountid;
                        cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = "Cash Receipts";
                        cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = txtTransNoid;

                        cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarration;
                        cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = 0;
                        cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = (txtAmount);
                        cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = txtUserInfo;
                        cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
                        cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
                        cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
                        cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = CompanyId;
                        cmd.ExecuteNonQuery();

                        string usrLogData = "";
                        if (IsNewPayement == true)
                        {
                            usrLogData = "CASH RECEIPT CREATED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccountid + "AMOUNT:" + txtAmount;
                            UserTrackInsert(usrLogData, "CASH RECEIPT", 12);
                        }
                        else
                        {
                            usrLogData = "CASH RECEIPT EDITED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccountid + "AMOUNT:" + txtAmount;
                            UserTrackInsert(usrLogData, "CASH RECEIPT", 13);
                        }



                    }
                }
            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }




//*******************SAVE-CASH-PAYMENT-********************************************************
        public JsonResult SAVECASHPAYMENT(string file, string CashpayAccountTxt, string CashpayTransNo, string CashpayDate, string CashpayAccountTxtid, string CashpayNarr, string CashpayUsrInfo, string CashpayUsrInfoid, string Cashpayamount)
        {
            logindetails l = Session["logindls"] as logindetails;
            try
            {
                int _AccTagId = 0;
                string txtAccountid = CashpayAccountTxtid;
                string txtAmount = Cashpayamount;
                string txtUserInfo = CashpayUsrInfo;
                string UserName = l.Usr_Name;
                string SysName = Environment.MachineName;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                int UserId = l.Usr_EmpId;
                string txtTransNo = CashpayTransNo;
                int txtTransNoid = Convert.ToInt32(CashpayTransNo);
                int txtUserInfoid = Convert.ToInt32(CashpayUsrInfoid);
                DateTime dtpDate = DateTime.ParseExact(CashpayDate, "dd/MM/yyyy", null);
                string txtNarration = CashpayNarr;
                string txtAccount = CashpayAccountTxt;
                try
                {
                    _AccTagId = Convert.ToInt32(txtAccountid);
                }
                catch
                {
                    _AccTagId = 0;
                }
                if (_AccTagId != 0)
                {

                    if (txtAmount != "")
                    {
                        int TransNo = 0;
                        int Vchrkey = 0;
                        txtUserInfo = UserName + " " + DateTime.Now.ToString("dd-MM-yyyy hh:mm") + " Work Station:" + SysName;
                        if (IsNewPayement == true)
                        {
                            SqlCommand cmd1 = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
                            TransNo = 0;
                            TransNo = Convert.ToInt32(cmd1.ExecuteScalar());

                            if (TransNo != 0)
                            {
                                TransNo += 1;
                                txtTransNo = TransNo.ToString();
                                txtTransNoid = TransNo;

                            }
                            else
                            {
                                txtTransNo = "1";
                                txtTransNoid = 1;
                            }
                            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);

                            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());

                            if (Vchrkey != 0)
                            {
                                Vchrkey += 1;
                            }
                            else
                            {
                                Vchrkey = 1;
                            }
                        }
                        else
                        {
                            Vchrkey = Convert.ToInt32(txtUserInfoid);
                            //if (Vchrkey == 0)
                            //{
                            //    return;
                            //}
                            SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_Key=" + Vchrkey + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
                            cmd3.ExecuteNonQuery();

                        }
                       
                        //*****************IMAGE*******************

                        //Image img = pictureBox1.BackgroundImage;
                        //byte[] arr;
                        //ImageConverter converter = new ImageConverter();
                        //arr = (byte[])converter.ConvertTo(img, typeof(byte[]));
                        //*****************IMAGE*******************
                        SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
                        cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                        cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = 1;
                        cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = txtAccountid;
                        cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = "Cash Payment";
                        cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = txtTransNoid;

                        cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarration;
                        cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = (txtAmount);
                        cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = 0;
                        cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = txtUserInfo;
                        cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
                        cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
                        cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
                        cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = CompanyId;
                        if (file != null)
                        {
                            string base64string;
                            base64string = file;
                            string[] arr;
                            arr = base64string.Split(',');
                            byte[] bytearr;
                            bytearr = Convert.FromBase64String(arr[1]);
                            cmd.Parameters.AddWithValue("@vchr_Attachment", bytearr);

                            //users.Usr_Sign = bytearr;


                        }
                        cmd.ExecuteNonQuery();

                        //if (pictureBox1.BackgroundImage != null)
                        //{
                        //    cmd.Parameters.AddWithValue("@vchr_Attachment", arr);
                        //}
                        //else
                        //{
                        //    cmd.Parameters.AddWithValue("@vchr_Attachment", (pictureBox1.BackgroundImage == null) ? (object)DBNull.Value : pictureBox1.BackgroundImage).SqlDbType = SqlDbType.Image;
                        //}


                        string usrLogData = "";
                        if (IsNewPayement == true)
                        {
                            usrLogData = "CASH PAYMENT CREATED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccount + "AMOUNT:" + txtAmount;
                            UserTrackInsert(usrLogData, "CASH PAYMENT", 10);
                        }
                        else
                        {
                            usrLogData = "CASH PAYMENT EDITED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccountid.Trim() + "AMOUNT:" + txtAmount;
                            UserTrackInsert(usrLogData, "CASH PAYMENT", 11);
                        }

                     



                    }
                    else
                    {
                        return Json(new { Result = "Can't allow empty Amount" });
                       
                    }


                }
                else
                {
                    return Json(new { Result = "Can't allow empty Account/Invalid Account" });
                   
                }


            }
            catch { }
            return Json(JsonRequestBehavior.AllowGet);
        }
        //***************END-CASH-PAYMENT-*********************************





        public JsonResult NEWCASHRECEIPT()
        {
            List<CashReceipt> getcashreceipt = new List<CashReceipt>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double _UsrId = l.Usr_key;

            string txtTransNo = "";
            int txtTransNoid = 0;
            IsNewPayement = true;
            DateTime dtpDate = DateTime.Now;
            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
            string a = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WHERE vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + " ";
            int TransNo = 0;
            TransNo = Convert.ToInt32(cmd.ExecuteScalar());
            if (TransNo != 0)
            {
                TransNo += 1;
                txtTransNo = TransNo.ToString();
                txtTransNoid = TransNo;

            }
            else
            {
                txtTransNo = "1";
                txtTransNoid = 1;
            }

            CashReceipt getcancelinvoice = new CashReceipt()
            {
                CashRecTransNo = Convert.ToInt32(txtTransNo),
                CashRecTransNoid = txtTransNoid
            };

            getcashreceipt.Add(getcancelinvoice);


            return Json(getcashreceipt, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DELETECASHRECEIPT(string userinfoid, string transnoid, string Accountid, string accountname, string amount)
        {
            int Key = 0;

            int txtUserInfoid = 0;
            int txtTransNoid = 0;
            string txtAccount = "";
            txtAccount = accountname;
            txtTransNoid = Convert.ToInt32(transnoid);
            string txtAmount = "";
            txtAmount = amount;
            int txtAccountid = 0;
            string txtTransNo = transnoid;
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string UserName = l.Usr_Name;
            int _UsrId = l.Usr_EmpId;
            txtUserInfoid = Convert.ToInt32(userinfoid);
            try
            {
                Key = Convert.ToInt32(txtUserInfoid);

            }
            catch (Exception Exe)
            {
                Key = 0;

            }


            if (Key != 0)
            {
                //if (MessageBox.Show("Are you sure to delete this entry..?", cPublic.ProjectName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                //{

                SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_Key=" + Key + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
                cmd3.ExecuteNonQuery();


                string usrLogData = "";
                usrLogData = "CASH RECEIPT DELETED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccount + "AMOUNT:" + txtAmount;
                UserTrackInsert(usrLogData, "CASH RECEIPT", 0);

                //MessageBox.Show("Deleted Sucessfully...........");

                try
                {
                    DateTime date = DateTime.Now;
                    SqlCommand cmd = new SqlCommand("StProc_INSERT_LogDetails_Mst", sqlcon);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Log_TransNo", txtTransNo);
                    cmd.Parameters.AddWithValue("@Log_DateTime", date);
                    cmd.Parameters.AddWithValue("@Log_Desc", "  TransNo  " + txtTransNo + "  Cash Receipt Deleted  ");
                    cmd.Parameters.AddWithValue("@Log_Form", "CashReceipt");
                    cmd.Parameters.AddWithValue("@Log_User", UserName);
                    cmd.Parameters.AddWithValue("@Log_System", System.Environment.MachineName);
                    cmd.Parameters.AddWithValue("@Log_UserId", _UsrId);
                    cmd.Parameters.AddWithValue("@Log_CmpyId", CompanyId);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                }

            }
            return Json(JsonRequestBehavior.AllowGet);
        }

        public JsonResult USERPRIVILEGEPRINT(string userid, string usrname)
        {

            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            string _UserName = usrname;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string UserName = l.Usr_Name;
            SqlCommand cmd0 = new SqlCommand();
            cmd0.Connection = sqlcon;
            SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
            DataSet ds0 = new DataSet();

            // cmd0.CommandType = CommandType.StoredProcedure;
            //****************************************************
            cmd0.CommandText = "select [UsrSel_UsrId],[UsrSel_MainMenu],[UsrSel_SubMenu],[UsrSel_MenuName],[UsrSel_Select],[Usr_Name],[Usr_grp],[Usr_key] from [Set_UserRightSel] left join [Users] on [UsrSel_UsrId]=[Usr_key] where[UsrSel_Select]='1' and Usr_Name='" + _UserName + "'  ";
            sd0.Fill(ds0, "User");
            //****************************************************
            cmd0.Parameters.Clear();
            cmd0.CommandText = "select [CmpMst_key],[CmpMst_Name],[CmpMst_place] from Company_Mst ";
            sd0.Fill(ds0, "Company");

            //****************************************************
            string filepath = "";
            string NfileName = "";

            NfileName += "_" + "rpt_UserPrivilages";

            string Reportfilepaths = Server.MapPath("~/Reports/");
            ReportDocument reportDocument = new ReportDocument();
            filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserPrivilages.rpt");
            ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserPrivilages.xsd");


            try
            {
                reportDocument.Load(filepath);

                reportDocument.SetDataSource(ds0);
                //Exporting Result Report into .pdf format--------------
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";

                try
                {


                    NfileName = NfileName + ".pdf";
                    pdfFile = pdfFilepath + NfileName;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();


                }



                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }


            }
            catch { }





            return Json(new { Result = "OK" });
        }
        public FileResult GetPDFusrPrivilege()
        {



            string fileName = "";
            fileName += "_" + "rpt_UserPrivilages";

            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CHEQUETRANSACTIONPRINT(string optChqbank, string optChqparty, string optChqbankname, string optChqpartyname)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();

            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string UserName = l.Usr_Name;
            bool rb_bank = false;
            string txt_bankparty = "";
            string NfileName = "";
            if (Convert.ToInt32(optChqbank) == 1)
            {
                rb_bank = true;
                txt_bankparty = optChqbankname;
            }
            else
            {
                txt_bankparty = optChqpartyname;
            }



            SqlCommand cmd = new SqlCommand();
            if (rb_bank == true)
            {
                cmd = new SqlCommand("SELECT AccountHeads_Mst.AhMst_pName As Bank,Ahmst.AhMst_pName As HeadName, Vouchers.vchr_Date, Vouchers.vchr_Narration, Vouchers.vchr_ChqNo,Vouchers.vchr_ChqDate, Vouchers.vchr_Payment, Vouchers.vchr_Receipt, Vouchers.vchr_TransType, Vouchers.vchr_ChqPassed,Vouchers.vchr_TransNo  FROM AccountHeads_Mst with(nolock) INNER JOIN Vouchers ON AccountHeads_Mst.AhMst_Key = Vouchers.vchr_BookId LEFT JOIN AccountHeads_Mst Ahmst ON Vouchers.Vchr_Id=Ahmst.AhMst_Key  WHERE (Vouchers.vchr_TransType = 'Cheque Receive' OR Vouchers.vchr_TransType = 'Cheque Issue') AND AccountHeads_Mst.AhMst_pName='" + txt_bankparty + "' ORDER BY Vouchers.vchr_Key DESC", sqlcon);
            }
            else
            {
                cmd = new SqlCommand("SELECT AccountHeads_Mst.AhMst_pName As HeadName,Ahmst.AhMst_pName As Bank , Vouchers.vchr_Date, Vouchers.vchr_Narration, Vouchers.vchr_ChqNo,Vouchers.vchr_ChqDate, Vouchers.vchr_Payment, Vouchers.vchr_Receipt, Vouchers.vchr_TransType, Vouchers.vchr_ChqPassed,Vouchers.vchr_TransNo FROM AccountHeads_Mst with(nolock) INNER JOIN Vouchers ON AccountHeads_Mst.AhMst_Key = Vouchers.Vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vouchers.vchr_BookId=Ahmst.AhMst_Key  WHERE (Vouchers.vchr_TransType = 'Cheque Receive' OR Vouchers.vchr_TransType = 'Cheque Issue') AND AccountHeads_Mst.AhMst_pName='" + txt_bankparty + "' ORDER BY Vouchers.vchr_Key DESC", sqlcon);
            }
            SqlDataAdapter sd0 = new SqlDataAdapter(cmd);
            DataSet ds = new DataSet();
            sd0.Fill(ds, "Cheque Transaction");
            //if(ds.)
            //if (ds.Tables[0].Rows.Count == 0)
            //{
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd);
                sd0.Fill(ds, "[dbo].[Company_Mst]");
                string filepath = "";
                string Reportfilepaths = Server.MapPath("~/Reports/");
                ReportDocument reportDocument = new ReportDocument();
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_ChequeTransact.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_ChequeTransact.xsd");


                NfileName += "_" + "rpt_ChequeTransact";
                try
                {
                    reportDocument.Load(filepath);

                    reportDocument.SetDataSource(ds);
                    //Exporting Result Report into .pdf format--------------
                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";



                    NfileName = NfileName + ".pdf";
                    pdfFile = pdfFilepath + NfileName;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();


                }





                catch { }
            //}
            //else
            //{
            //    return Json(new { Result = "No Data Found" });
            //}




            return Json(new { Result = "OK" });
        }
        public FileResult GetPDFChqTr()
        {



            string fileName = "";
            fileName += "_" + "rpt_ChequeTransact";
            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }

























        public JsonResult CASHRECEIPTPRINTPRIVEW(string transnoid)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string UserName = l.Usr_Name;
            string txtTransNo = transnoid;
            try
            {

                int TransNo = 0;
                TransNo = Convert.ToInt32(txtTransNo == "" ? "0" : txtTransNo);
                int _vchrKey = 0;
                if (txtTransNo != "")
                {
                    SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                    _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                    if (_vchrKey != 0)
                    {

                        SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                        //  cmd1.e();
                        SqlDataAdapter sd0 = new SqlDataAdapter(cmd1);
                        DataSet ds0 = new DataSet();

                        sd0.Fill(ds0, "CashReceipts");

                        string filepath = "";
                        string Head2 = "";
                        string Head3 = "";
                        //ReportDocument reportDocument = new ReportDocument();
                        Head2 = FirmName;
                        Head3 = CompPlace;
                        DataTable dt = new DataTable();
                        dt.Columns.Add("Company", typeof(string));
                        dt.Columns.Add("place", typeof(string));
                        dt.Rows.Add();

                        dt.Rows[0]["Company"] = Head3;
                        dt.Rows[0]["place"] = Head2;
                        ds0.Tables.Add(dt);
                        //string filepath = "";
                        string NfileName = "";

                        NfileName += "_" + "rpt_CashReceipt";

                        string Reportfilepaths = Server.MapPath("~/Reports/");
                        ReportDocument reportDocument = new ReportDocument();
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CashReceipt.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CashReceipt.xsd");


                        try
                        {
                            reportDocument.Load(filepath);

                            reportDocument.SetDataSource(ds0);
                            //Exporting Result Report into .pdf format--------------
                            string pdfFile = "";
                            string pdfFilepath = Server.MapPath("~/PDFReport/");
                            string TempLog = "";

                            try
                            {


                                NfileName = NfileName + ".pdf";
                                pdfFile = pdfFilepath + NfileName;



                                TempLog = pdfFile;

                                CrystalDecisions.Shared.ExportOptions CrExportOptions;
                                CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                                PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                                CrDiskFileDestinationOptions.DiskFileName = TempLog;
                                CrExportOptions = reportDocument.ExportOptions;
                                CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                                CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                                CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                                CrExportOptions.FormatOptions = CrFormatTypeOptions;
                                reportDocument.Export();


                            }



                            catch (Exception ex)
                            {
                                var x = ex.Message;
                                var y = ex.InnerException;
                            }


                        }
                        catch { }
                    }
                    else
                    {
                        return Json(new { Result = "No Data Found" });
                    }
                }
            }
            catch { }
            return Json(new { Result = "OK" });
        }
        public FileResult GetPDFCashRecprivew()
        {



            string fileName = "";
            fileName += "_" + "rpt_CashReceipt";
            //fileName += Ref_No + "_" + Pat_Name + "_" + CurrentDate + "_PatientPrint";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult SPLRATEPRINTPRIVEW(string OptSplSchm, string OptSplAct, string accid, string schmeid)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int Accid = 0;
            string condtion = "";
            bool OptAccount = false;
            string txtAccountid = accid;
            string txtSchemeid = schmeid;

            if (Convert.ToInt32(OptSplAct) == 1)
            {
                OptAccount = true;
            }

            if (OptAccount == true)
            {
                try
                {
                    Accid = Convert.ToInt32(txtAccountid);
                }
                catch { }
                condtion = " Select SpR.SplR_NRate as SplR_NRate,SpR.SplR_TstID as SplR_TstID,Ahmst.ahmst_pname as AccountName From Special_Rates SpR WITH (NOLOCK)   LEFT JOIN AccountHeads_Mst Ahmst ON  SpR.SplR_ID=Ahmst.AhMst_Key Where SplR_ID=" + Accid;
            }
            else
            {
                try
                {
                    Accid = Convert.ToInt32(txtSchemeid);
                }
                catch { }
                condtion = "Select SpR.SplSchR_NRate as SplR_NRate,SpR.SplSchR_TstID as SplR_TstID,Ahmst.ahmst_pname as AccountName From Special_SchemeRates SpR WITH (NOLOCK)   LEFT JOIN AccountHeads_Mst Ahmst ON  SpR.SplSchR_ID=Ahmst.AhMst_Key Where SplSchR_ID=" + Accid;
            }

            try
            {

                if (Accid != 0)
                {
                    //if (MessageBox.Show("Do you want to see Print Preview?", cPublic.ProjectName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //{
                    SqlCommand cmd0 = new SqlCommand();
                    cmd0.Connection = sqlcon;
                    cmd0.CommandType = CommandType.Text;
                    //****************************************************
                    cmd0.CommandText = ("Select tst.TstMst_Key,tst.TstMst_name,tst.TstMst_Rate,mst.Mstr_Desc as Dept From Test_Mst tst WITH (NOLOCK) LEFT JOIN  Masters mst ON tst.TstMst_DeptId=mst.Mstr_Key Where TstMst_Rate!=0 order by TstMst_name");
                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                    DataSet ds0 = new DataSet();
                    sd0.Fill(ds0, "Test_Mst");
                    //****************************************************
                    cmd0.CommandText = condtion;
                    sd0 = new SqlDataAdapter(cmd0);

                    sd0.Fill(ds0, "SpecialRate");
                    //****************************************************

                    //****************************************************
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [Company_Mst] WITH (NOLOCK)";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    //****************************************************
                    DataTable dt = new DataTable();
                    dt.Columns.Add("AccountName", typeof(string));
                    dt.Rows.Add();
                    dt.Rows[0]["AccountName"] = txtAccountid;

                    ds0.Tables.Add(dt);
                    string filepath = "";
                    string NfileName = "";

                    NfileName += "_" + "rpt_SpRate";

                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    ReportDocument reportDocument = new ReportDocument();
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_SpRate.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_SpRate.xsd");


                    try
                    {
                        reportDocument.Load(filepath);

                        reportDocument.SetDataSource(ds0);
                        //Exporting Result Report into .pdf format--------------
                        string pdfFile = "";
                        string pdfFilepath = Server.MapPath("~/PDFReport/");
                        string TempLog = "";

                        try
                        {


                            NfileName = NfileName + ".pdf";
                            pdfFile = pdfFilepath + NfileName;



                            TempLog = pdfFile;

                            CrystalDecisions.Shared.ExportOptions CrExportOptions;
                            CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                            PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                            CrDiskFileDestinationOptions.DiskFileName = TempLog;
                            CrExportOptions = reportDocument.ExportOptions;
                            CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                            CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                            CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                            CrExportOptions.FormatOptions = CrFormatTypeOptions;
                            reportDocument.Export();


                        }
                        catch { }


                    }
                    catch { }
                }
            }

            catch (Exception ex)
            {
                var x = ex.InnerException;
                var y = ex.Message;

            }
            return Json(new { Result = "OK" });
        }
        public FileResult GetPDFsplrate()
        {



            string fileName = "";
            fileName += "_" + "rpt_SpRate";

            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }







        public JsonResult CASHPAYPRINTPRIVEW(string transnoid)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string UserName = l.Usr_Name;
            //try
            //{
            string txtTransNo = transnoid;

            int TransNo = 0;
            TransNo = Convert.ToInt32(txtTransNo == "" ? "0" : txtTransNo);
            int _vchrKey = 0;
            if (txtTransNo != "")
            {
                SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                if (_vchrKey != 0)
                {

                    SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);

                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd1);
                    DataSet ds0 = new DataSet();

                    sd0.Fill(ds0, "CashPayments");

                    string filepath = "";
                    string Head2 = "";
                    string Head3 = "";
                    //ReportDocument reportDocument = new ReportDocument();
                    Head2 = FirmName;
                    Head3 = CompPlace;
                    DataTable dt = new DataTable();
                    dt.Columns.Add("Company", typeof(string));
                    dt.Columns.Add("place", typeof(string));
                    dt.Rows.Add();

                    dt.Rows[0]["Company"] = Head3;
                    dt.Rows[0]["place"] = Head2;
                    ds0.Tables.Add(dt);
                    string NfileName = "";

                    NfileName += "_" + "rpt_CashPayment";

                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    ReportDocument reportDocument = new ReportDocument();
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CashPayment.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_CashPayment.xsd");


                    try
                    {
                        reportDocument.Load(filepath);

                        reportDocument.SetDataSource(ds0);
                        //Exporting Result Report into .pdf format--------------
                        string pdfFile = "";
                        string pdfFilepath = Server.MapPath("~/PDFReport/");
                        string TempLog = "";

                        try
                        {


                            NfileName = NfileName + ".pdf";
                            pdfFile = pdfFilepath + NfileName;



                            TempLog = pdfFile;

                            CrystalDecisions.Shared.ExportOptions CrExportOptions;
                            CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                            PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                            CrDiskFileDestinationOptions.DiskFileName = TempLog;
                            CrExportOptions = reportDocument.ExportOptions;
                            CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                            CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                            CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                            CrExportOptions.FormatOptions = CrFormatTypeOptions;
                            reportDocument.Export();


                        }



                        catch { }


                    }
                    catch { }







                }
                else
                {
                    return Json(new { Result = "No Data Found" });
                    //MessageBox.Show("No Data Found");
                }

            }
            return Json(new { Result = "OK" });
            //else
            //{
            //    MessageBox.Show("No Data Found");
            //}
        }
        public FileResult GetPDFCashpayprint()
        {



            string fileName = "";
            fileName += "_" + "rpt_CashPayment";

            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult GETDAYBOOKTRANSNO()
        {

            List<DayBookEntry> getdaybook = new List<DayBookEntry>();
            _IsNewDayBookEntry = true;
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            string txtTransNo = "";
            int txtTransNoid = 0;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Day book' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND vchr_BrId=" + CompanyId + "  ", sqlcon);

            int TransNo = 0;
            TransNo = Convert.ToInt32(cmd.ExecuteScalar());
            if (TransNo != 0)
            {
                TransNo += 1;
                txtTransNo = TransNo.ToString();
                txtTransNoid = TransNo;

            }
            else
            {
                txtTransNo = "1";
                txtTransNoid = 1;
            }
            DayBookEntry getdb = new DayBookEntry()
            {
       DbTrasno= txtTransNo,
                DbTrasnoid= txtTransNoid
            };
            getdaybook.Add(getdb);
            return Json(getdaybook,JsonRequestBehavior.AllowGet);
        }

        public JsonResult DAYBOOKAUTOCOMPLETE()
        {
            List<DayBookEntry> getaccounthead = new List<DayBookEntry>();
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            string AccountHeads = "";
            SqlCommand cmd = new SqlCommand("select AhMst_pName from AccountHeads_Mst WITH (NOLOCK) where AhMst_IsActive=1 and AhMst_Type!='Patient'", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            cmd.ExecuteNonQuery();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    AccountHeads = dr["AhMst_pName"].ToString();
                }
                DayBookEntry getacc = new DayBookEntry()
                {
                    AccountHeads= AccountHeads

                };

                getaccounthead.Add(getacc);


            }



                    return Json(getaccounthead,JsonRequestBehavior.AllowGet);
        }
        public JsonResult GETMAINTABLESPLRATE(string accountid, string txtdiscper)
        {
            List<SETSPLRATES> getsplrate = new List<SETSPLRATES>();

            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            float SpRate = 0;
            float Rate = 0;
            int Disper = 0;
            double TstMst_Key = 0;
            string TstMst_name = "";
            string TstMst_Rate = "";
            int txtAccountid = 0;
            string SplR_DisPer = "";
            string SplR_NRate = "";
            string rates = "";
            string discount = "";
            string spclrate = "";
            //string olddata = "";
            string txtDiscPer = txtdiscper;
            txtAccountid = Convert.ToInt32(accountid);
            //var testlist = (from c in db.Test_Mst where c.TstMst_Rate != 0 orderby c.TstMst_name  select c).ToList();
            SqlCommand cmd = new SqlCommand("Select TstMst_Key,TstMst_name,TstMst_Rate From Test_Mst WITH (NOLOCK) Where TstMst_Rate!=0 order by TstMst_name", sqlcon);

            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            cmd.ExecuteNonQuery();
            //Select TstMst_Key,TstMst_name,TstMst_Rate From Test_Mst WITH (NOLOCK) 
            //Where TstMst_Rate!=0 order by TstMst_name
            var tstdls = db.Test_Mst.Where(tst => tst.TstMst_Rate != 0).Select(t => new { t.TstMst_Key, t.TstMst_name, t.TstMst_Rate }).OrderBy(t => t.TstMst_name);
            if (dt.Rows.Count > 0)
            {
                //    if (testlist.Count!=0)
                //{
                //foreach (var tst in testlist)
                //{

                //    TstMst_Key = tst.TstMst_Key;
                //    TstMst_name = tst.TstMst_name;
                //    TstMst_Rate = tst.TstMst_Rate;

                //    var splist = (from c in db.Special_Rates where c.SplR_ID == txtAccountid && c.SplR_TstID == TstMst_Key select c).ToList();

                foreach (DataRow dr in dt.Rows)
                {
                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());
                    //grdSetSpcRate[1, Row].Value = dr["TstMst_Key"].ToString();
                    TstMst_name = dr["TstMst_name"].ToString();
                    TstMst_Rate = dr["TstMst_Rate"].ToString();

                    SqlCommand cmd1 = new SqlCommand("Select SplR_DisPer,SplR_NRate from Special_Rates WITH (NOLOCK) where SplR_ID= '" + txtAccountid + "' and  SplR_TstID='" + TstMst_Key + "'", sqlcon);
                    //   string a = "Select * from Special_Rates where SplR_ID= '" + txtAccount.Tag + "' and  SplR_TstID='" + grdSetSpcRate[1, Row].Value + "'";
                    SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                    DataTable dt1 = new DataTable();
                    sda1.Fill(dt1);
                    if (dt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in dt1.Rows)
                        {

                            //if (splist.Count!=0)
                            //{

                            //    foreach (var spllist in splist)
                            //    {
                            //        SplR_DisPer = Convert.ToString(spllist.SplR_DisPer);
                            //        SplR_NRate = Convert.ToString(spllist.SplR_NRate);
                            SplR_DisPer = dr1["SplR_DisPer"].ToString();
                            SplR_NRate = dr1["SplR_NRate"].ToString();
                            //rates = 0;
                            //discount = 0;
                            //spclrate = 0;
                            try
                            {
                                rates = SplR_DisPer;
                            }
                            catch { }
                            try
                            {
                                discount = (SplR_DisPer);
                            }
                            catch { }
                            try
                            {
                                spclrate = SplR_NRate;
                            }
                            catch { }

                            if (olddata == "")
                            {

                                olddata = "\t" + TstMst_name + "-" + rates + "-" + discount + "-" + spclrate + "";
                            }
                            else
                            {
                                olddata = olddata + "\r\n\t" + TstMst_name + "-" + rates + "-" + discount + "-" + spclrate + "";
                            }
                        }
                    }
                    else
                    {
                        SplR_DisPer = "";
                        SplR_NRate = "";
                    }


                    //if (dt1.Rows.Count == 0)
                    //{
                    //    if (txtDiscPer != "")
                    //    {
                    //        SplR_DisPer = txtDiscPer;
                    //        Rate = Convert.ToInt32(SplR_DisPer);
                    //        Disper = Convert.ToInt32(SplR_DisPer);
                    //        SpRate = (Rate - (Rate * Disper / 100));
                    //        SplR_NRate = Convert.ToString(SpRate);
                    //    }




                    SETSPLRATES getspl = new SETSPLRATES()
                    {
                        TstMst_Key = Convert.ToInt32(TstMst_Key),
                        TstName = TstMst_name,
                        Rate = Convert.ToString(TstMst_Rate),
                        Disc = SplR_DisPer,
                        SpRate = SplR_NRate
                    };

                    getsplrate.Add(getspl);


                }
            }
            return Json(getsplrate, JsonRequestBehavior.AllowGet);
        }







        public JsonResult GETMAINTABLESPLRATESCHME(string Spltxtid, string txtdiscper)
        {

            List<SETSPLRATES> getsplrate = new List<SETSPLRATES>();

            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlCommand cmd = new SqlCommand("Select TstMst_Key,TstMst_name,TstMst_Rate From Test_Mst WITH (NOLOCK) Where TstMst_Rate!=0 order by TstMst_name", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            cmd.ExecuteNonQuery();

            //float SpRate = 0;
            //float Rate = 0;
            //int Disper = 0;
            int TstMst_Key = 0;
            string TstMst_name = "";
            string TstMst_Rate = "";
            //int txtAccountid = 0;
            //string SplR_DisPer = "";
            //string SplR_NRate = "";
            string rates = "";
            string discount = "";
            string spclrate = "";
            //string olddata = "";
            string txtDiscPer = txtdiscper;
            int txtSchemeid = Convert.ToInt32(Spltxtid);
            string SplSchR_DisPer = "";
            string SplSchR_NRate = "";


            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {


                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());

                    TstMst_name = dr["TstMst_name"].ToString();
                    TstMst_Rate = dr["TstMst_Rate"].ToString();
                    SqlCommand cmd1 = new SqlCommand("Select * from Special_SchemeRates WITH (NOLOCK) where SplSchR_ID= '" + txtSchemeid + "' and SplSchR_TstID='" + TstMst_Key + "'", sqlcon);
                    //string a = "Select * from Special_SchemeRates WITH (NOLOCK) where SplSchR_ID= '" + txtSchemeid + "' and SplSchR_TstID='" + TstMst_Key + "'";
                    SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                    DataTable dt2 = new DataTable();
                    sda1.Fill(dt2);
                    if (dt2.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in dt2.Rows)
                        {
                            SplSchR_DisPer = dr1["SplSchR_DisPer"].ToString();
                            SplSchR_NRate = dr1["SplSchR_NRate"].ToString();
                            try
                            {
                                rates = SplSchR_DisPer;
                            }
                            catch { }
                            try
                            {
                                discount = SplSchR_DisPer;
                            }
                            catch { }
                            try
                            {
                                spclrate = SplSchR_NRate;
                            }
                            catch { }

                            if (olddata == "")
                            {

                                olddata = "\t" + TstMst_name + "-" + rates + "-" + discount + "-" + spclrate + "";
                            }
                            else
                            {
                                olddata = olddata + "\r\n\t" + TstMst_name + "-" + rates + "-" + discount + "-" + spclrate + "";
                            }
                        }
                    }
                    else
                    {
                        SplSchR_DisPer = "";
                        SplSchR_NRate = "";
                    }

                    //if (dt1.Rows.Count == 0)
                    //{
                    //    if (txtDiscPer != "")
                    //    {
                    //        SplSchR_DisPer = txtDiscPer;
                    //        Rate = Convert.ToInt32(TstMst_Rate);
                    //        Disper = Convert.ToInt32(txtDiscPer);
                    //        SpRate = (Rate - (Rate * Disper / 100));

                    //    }
                    //}

                    SETSPLRATES getspl = new SETSPLRATES()
                    {
                        TstMst_Key = TstMst_Key,
                        TstName = TstMst_name,
                        Rate = TstMst_Rate,
                        Disc = SplSchR_DisPer,
                        SpRate = SplSchR_NRate
                    };

                    getsplrate.Add(getspl);




                }
            }


            return Json(getsplrate, JsonRequestBehavior.AllowGet);
            //grdSetSpcRate.DataSource = dt;


        }
        public JsonResult GETMAINDEPARTMENTATBLE(string selectboxdept, string deptnameid, string optSetOrders)
        {
            List<SetTestOrder> getsettestorder = new List<SetTestOrder>();
            string OrderBy = "";
            bool optSetOrder = false;
            string cmbTestType = "";
            cmbTestType = selectboxdept;
            int TstMst_Key = 0;
            string TstMst_name = "";
            string TstMst_Rate = "";
            string TstMst_OrderBy = "";
            int txtDepartmentid = Convert.ToInt32(deptnameid);
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlCommand sqlcmd0 = new SqlCommand();
            sqlcmd0.Connection = sqlcon;
            sqlcmd0.CommandType = CommandType.Text;

            if (Convert.ToInt32(optSetOrders) == 1)
            {
                optSetOrder = true;
            }

            if (optSetOrder == true)
            {
                OrderBy = "TstMst_OrderBy,TstMst_name";
            }
            else
            {
                OrderBy = "TstMst_name";
            }

            string TestCondtion = "";
            if (cmbTestType == "Prized Tests" || cmbTestType == "Non Prized Tests")
                if (cmbTestType == "Prized Tests")
                {
                    TestCondtion = " AND  TstMst_Rate>0 ";
                }
                else
                {
                    TestCondtion = " AND TstMst_Rate=0 ";
                }

            if (TestCondtion == "")
            {
                sqlcmd0.CommandText = "SELECT  '' AS SlNo,dbo.Test_Mst.TstMst_Key, dbo.Test_Mst.TstMst_name, dbo.Test_Mst.TstMst_Rate, dbo.Test_Mst.TstMst_OrderBy" + Environment.NewLine
                                      + " FROM        dbo.Test_Mst WITH (NOLOCK)" + Environment.NewLine
                                      + "WHERE (dbo.Test_Mst.TstMst_DeptId = " + txtDepartmentid + ") Order By " + OrderBy;
            }
            else
            {
                sqlcmd0.CommandText = "SELECT  '' AS SlNo,dbo.Test_Mst.TstMst_Key, dbo.Test_Mst.TstMst_name, dbo.Test_Mst.TstMst_Rate, dbo.Test_Mst.TstMst_OrderBy" + Environment.NewLine
                                    + " FROM        dbo.Test_Mst WITH (NOLOCK)" + Environment.NewLine
                                    + "WHERE (dbo.Test_Mst.TstMst_DeptId = " + txtDepartmentid + ") " + TestCondtion + " Order By " + OrderBy;

            }

            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
            DataTable dt0 = new DataTable();
            sd0.Fill(dt0);
            //*******************

            if (dt0.Rows.Count > 0)
            {

                foreach (DataRow dr in dt0.Rows)
                {

                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());
                    TstMst_name = dr["TstMst_name"].ToString();
                    TstMst_Rate = dr["TstMst_Rate"].ToString();
                    TstMst_OrderBy = (dr["TstMst_OrderBy"].ToString());

                    SetTestOrder getdpt = new SetTestOrder()
                    {

                        TstMst_Key = TstMst_Key,
                        TstMst_name = TstMst_name,
                        TstMst_Rate = TstMst_Rate,

                        TstMst_OrderBy = (TstMst_OrderBy)


                    };
                    getsettestorder.Add(getdpt);
                    //grdSetTestOrder["TstMst_Rate", Row].Value = dr["TstMst_Rate"];
                    //grdSetTestOrder["TstMst_OrderBy", Row].Value = dr["TstMst_OrderBy"];

                }

            }
            return Json(getsettestorder, JsonRequestBehavior.AllowGet);
        }

        public JsonResult FILLUSERSETTING(string usrname, string userid)
        {
            List<USERPRIVILEGE> getuserlist = new List<USERPRIVILEGE>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            bool chkselect = false;
            string Usr_SubMenu = "";
            string Usr_MainMenu = "";
            string Usr_MenuName = "";
            string Usr_Select = "";
            string Usr_Orderby = "";
            string Usr_Admin = "";
            string Usr_Super = "";
            string Usr_Staff = "";
            string pinkcolor = "";
            string Usr_MainMenu1 = "";
            string _vtag = userid;
            SqlCommand sqlCmd2 = new SqlCommand();
            sqlCmd2.Connection = sqlcon;
            sqlCmd2.CommandType = CommandType.Text;
            sqlCmd2.CommandText = "SELECT''AS SlNo,Usr_MainMenu,Usr_SubMenu,Usr_MenuName,Usr_Select,Usr_Orderby,Usr_Admin,Usr_Super,Usr_Staff FROM Set_UserRights WITH (NOLOCK) ORDER BY Usr_Orderby";
            //sqlCmd2.CommandText = "SELECT''AS SlNo,Usr_MainMenu,Usr_SubMenu,Usr_MenuName,Usr_Select,Usr_Orderby,Usr_Admin,Usr_Super,Usr_Staff FROM Set_UserRights WITH (NOLOCK) ORDER BY Usr_Orderby,Usr_Key";
            SqlDataAdapter sd2 = new SqlDataAdapter(sqlCmd2);
            DataTable dt2 = new DataTable();
            sd2.Fill(dt2);
            if (dt2.Rows.Count > 0)
            {
                foreach (DataRow dr in dt2.Rows)
                {

                    Boolean IsSubMenu = false;
                    try
                    {
                        Boolean tempSub = Convert.ToBoolean(dr["Usr_Select"]);
                        IsSubMenu = tempSub;
                    }
                    catch
                    {
                        IsSubMenu = false;
                    }
                    if (IsSubMenu)
                    {
                        pinkcolor = "1";
                        //Usr_SubMenu=
                        //Usr_SubMenu=
                        //grdSelection.Rows[Row].Cells["Usr_SubMenu"].Style.BackColor = Color.LightPink;
                        //grdSelection.Rows[Row].Cells["Usr_Select"].Style.BackColor = Color.LightPink;
                    }
                    else
                    {
                        pinkcolor = "";
                    }
                    string MainMenu = "";
                    MainMenu = dr["Usr_SubMenu"].ToString();


                    if (MainMenu == "")
                    {

                        Usr_MainMenu = dr["Usr_MainMenu"].ToString();
                        Usr_MainMenu1 = dr["Usr_MainMenu"].ToString();
                        //grdSelection["Usr_MainMenu", Row].Value = dr["Usr_MainMenu"];
                        //grdSelection.Rows[Row].DefaultCellStyle.BackColor = SystemColors.ActiveCaption;
                        //grdSelection.Rows[Row].DefaultCellStyle.ForeColor = Color.White;
                        // grdSelection.Rows[Row].DefaultCellStyle.SelectionBackColor = Color.LightGray;

                    }
                    else
                    {
                        Usr_MainMenu = "";
                    }


                    Usr_SubMenu = dr["Usr_SubMenu"].ToString();
                    Usr_MenuName = dr["Usr_MenuName"].ToString();
                    Usr_Select = dr["Usr_Select"].ToString();
                    Usr_Orderby = dr["Usr_Orderby"].ToString();
                    Usr_Admin = dr["Usr_Admin"].ToString();
                    Usr_Super = dr["Usr_Super"].ToString();
                    Usr_Staff = dr["Usr_Staff"].ToString();
                    if (Usr_MenuName != "")
                    {
                        SqlCommand sqlCmd4 = new SqlCommand();
                        sqlCmd4.Connection = sqlcon;
                        sqlCmd4.CommandType = CommandType.Text;
                        sqlCmd4.CommandText = "SELECT UsrSel_MenuName FROM Set_UserRightSel WITH (NOLOCK) where UsrSel_MenuName='" + Usr_MenuName + "' AND UsrSel_UsrId=" + _vtag + " AND UsrSel_Select='True' ";
                        SqlDataAdapter sd4 = new SqlDataAdapter(sqlCmd4);
                        DataTable dt4 = new DataTable();
                        sd4.Fill(dt4);
                        // if (dt4.Rows.Count != 0 || UserGrp == "Administrator")
                        if (dt4.Rows.Count != 0)
                        {
                            chkselect = true;
                        }
                        else
                        {
                            chkselect = false;
                        }
                    }


                    USERPRIVILEGE users = new USERPRIVILEGE()
                    {
                        Usr_SubMenu = Usr_SubMenu,
                        Usr_MenuName = Usr_MenuName,
                        Usr_Select = Usr_Select,
                        Usr_Orderby = Usr_Orderby,
                        Usr_Admin = Usr_Admin,
                        Usr_Super = Usr_Super,
                        Usr_Staff = Usr_Staff,
                        Usr_MainMenu = Usr_MainMenu,
                        chkselect = chkselect,
                        pinkcolor = pinkcolor,
                        Usr_MainMenu1 = Usr_MainMenu1

                    };
                    getuserlist.Add(users);




                }
            }


            return Json(getuserlist, JsonRequestBehavior.AllowGet);
        }


        public JsonResult CHECKPRIUSERNAME(string usrname)
        {
            List<USERPRIVILEGE> getuserlist = new List<USERPRIVILEGE>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            string _UserName = usrname;
            string UserGrp = "";
            int txtUserNameid = 0;
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlCommand sqlCmd1 = new SqlCommand();
            sqlCmd1.Connection = sqlcon;
            sqlCmd1.CommandType = CommandType.Text;
            sqlCmd1.CommandText = "SELECT Usr_Name,Usr_grp,Usr_key FROM Users WITH (NOLOCK) where Usr_Name='" + _UserName + "'";
            SqlDataAdapter sd1 = new SqlDataAdapter(sqlCmd1);
            DataTable dt1 = new DataTable();
            sd1.Fill(dt1);
            if (dt1.Rows.Count == 0)
            {
                return Json(new { Result = "Invalid Username" });



            }
            else
            {
                UserGrp = "";
                UserGrp = dt1.Rows[0]["Usr_grp"].ToString();

                txtUserNameid = Convert.ToInt32(dt1.Rows[0]["Usr_key"]);

                USERPRIVILEGE user = new USERPRIVILEGE()
                {
                    UserGrp = UserGrp,
                    txtUserNameid = txtUserNameid

                };
                getuserlist.Add(user);
            }

            return Json(getuserlist, JsonRequestBehavior.AllowGet);
        }





//**********************SAVE-USER-PRIVILLAGE**********************************************
        public JsonResult SAVEUSERPRIVILEGE(List<USERPRIVILEGE> usrpriarray, string userid)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            string _vtag = userid;
            SqlCommand sqlCmd4 = new SqlCommand();
            sqlCmd4.Connection = sqlcon;
            sqlCmd4.CommandType = CommandType.Text;
            sqlCmd4.CommandText = "DELETE FROM Set_UserRightSel WHERE UsrSel_UsrId=" + _vtag + "";
            sqlCmd4.Parameters.Clear();
            sqlCmd4.ExecuteNonQuery();

            SqlCommand sqlcmd3 = new SqlCommand();
            sqlcmd3.Connection = sqlcon;
            sqlcmd3.CommandType = CommandType.StoredProcedure;
            sqlcmd3.CommandText = "StProc_INSERT_USER_RIGHTS";
            bool _TmpIfSelected = false;
            try
            {
                if (usrpriarray != null)
                {

                    foreach (USERPRIVILEGE pi1 in usrpriarray)
                    {
                        try
                        {
                            _TmpIfSelected = pi1.chkselect;
                            //_TmpIfSelected = Convert.ToBoolean(grdSelection["Usr_Select", i].Value);
                        }
                        catch
                        {
                            _TmpIfSelected = false;
                        }
                        //var key = db.Set_UserRightSel.Max(c => c.UsrSel_Key);
                        //Set_UserRightSel usrsell = new Set_UserRightSel();

                        //usrsell.UsrSel_Key = key;
                        //usrsell.UsrSel_UsrId = Convert.ToInt32(_vtag);
                        //usrsell.UsrSel_MainMenu = Convert.ToString(pi1.Usr_MainMenu);
                        //usrsell.UsrSel_SubMenu = Convert.ToString(pi1.Usr_SubMenu);
                        //usrsell.UsrSel_MenuName = Convert.ToString(pi1.Usr_MenuName);
                        //db.Set_UserRightSel.Add(usrsell);
                        //db.SaveChanges();
                        sqlcmd3.Parameters.Clear();
                        sqlcmd3.Parameters.AddWithValue("@UsrSel_UsrId", Convert.ToInt32(_vtag));
                        sqlcmd3.Parameters.AddWithValue("@UsrSel_MainMenu", Convert.ToString(pi1.Usr_MainMenu));
                        sqlcmd3.Parameters.AddWithValue("@UsrSel_SubMenu", Convert.ToString(pi1.Usr_SubMenu));
                        sqlcmd3.Parameters.AddWithValue("@UsrSel_MenuName", Convert.ToString(pi1.Usr_MenuName));

                        sqlcmd3.Parameters.AddWithValue("@UsrSel_Select", _TmpIfSelected);

                        sqlcmd3.ExecuteNonQuery();

                    }
                    //db.SaveChanges();

                }


            }
            catch (Exception ex)
            {
                var x = ex.InnerException;
                var y = ex.Message;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        //***********************END-SAVE-USER-PRIVILLAGE*************************************



        //***************SAVE-SET-TEST-ORDER******************************************
        public JsonResult SAVESETORDERTEST(List<SetTestOrder> dptarray)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            List<SetTestOrder> getsettestorder = new List<SetTestOrder>();
            SqlCommand sqlcmd1 = new SqlCommand();
            sqlcmd1.Connection = sqlcon;
            sqlcmd1.CommandType = CommandType.StoredProcedure;
            sqlcmd1.CommandText = "StProc_SET_TEST_ORDER";

            try
            {
                //SetTestOrder dptarray1 = new SetTestOrder();
                if (dptarray != null)
                {

                    foreach (SetTestOrder dpt1 in dptarray)
                    {
                        sqlcmd1.Parameters.Clear();
                    
                        {

                           
                            sqlcmd1.Parameters.AddWithValue("TstMst_Key", Convert.ToInt32(dpt1.TstMst_Key));
                            try
                            {
                                if (dpt1.TstMst_OrderBy != null)
                                {
                                    sqlcmd1.Parameters.AddWithValue("TstMst_OrderBy", (dpt1.TstMst_OrderBy));
                                }
                                else
                                {
                                    sqlcmd1.Parameters.AddWithValue("TstMst_OrderBy", DBNull.Value);
                                }
                            }
                            catch { sqlcmd1.Parameters.AddWithValue("TstMst_OrderBy", DBNull.Value); }

                            sqlcmd1.ExecuteNonQuery();
                        }

                    }

                }

            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
//********************END-SAVE-SET-TEST-ORDER*****************************************




        public JsonResult FILLSELECTTESTOPTION(string selectedValue, string deptid)
        {
            List<SetTestOrder> getsettestorder = new List<SetTestOrder>();
            string cmbTestType = "";
            cmbTestType = selectedValue;
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtDepartmentid = deptid;
            int DepIt = 0;
            int TstMst_Key = 0;
            string TstMst_name = "";
            string TstMst_Rate = "";
            string TstMst_OrderBy = "";
            try
            {
                DepIt = Convert.ToInt32(txtDepartmentid);
            }
            catch { }
            //if (DepIt == 0)
            //{
            //    return;
            //}
            SqlCommand sqlcmd0 = new SqlCommand();
            sqlcmd0.Connection = sqlcon;
            sqlcmd0.CommandType = CommandType.Text;
            string TestCondtion = "";
            if (cmbTestType == "Prized Tests" || cmbTestType == "Non Prized Tests")
            {
                if (cmbTestType == "Prized Tests")
                {
                    TestCondtion = " AND  TstMst_Rate>0 ";
                }
                else
                {
                    TestCondtion = " AND TstMst_Rate=0 ";
                }
            }
            if (TestCondtion == "")
            {
                sqlcmd0.CommandText = "SELECT  '' AS SlNo,dbo.Test_Mst.TstMst_Key, dbo.Test_Mst.TstMst_name, dbo.Test_Mst.TstMst_Rate, dbo.Test_Mst.TstMst_OrderBy" + Environment.NewLine
                                      + " FROM        dbo.Test_Mst WITH (NOLOCK)" + Environment.NewLine
                                      + "WHERE (dbo.Test_Mst.TstMst_DeptId = " + txtDepartmentid + ") Order By TstMst_OrderBy,TstMst_name ";
            }
            else
            {
                sqlcmd0.CommandText = "SELECT  '' AS SlNo,dbo.Test_Mst.TstMst_Key, dbo.Test_Mst.TstMst_name, dbo.Test_Mst.TstMst_Rate, dbo.Test_Mst.TstMst_OrderBy" + Environment.NewLine
                                    + " FROM        dbo.Test_Mst WITH (NOLOCK)" + Environment.NewLine
                                    + "WHERE (dbo.Test_Mst.TstMst_DeptId = " + txtDepartmentid + ") " + TestCondtion + " Order By TstMst_OrderBy,TstMst_name ";

            }

            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
            DataTable dt0 = new DataTable();
            sd0.Fill(dt0);
            //*******************

            if (dt0.Rows.Count > 0)
            {

                foreach (DataRow dr in dt0.Rows)
                {

                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());
                    TstMst_name = dr["TstMst_name"].ToString();
                    TstMst_Rate = dr["TstMst_Rate"].ToString();
                    TstMst_OrderBy = (dr["TstMst_OrderBy"].ToString());

                    SetTestOrder getdpt = new SetTestOrder()
                    {

                        TstMst_Key = TstMst_Key,
                        TstMst_name = TstMst_name,
                        TstMst_Rate = TstMst_Rate,

                        TstMst_OrderBy = (TstMst_OrderBy)


                    };
                    getsettestorder.Add(getdpt);

                }
            }
            return Json(getsettestorder, JsonRequestBehavior.AllowGet);
        }

        //else
        //{
        //    txtDepartment.Text = "";
        //    txtDepartment.Tag = 0;
        //}





        public JsonResult GETMAINTABLESPLIMPORT(string SplImport, string txtdiscper)
        {
            List<SETSPLRATES> getsplrate = new List<SETSPLRATES>();

            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;

            //float SpRate = 0;
            //float Rate = 0;
            //int Disper = 0;
            int TstMst_Key = 0;
            string TstMst_name = "";
            string TstMst_Rate = "";
            //int txtAccountid = 0;
            //string SplR_DisPer = "";
            //string SplR_NRate = "";
            //string rates = "";
            //string discount = "";
            //string spclrate = "";
            //string olddata = "";
            string txtDiscPer = txtdiscper;
            int txtImportid = Convert.ToInt32(SplImport);
            string SplSchR_DisPer = "";
            string SplSchR_NRate = "";

            SqlCommand cmd = new SqlCommand("Select TstMst_Key,TstMst_name,TstMst_Rate From Test_Mst WITH (NOLOCK) Where TstMst_Rate!=0 order by TstMst_name", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            cmd.ExecuteNonQuery();


            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {

                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());

                    TstMst_name = dr["TstMst_name"].ToString();
                    TstMst_Rate = dr["TstMst_Rate"].ToString();

                    SqlCommand cmd1 = new SqlCommand("Select * from Special_SchemeRates WITH (NOLOCK) where SplSchR_ID= '" + txtImportid + "' and SplSchR_TstID='" + TstMst_Key + "'", sqlcon);
                    //string a = "Select * from Special_SchemeRates WITH (NOLOCK) where SplSchR_ID= '" + txtImportid + "' and SplSchR_TstID='" + TstMst_Key + "'";
                    SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                    DataTable dt1 = new DataTable();
                    sda1.Fill(dt1);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in dt1.Rows)
                        {
                            SplSchR_DisPer = dr1["SplSchR_DisPer"].ToString();
                            SplSchR_NRate = dr1["SplSchR_NRate"].ToString();
                        }
                    }
                    else
                    {
                        SplSchR_DisPer = "";
                        SplSchR_NRate = "";
                    }

                    SETSPLRATES getspl = new SETSPLRATES()
                    {
                        TstMst_Key = TstMst_Key,
                        TstName = TstMst_name,
                        Rate = TstMst_Rate,
                        Disc = SplSchR_DisPer,
                        SpRate = SplSchR_NRate
                    };

                    getsplrate.Add(getspl);


                }
            }
            return Json(getsplrate, JsonRequestBehavior.AllowGet);
        }
        public JsonResult SAVESPLRATE(List<SETSPLRATES> splarray, string accountid, string schmeid, string SplImportid, string OptSplAct, string OptSplSchm)
        {
            List<SETSPLRATES> getsplrate = new List<SETSPLRATES>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtSchemeid = schmeid;
            int _AhmstKey = 0;
            float SpRate = 0;
            string SplTYpe = "";
            int SplID = 0;
            int ExsisitFlag = 0;
            bool OptAccount = false;
            bool optscheme = false;
            string newdata = "";
            string UserName = l.Usr_Name;
            int _UsrId = l.Usr_EmpId;
            //string olddata = "";


            string txtAccountid = accountid;
            if (Convert.ToInt32(OptSplAct) == 1)
            {
                OptAccount = true;
            }
            if (Convert.ToInt32(OptSplSchm) == 1)
            {
                optscheme = true;
            }
            // int SaveDataFlag = 0;

            if (OptAccount == true)
            {
                SqlCommand cmd;
                try
                {
                    _AhmstKey = Convert.ToInt32(txtAccountid);
                }
                catch (Exception ex)
                {
                    _AhmstKey = 0;
                }
                if (_AhmstKey == 0)
                {
                    return Json(new { Result = "Empty/Invalid Entry Of Account Name" });

                   
                }
                try
                {
                    cmd = new SqlCommand("SELECT ISNULL(AhMst_SchemeId,0) FROM AccountHeads_Mst WHERE AhMst_Key=" + _AhmstKey + "", sqlcon);
                    ExsisitFlag = Convert.ToInt32(cmd.ExecuteScalar());
                }
                catch { }
                if (ExsisitFlag > 0)
                {
                    return Json(new { Result = "This Account is Already Set Scheme Rates,Are You Sure to Delete Scheme Rates & Continue With This SpecialRate?" });
                    //return Json(new { Result = "This Account is Already Set Scheme Rates,Are You Sure to Delete Scheme Rates & Continue With This SpecialRate?" });

                    //if (MessageBox.Show("This Account is Already Set Scheme Rates,Are You Sure to Delete Scheme Rates & Continue With This SpecialRate?", cPublic.ProjectName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //{

                    //}
                    //else
                    //{
                    //        cmd = new SqlCommand("UPDATE AccountHeads_Mst SET AhMst_SchemeId=0 WHERE AhMst_Key=" + _AhmstKey + "", sqlcon);
                    //        cmd.ExecuteNonQuery();
                    //    }
                }
                SplTYpe = "Acc";
                SplID = _AhmstKey;
                SqlCommand cmd1 = new SqlCommand("delete from Special_Rates where SplR_ID='" + SplID + "'", sqlcon);
                cmd1.ExecuteNonQuery();
            }
            else if (optscheme == true)
            {
                try
                {
                    _AhmstKey = Convert.ToInt32(txtSchemeid);
                }
                catch (Exception ex)
                {
                    _AhmstKey = 0;
                }
                if (_AhmstKey == 0)
                {
                    return Json(new { Result = "Empty/Invalid Entry Of Scheme" });
                    //MessageBox.Show("Empty/Invalid Entry Of Scheme", cPublic.ProjectName);
                    //txtScheme.Focus();
                    //return;
                }
                SplTYpe = "Sch";
                SplID = _AhmstKey;
                SqlCommand cmd1 = new SqlCommand("delete from Special_SchemeRates where SplSchR_ID='" + SplID + "'", sqlcon);
                cmd1.ExecuteNonQuery();
            }
            try
            {

                float Ndisc = 0;
                float ratess = 0;
                float discountt = 0;
                float spclratee = 0;
                SETSPLRATES spl = new SETSPLRATES();
                if (splarray != null)
                {

                    foreach (SETSPLRATES spl1 in splarray)
                    {

                        Ndisc = 0;
                        ratess = 0;
                        discountt = 0;
                        spclratee = 0;
                        try
                        {
                            SpRate = spl1.splrate;
                            //SpRate = float.Parse(grdSetSpcRate[5, i].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            SpRate = 0;
                        }
                        try
                        {
                            Ndisc = spl1.spldisc;
                            //Ndisc = float.Parse(grdSetSpcRate[4, i].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            Ndisc = 0;
                        }

                        //if (SpRate != 0)
                        if (Ndisc != 0)

                        {
                            SqlCommand cmd = new SqlCommand("StProc_INSERT_SPECIALRATE", sqlcon);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@SplR_ID", SqlDbType.Int).Value = SplID;
                            cmd.Parameters.Add("@SplR_NRate", SqlDbType.Float).Value = SpRate;
                            cmd.Parameters.Add("@SplR_TstID", SqlDbType.Int).Value = spl1.spltestid;
                            try
                            {
                                cmd.Parameters.Add("@SplR_DisPer", SqlDbType.Float).Value = spl1.spldisc;
                            }
                            catch
                            {
                                cmd.Parameters.Add("@SplR_DisPer", SqlDbType.Float).Value = 0;
                            }
                            cmd.Parameters.Add("@SpecialType", SqlDbType.NVarChar).Value = SplTYpe;

                            cmd.ExecuteNonQuery();
                            //*******************New data****************************************
                            try
                            {
                                ratess = (spl.splrats);
                            }
                            catch { }
                            try
                            {
                                discountt = (spl1.spldisc);
                            }
                            catch { }
                            try
                            {
                                spclratee = (spl1.splrats);
                            }
                            catch { }


                            if (newdata == "")
                            {

                                newdata = "\t" + spl.spltestname + "-" + ratess + "-" + discountt + "-" + spclratee + "";
                            }
                            else
                            {
                                newdata = newdata + "\r\n\t" + spl.spltestname + "-" + ratess + "-" + discountt + "-" + spclratee + "";
                            }


                        }
                    }
                    try
                    {
                        string ModiDes = "";

                        // ModiDes = ModiDes + "\r\n\t" + " " + olddata + " To " + newdata + ",";
                        ModiDes = ModiDes + "\r\n\t" + olddata + " **********  To  ********** " + newdata + ",";
                        DateTime TempDatetime = DateTime.Now;
                        string TempDat = TempDatetime.ToString("dd-MM-yyyy hh:mm:ss tt");

                        SqlCommand cmd = new SqlCommand("StProc_INSERT_LogDetails_Mst", sqlcon);
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.AddWithValue("@Log_TransNo", (txtAccountid));
                        cmd.Parameters.AddWithValue("@Log_DateTime", TempDatetime);
                        cmd.Parameters.AddWithValue("@Log_Desc", ModiDes);
                        cmd.Parameters.AddWithValue("@Log_Form", "SetSpecialRate");
                        cmd.Parameters.AddWithValue("@Log_User", UserName);
                        cmd.Parameters.AddWithValue("@Log_System", System.Environment.MachineName);
                        cmd.Parameters.AddWithValue("@Log_UserId", _UsrId);
                        cmd.Parameters.AddWithValue("@Log_CmpyId", CompanyId);
                        cmd.ExecuteNonQuery();
                    }


                    catch { }




                }
            }
            catch { }
            return Json(new { Result = "OK" });
            //return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult CHECKSPLRATE(string accountid)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            SqlCommand cmd;
            int _AhmstKey = Convert.ToInt32(accountid);
            cmd = new SqlCommand("UPDATE AccountHeads_Mst SET AhMst_SchemeId=0 WHERE AhMst_Key=" + _AhmstKey + "", sqlcon);
            cmd.ExecuteNonQuery();

            return Json(JsonRequestBehavior.AllowGet);
        }






        //public JsonResult SPLGETDEFAULT(string accountid, string txtdiscper,string optschm,string OptSplAct)
        //{

        //    List<SETSPLRATES> getsplrate = new List<SETSPLRATES>();

        //    logindetails l = Session["logindls"] as logindetails;
        //    SqlConnection sqlcon = new SqlConnection();
        //    sqlcon = con.dbcon();
        //    sqlcon.Open();
        //    double YearId = (double)l.Yr_Id;
        //    double CompanyId = l.BrMst_Key;
        //    bool OptAccount = false;
        //    bool optscheme = false;
        //    int txtSchemeid = 0;
        //    int TstMst_Key = 0;
        //    string TstMst_name = "";
        //    string TstMst_Rate = "";
        //    string txtDiscPer = txtdiscper;


        //   int txtAccountid = Convert.ToInt32(accountid);
        //    if (Convert.ToInt32(OptSplAct) == 1)
        //    {
        //        OptAccount = true;
        //    }
        //    if (Convert.ToInt32(optschm) == 1)
        //    {
        //        optscheme = true;
        //    }


        //    try
        //    {
        //        int _AhmstKey = 0;
        //        if (OptAccount== true)
        //        {
        //            try
        //            {
        //                _AhmstKey = Convert.ToInt32(txtAccountid);
        //            }
        //            catch (Exception ex)
        //            {
        //                _AhmstKey = 0;
        //            }
        //        }
        //        else if (optscheme == true)
        //        {
        //            try
        //            {
        //                _AhmstKey = Convert.ToInt32(txtSchemeid);
        //            }
        //            catch (Exception ex)
        //            {
        //                _AhmstKey = 0;
        //            }
        //        }

        //        if (_AhmstKey != 0)
        //        {
        //            SqlCommand cmd = new SqlCommand("Select TstMst_Key,TstMst_name,TstMst_Rate From Test_Mst WITH (NOLOCK) Where TstMst_Rate!=0 order by TstMst_name", sqlcon);
        //            SqlDataAdapter sda = new SqlDataAdapter(cmd);
        //            DataTable dt = new DataTable();
        //            sda.Fill(dt);
        //            cmd.ExecuteNonQuery();
        //            int Row = 0;
        //            int SlNO = 1;
        //            float SpRate = 0;
        //            float Rate = 0;
        //            int Disper = 0;
        //            if (dt.Rows.Count > 0)
        //            {

        //                foreach (DataRow dr in dt.Rows)
        //            {

        //                    TstMst_Key = Convert.ToInt32(dr["TstMst_Key"].ToString());
        //                    //grdSetSpcRate[1, Row].Value = dr["TstMst_Key"].ToString();
        //                    TstMst_name = dr["TstMst_name"].ToString();
        //                    TstMst_Rate = dr["TstMst_Rate"].ToString();
        //                    if (OptAccount == true)
        //                {
        //                    if (txtDiscPer!= "")
        //                    {
        //                            SplR_DisPer = txtDiscPer;
        //                            Rate = Convert.ToInt32(SplR_DisPer);
        //                            Disper = Convert.ToInt32(SplR_DisPer);
        //                            SpRate = (Rate - (Rate * Disper / 100));
        //                            SplR_NRate = Convert.ToString(SpRate);
        //                        //    grdSetSpcRate[4, Row].Value = txtDiscPer.Text.Trim();
        //                        //Rate = Convert.ToInt32(grdSetSpcRate[3, Row].Value);
        //                        //Disper = Convert.ToInt32(grdSetSpcRate[4, Row].Value);
        //                        //SpRate = (Rate - (Rate * Disper / 100));
        //                        //grdSetSpcRate[5, Row].Value = SpRate;
        //                    }

        //                }
        //                Row += 1;

        //                SlNO += 1;
        //            }
        //            flag = "1";
        //        }
        //        else
        //        {
        //            MessageBox.Show("Invalid Account");
        //            txtAccount.Focus();
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }


        //    return Json(JsonRequestBehavior.AllowGet);
        //}







        //public JsonResult CASHRECEIPTPRINT(string transnoid)
        //{
        //    string txtTransNo = transnoid;
        //    int TransNo = 0;
        //    string filepath = "";
        //    TransNo = Convert.ToInt32(txtTransNo == "" ? "0" : txtTransNo);
        //    String AccntName = "";
        //    int AccntNametag = 0;
        //    String Narration = "";
        //    int _vchrKey = 0;
        //    DateTime dtp = DateTime.Now;
        //    string UserInfo = "";
        //    double Amount = 0;


        //    if (File.Exists(Application.StartupPath + "\\CashPayReceive.txt"))
        //    {
        //        File.Delete(Application.StartupPath + "\\CashPayReceive.txt");
        //    }

        //    StreamWriter tstream = File.CreateText(Application.StartupPath + "\\CashPayReceive.txt");
        //    if (txtTransNo.Text != "")
        //    {

        //        SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo.Text) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + "AND  vchr_BrId= " + cPublic.logInBranchId + " ", Common.myConnectionVM);
        //        _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
        //        if (_vchrKey != 0)
        //        {
        //            SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo.Text) + " and  vchr_TransType='Cash Receipts' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + "AND  vchr_BrId= " + cPublic.logInBranchId + " ", Common.myConnectionVM);
        //            // string q = "Select Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo.Text) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + " ";
        //            SqlDataReader sdr;
        //            sdr = cmd1.ExecuteReader();
        //            while (sdr.Read())
        //            {
        //                _vchrKey = Convert.ToInt32(sdr["vchr_Key"]);
        //                TransNo = Convert.ToInt32(sdr["vchr_TransNo"]);
        //                AccntName = sdr["AhMst_pName"].ToString();
        //                dtp = Convert.ToDateTime(sdr["vchr_Date"]);
        //                Amount = Convert.ToDouble(sdr["vchr_Receipt"]);
        //                Narration = sdr["vchr_Narration"].ToString();
        //                UserInfo = sdr["vchr_TimeStamp"].ToString();
        //                AccntNametag = Convert.ToInt32(sdr["vchr_Id"]);
        //            }
        //            sdr.Close();
        //            IsNewPayement = false;

        //        }
        //        else
        //        {
        //            //MessageBox.Show("Not Data Found");
        //            //btnNew_Click(null, null);
        //        }





        //    }
        //    CGeneral cgen = new CGeneral();

        //    tstream.Write(cgen.AlignWord("CASH RECEIPTS ", "L", 25));
        //    tstream.WriteLine("");
        //    tstream.WriteLine(cPublic.Replicate(".", 40));
        //    tstream.WriteLine(cgen.AlignWord(cPublic.FirmName, "L", 44));
        //    tstream.WriteLine(cgen.AlignWord(cPublic.CompPlace, "L", 44));
        //    try
        //    {
        //        if (cPublic.FirmAdd2 != "")
        //        {
        //            tstream.WriteLine(cgen.AlignWord(cPublic.FirmAdd2, "L", 44));
        //        }
        //    }
        //    catch { }
        //    if (cPublic.BillDos == 1)
        //    {
        //        tstream.WriteLine(cgen.AlignWord("Estd.:1948", "C", 44));
        //        tstream.WriteLine(cgen.AlignWord("GSTIN:32AABCT8313K1ZE", "C", 44));
        //    }
        //    tstream.WriteLine("");


        //    tstream.WriteLine("");
        //    tstream.Write(cgen.AlignWord("TRANS No: ", "L", 12));
        //    tstream.Write(cgen.AlignWord(TransNo.ToString(), "L", 15));
        //    tstream.Write(cgen.AlignWord("Date :", "L", 12));
        //    tstream.Write(cgen.AlignWord(dtp.ToString("dd-MMM-yyyy"), "L", 12));
        //    tstream.WriteLine("");
        //    tstream.Write(cgen.AlignWord("Name   : ", "L", 12));
        //    tstream.Write(cgen.AlignWord(AccntName, "L", 30));
        //    tstream.WriteLine("");
        //    tstream.Write(cgen.AlignWord("Narration:", "L", 12));
        //    tstream.Write(cgen.AlignWord(Narration, "L", 50));
        //    tstream.WriteLine("");
        //    tstream.Write(cgen.AlignWord("User Info: ", "L", 12));
        //    tstream.Write(cgen.AlignWord(UserInfo, "L", 45));
        //    tstream.WriteLine("");
        //    tstream.WriteLine(cPublic.Replicate("-", 40));
        //    tstream.Write(cgen.AlignWord("Total Amount:", "R", 15));
        //    tstream.Write(cgen.AlignWord((Amount > 0 ? Amount.ToString("#0.00") : ""), "R", 10));
        //    tstream.WriteLine("");
        //    tstream.WriteLine(cPublic.Replicate("-", 40));
        //    tstream.WriteLine("");
        //    tstream.Flush();
        //    tstream.Close();
        //    if (File.Exists(Application.StartupPath + "\\CashBill.BAT"))
        //    {
        //        Process proc = new Process();
        //        proc.StartInfo.FileName = Application.StartupPath + "\\CashBill.BAT";
        //        proc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        //        proc.Start(); ;
        //    }
        //}













        public JsonResult NEWCASHPAYMENT()
        {
            List<CASHPAYMENT> getcashpayment = new List<CASHPAYMENT>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;

            string txtTransNo = "";
            int txtTransNoid = 0;

            IsNewPayement = true;
            //dtpDate.Value = DateTime.Now;
            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE  vchr_TransType='Cash Payment' and vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
            string a = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WHERE vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ";
            int TransNo = 0;
            TransNo = Convert.ToInt32(cmd.ExecuteScalar());
            if (TransNo != 0)
            {
                TransNo += 1;
                txtTransNo = TransNo.ToString();
                txtTransNoid = TransNo;

            }
            else
            {
                txtTransNo = "1";
                txtTransNoid = 1;
            }
            CASHPAYMENT getcashpayments = new CASHPAYMENT()
            {
                CashPaymentTransNo = txtTransNo,
                CashPaymentTransNoid = txtTransNoid
            };
            getcashpayment.Add(getcashpayments);
            return Json(getcashpayment, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DELETECASHPAYMENT(string userinfoid, string transnoid, string Accountid, string accountname, string amount)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double _UsrId = l.Usr_key;
            int Key = 0;
            int Acckey = 0;
            string UserName = l.Usr_Name;
            string txtUserInfoid = userinfoid;
            string txtAccountid = Accountid;
            int txtTransNoid = Convert.ToInt32(transnoid);
            string txtAccount = accountname;
            string txtAmount = amount;
            string txtTransNo = transnoid;
            try
            {
                Key = Convert.ToInt32(txtUserInfoid);

            }
            catch (Exception Exe) { }
            try
            {
                Acckey = Convert.ToInt32(txtAccountid);

            }
            catch (Exception Exe)
            {
                Key = 0;

            }
            if (Acckey == nRefundSCheme)
            {
                return Json(new { Result = "You Can't Permission for Delete this Transaction,Refund Found..........." });
                //MessageBox.Show("You Can't Permission for Delete this Transaction,Refund Found...........", cPublic.ProjectName);
                //return;
            }
            //SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers where vchr_TransNo=" + Convert.ToInt32(txtTransNo.Text) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + " ", Common.myConnectionVM);
            //_vchrKey =Convert.ToInt32(cmd.ExecuteScalar());
            //if (_vchrKey != 0 && Key !=0 )
            if (Key != 0)
            {
                //if (MessageBox.Show("Are you sure to delete this entry..?", cPublic.ProjectName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                //{

                SqlCommand cmd3 = new SqlCommand("Delete from  Vouchers WHERE vchr_Key=" + Key + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                cmd3.ExecuteNonQuery();

                string usrLogData = "";
                usrLogData = "CASH PAYMENT DELETED -TRANSNO: " + txtTransNoid.ToString() + "_ACCOUNT:" + txtAccountid.ToString() + "_" + txtAccount + "AMOUNT:" + txtAmount;
                UserTrackInsert(usrLogData, "CASH PAYMENT", 0);

                //MessageBox.Show("Deleted Sucessfully...........");
                try
                {
                    DateTime date = DateTime.Now;
                    SqlCommand cmd = new SqlCommand("StProc_INSERT_LogDetails_Mst", sqlcon);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Log_TransNo", txtTransNo);
                    cmd.Parameters.AddWithValue("@Log_DateTime", date);
                    cmd.Parameters.AddWithValue("@Log_Desc", "  TransNo  " + txtTransNo + "  Cash payment Deleted  ");
                    cmd.Parameters.AddWithValue("@Log_Form", "CashPayment");
                    cmd.Parameters.AddWithValue("@Log_User", UserName);
                    cmd.Parameters.AddWithValue("@Log_System", System.Environment.MachineName);
                    cmd.Parameters.AddWithValue("@Log_UserId", _UsrId);
                    cmd.Parameters.AddWithValue("@Log_CmpyId", CompanyId);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                }

                //btnNew_Click(null, null);

            }
            return Json(JsonRequestBehavior.AllowGet);
        }



        //else
        //{
        //    MessageBox.Show("Not Data Found...........");
        //    btnNew_Click(null, null);

        //}







        public JsonResult DISCASHPAYMENT(string CashpayTransNo)
        {
            List<CASHPAYMENT> getcashpayment = new List<CASHPAYMENT>();
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double _UsrId = l.Usr_key;
            IsNewPayement = true;
            string txtAccount = "";
            string dtpDate = "";
            string txtAmount = "";
            string txtNarration = "";
            string txtUserInfo = "";
            int txtUserInfoid = 0;
            int txtTransNoid = 0;
            int txtAccountid = 0;
            string imgSrc = "";

            //string txtUserInfoid = "";
            string txtTransNo = CashpayTransNo;
            int _vchrKey = 0;
            if (txtTransNo != "")
            {

                SqlCommand cmd = new SqlCommand("Select isnull(vchr_Key,0) from   Vouchers WITH (NOLOCK) where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + "AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                _vchrKey = Convert.ToInt32(cmd.ExecuteScalar());
                if (_vchrKey != 0)
                {
                    SqlCommand cmd1 = new SqlCommand("Select Vo.vchr_Key,Vo.vchr_Id,vchr_TransNo,Vo.vchr_TransNo,Vo.vchr_Attachment, Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo WITH (NOLOCK) left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "", sqlcon);
                    string q = "Select Vo.vchr_Date,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_TimeStamp,Ah.AhMst_pName from Vouchers Vo left join AccountHeads_Mst Ah WITH (NOLOCK) ON Vo.vchr_Id=Ah.AhMst_Key where vchr_TransNo=" + Convert.ToInt32(txtTransNo) + " and  vchr_TransType='Cash Payment' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ";
                    SqlDataReader sdr;
                    sdr = cmd1.ExecuteReader();
                    while (sdr.Read())
                    {
                        txtAccount = sdr["AhMst_pName"].ToString();
                        dtpDate = (sdr["vchr_Date"]).ToString();
                        txtAmount = sdr["vchr_Payment"].ToString();
                        txtNarration = sdr["vchr_Narration"].ToString();
                        txtUserInfo = sdr["vchr_TimeStamp"].ToString();
                        txtUserInfoid = Convert.ToInt32(sdr["vchr_Key"]);
                        txtTransNoid = Convert.ToInt32(sdr["vchr_TransNo"]);
                        txtAccountid = Convert.ToInt32(sdr["vchr_Id"]);

                        try
                        {
                            var base64 = Convert.ToBase64String((byte[])sdr["vchr_Attachment"]);


                            //MemoryStream ms = new MemoryStream((byte[])sdr["vchr_Attachment"]);
                            imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                            //ViewBag.imgSrc = imgSrc;
                            //pictureBox1.BackgroundImage = Image.FromStream(ms);
                            //pictureBox1.BackgroundImageLayout = ImageLayout.Stretch;
                            //pictureBox1.Refresh();

                        }
                        catch { }
                        //                    catch
                        //                    {
                        //                        pictureBox1.Image = null;
                        //                    }
                        //                }

                        IsNewPayement = false;
                        //    if (pictureBox1.BackgroundImage != null)
                        //    {
                        //        btnRemove.Enabled = true;
                        //    }
                        //    else
                        //    {
                        //        btnRemove.Enabled = false;

                        //    }
                    }
                    sdr.Close();
                    CASHPAYMENT getcashpayments = new CASHPAYMENT()
                    {
                        CashPaymentTransNoid = txtTransNoid,
                        CashPaymentDate = dtpDate,
                        CashpaymentAct = txtAccount,
                        CashpaymentActid = txtAccountid,
                        CashPaymentAmt = txtAmount,
                        CashPaymentNarr = txtNarration,
                        CashPaymentUserinfo = txtUserInfo,
                        CashPaymentUserinfoid = Convert.ToString(txtUserInfoid),
                        file = imgSrc
                    };

                    getcashpayment.Add(getcashpayments);
                }
                else
                {
                    return Json(new { Result = "Not Data Found" });


                }
            }

            return Json(getcashpayment, JsonRequestBehavior.AllowGet);
        }


























        public void UserTrackInsert(string caption, string formName, int trckType)
        {


            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double _UsrId = l.Usr_key;
            double UserId = l.Usr_EmpId;
            string UserName = l.Usr_Name;

            /******USR TRACK TYPES *****/
            // 1 - INVOICE REGISTRATION
            // 2 - INVOICE EDIT - FROM BILLING FORM
            // 4 - EDIT INVOICE - THORUGH EDIT INVOICE FORM
            // 5 - FIRST LEVEL AUTHORIZE
            // 6 - SECOND LEVEL AUTHORIZE
            // 7 - REMOVE AUTHORIZE
            // 8 - FINISH
            // 9 - AUTO FINISH
            // 10 - CASH PAYMENT ENTRY SAVE
            // 11 - CASH PAYMENT ENTRY EDIT
            // 12 - CASH RECEIPT ENTRY SAVE
            // 13 - CASH RECEIPT ENTRY EDIT
            // 14 - PENDNG COLLECTION
            // 15 - LEDGER CREATION
            // 16 - LEDGER Modified
            //17 - DAYBOOK SAVE
            //18 - DAYBOOK EDIT
            //19 - MONTHLY INCENTIVE
            //20 - MONTHLY INCENTIVE DATEWISE
            //21 - BARCODE GENERATED
            //22 - BARCODE REVERTED
            //23 - BILLWISE COLLECTION
            //24 - BILLWISE COLLECTION AREA
            //25 - CANCEL INVOICE
            //26 - EMAIL REPORT
            //27 - CRITICAL VALUE MANAGEMENT
            //28 - REMOVE AUTHORIZATION
            //29 - REFERAL LAB MANAGEMENT
            //30 - REFERAL LAB RESULT RECEIVED
            //31 - REFERAL LAB RESULT DPCUMENT DELETED
            //32 - DOCTOR CREATION
            //33 - DOCTOR DATA EDIT
            //34 - DOCTOR DATA DELETE
            //35 - LAB RESULT CULTURE FIRST LEVEL 
            //36 - LAB RESULT CULTURE SECOND LEVEL
            /**************************/
            try
            {
                SqlCommand cmd = new SqlCommand("StProc_INSERT_USERTRACK", sqlcon);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UsrTrack_Date", DateTime.Now);
                cmd.Parameters.AddWithValue("@UsrTrack_UsrId", _UsrId);
                cmd.Parameters.AddWithValue("@UsrTrack_EmpId", UserId);
                cmd.Parameters.AddWithValue("@UsrTrack_UsrName", UserName);
                cmd.Parameters.AddWithValue("@UsrTrack_Caption", caption);
                cmd.Parameters.AddWithValue("@UsrTrack_Type", trckType);
                cmd.Parameters.AddWithValue("@UsrTrack_Form", formName);
                cmd.Parameters.AddWithValue("@UsrTrack_WorkStation", System.Environment.MachineName);
                cmd.Parameters.AddWithValue("@UsrTrack_YrId", YearId);
                cmd.Parameters.AddWithValue("@UsrTrack_CpyId", CompanyId);
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }
        }




















//********************BILLWISECOLLECTION-AREA-SAVE********************************************
        public JsonResult BILLWISESAVE(List<BillWiseCollectionArea> billwisearea, string allowamt, string optCollection1, string currentdate, string bankname, string chqno, string narration, string chqDate, string Chequeradio, string Cashradio, string bankid, string currentbal)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            int _BillWiseSms = 0;
            //string logInBranchId = l.;
            double logInBranchId = l.BrMst_Key;
            sqlcon = con.dbcon();
            sqlcon.Open();
            bool OptChq = false;
            bool optCollection = false;
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            bool OptCash = false;

            if (Convert.ToInt32(Cashradio) == 1)
            {
                OptCash = true;
            }
            else
            {
                OptCash = false;
            }
            if (Convert.ToInt32(Chequeradio) == 1)
            {
                OptChq = true;
            }
            else
            {
                OptChq = false;
            }
            string txtName = "";

            string txtBankid = bankid;

            int CorpId = 0, curntCorpId = 0;
            double BalAmt = 0;
            double AllocAmt = 0;
            int Inv_No = 0;
            int Vchrkey = 0;
            int TransNo = 0;
            SqlCommand cmd1;
            double totAlloctAmt = 0;
            //double totalAllocAmt = 0;
            int ChqNo = 0;
            int BankId = 0;
            int _SameCorp = 0;
            int BillColEntryKey = 0;
            double tempAllocAmt = 0, amnt = 0;
            int grdLastRow = 0;
            string txtAlloAmt = allowamt;
            string UserName = l.Usr_Name;
            string txtPhone = "";
            string txtChqNo = chqno;
            string txtNarr = narration;
            string txtCurBal = currentbal;
            int UserId = l.Usr_EmpId;
            //DateTime dtpChqDate;

            DateTime dtpDate = DateTime.ParseExact(currentdate, "dd/MM/yyyy", null);
            DateTime dtpChqDate = DateTime.ParseExact(chqDate, "dd/MM/yyyy", null);




            string SysName = Environment.MachineName;


            try
            {
                tempAllocAmt = Convert.ToDouble(txtAlloAmt);

            }
            catch { }
            if (tempAllocAmt == 0)
            {
                return Json(new { Result = "InValid Bill Amount" });

            }

            string UserInfo = UserName + "  " + DateTime.Now.ToString("MM-dd-yy hh:mm tt") + " Work Station:" + SysName;


            if (billwisearea != null)
            {

                foreach (BillWiseCollectionArea billwisearea1 in billwisearea)
                {

                    try
                    {
                        //TempAmount = Convert.ToDouble(billwisearea1.TempBalAmt);
                        CorpId = Convert.ToInt32(billwisearea1.Inv_InsId);
                    }
                    catch { }
                    try
                    {
                        amnt = Convert.ToDouble(billwisearea1.collallowAmt);
                    }
                    catch { }

                    if (_SameCorp == 0)
                    {
                        totAlloctAmt = 0;
                        curntCorpId = CorpId;
                        _SameCorp = 1;
                        txtPhone = billwisearea1.txtPhone;
                        try
                        {

                            SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(BlWsCol_EntryKey), 0) 'BlWsCol_EntryKey' FROM dbo.BillWiseCollection WITH (NOLOCK) WHERE  BlWsCol_CompanyId = " + CompanyId + "", sqlcon);
                            BillColEntryKey = Convert.ToInt32(cmd.ExecuteScalar());
                            BillColEntryKey += 1;

                        }
                        catch (Exception ex)
                        {
                            var x = ex.Message;
                            var y = ex.InnerException;
                        }
                    }
                    if ((_SameCorp == 1) && (curntCorpId == CorpId))
                    {
                        AllocAmt = 0;
                        try
                        {
                            AllocAmt = Convert.ToDouble(billwisearea1.collallowAmt);
                        }
                        catch { }
                        totAlloctAmt = totAlloctAmt + AllocAmt;
                        if (AllocAmt != 0)
                        {
                            //******************************************
                            double invAmt = 0;
                            double RecAmt = 0;
                            double InvNo = 0;

                            BalAmt = 0;
                            AllocAmt = 0;
                            double TempCurBal = 0;
                            Inv_No = 0;
                            try
                            {
                                BalAmt = Convert.ToDouble(billwisearea1.TempBalAmt);
                            }
                            catch { }
                            try
                            {
                                invAmt = Convert.ToDouble(billwisearea1.Inv_Netamt);
                            }
                            catch { }
                            try
                            {
                                AllocAmt = Convert.ToDouble(billwisearea1.collallowAmt);
                                TempCurBal = Convert.ToDouble(billwisearea1.currentbal);
                            }
                            catch { }
                            try
                            {
                                Inv_No = Convert.ToInt32(billwisearea1.invno);
                            }
                            catch { }

                            if (AllocAmt > 0)
                            {
                                try
                                {
                                    SqlCommand Sqlcmd = new SqlCommand("StProc_INSERT_BILLWISECOLLECTION", sqlcon);
                                    Sqlcmd.CommandType = CommandType.StoredProcedure;
                                    Sqlcmd.Parameters.Add("@BlWsCol_CorpId", SqlDbType.Int).Value = curntCorpId;
                                    Sqlcmd.Parameters.Add("@BlWsCol_VchrKey", SqlDbType.Int).Value = Vchrkey;
                                    Sqlcmd.Parameters.Add("@BlWsCol_InvNo", SqlDbType.Int).Value = Inv_No;
                                    Sqlcmd.Parameters.Add("@BlWsCol_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                                    Sqlcmd.Parameters.Add("@BlWsCol_AlloAmt", SqlDbType.Float).Value = AllocAmt;
                                    Sqlcmd.Parameters.Add("@BlWsCol_CurBal", SqlDbType.Float).Value = TempCurBal;
                                    Sqlcmd.Parameters.Add("@BlWsCol_YearId", SqlDbType.Int).Value = YearId;
                                    Sqlcmd.Parameters.Add("@BlWsCol_CompanyId", SqlDbType.Int).Value = CompanyId;
                                    Sqlcmd.Parameters.Add("@BlWsCol_UserInfo", SqlDbType.NVarChar).Value = UserInfo;
                                    Sqlcmd.Parameters.Add("@BlWsCol_EntryKey", SqlDbType.Int).Value = BillColEntryKey;
                                    //Sqlcmd.Parameters.Add("@BlWsCol_BrId", SqlDbType.NVarChar).Value = UserInfo;

                                    Sqlcmd.ExecuteNonQuery();

                                }
                                catch (Exception ex)
                                {
                                    var x = ex.Message;
                                    var y = ex.InnerException;
                                }
                            }
                            if (optCollection == true)
                            {
                                if (BalAmt == AllocAmt)
                                {


                                    cmd1 = new SqlCommand("UPDATE Invoice_Mst SET Invl_IsPending=0 ,Inv_CurBalAmt=0 WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                                    cmd1.ExecuteNonQuery();
                                }
                                else if (AllocAmt > 0)
                                {

                                    TempCurBal = -1 * TempCurBal;

                                    SqlCommand cmd3 = new SqlCommand("UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                                    //string aa = "UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + cPublic.YearId + " AND Inv_CpyId=" + cPublic.CompanyId + "";
                                    cmd3.ExecuteNonQuery();
                                }
                            }
                            //***********************************************
                        }
                    }
                    else if (curntCorpId != CorpId) //******VOUCHER POSTING*******//
                    {
                        // AllocAmt = 0;

                        //******************************************************************
                        if (totAlloctAmt > 0)
                        {
                            SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
                            Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
                            Vchrkey += 1;
                            string SubQuery = "";
                            string TransType = "";

                            if (OptCash == true)
                            {
                                if (optCollection == true)
                                {
                                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                                    TransType = "Cash Receipts";
                                }
                                BankId = 1;
                            }
                            else
                            {

                                if (optCollection == true)
                                {
                                    SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + "";
                                    TransType = "Cheque Receive";
                                }
                                try
                                {
                                    BankId = Convert.ToInt32(txtBankid);
                                }
                                catch { }
                                if (BankId == 0)
                                {
                                    return Json(new { Result = "Invalid Bank" });

                                }
                                try
                                {
                                    ChqNo = Convert.ToInt32(txtChqNo);

                                }
                                catch { }
                                if (ChqNo == 0)
                                {
                                    return Json(new { Result = "Invalid Cheque No" });

                                }
                            }

                            cmd1 = new SqlCommand(SubQuery, sqlcon);
                            TransNo = 0;
                            TransNo = Convert.ToInt32(cmd1.ExecuteScalar());
                            TransNo += 1;
                            SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
                            cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                            cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = BankId;
                            cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = curntCorpId;
                            cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = TransType;
                            cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = TransNo;
                            if (OptChq == true)
                            {
                                cmd.Parameters.Add("@vchr_Chq", SqlDbType.Int).Value = 1;
                                cmd.Parameters.Add("@vchr_ChqNo", SqlDbType.NVarChar).Value = txtChqNo;
                                cmd.Parameters.Add("@vchr_ChqDate", SqlDbType.DateTime).Value = dtpChqDate.ToShortDateString();

                                cmd.Parameters.Add("@vchr_ChqPassed", SqlDbType.Int).Value = 0;


                                cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarr;
                            }
                            cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = 0;
                            cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = float.Parse(totAlloctAmt.ToString());

                            cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = UserInfo;
                            cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
                            cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
                            cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
                            cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
                            cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = CompanyId;

                            cmd.ExecuteNonQuery();



                            //*********** UPDATE VOUCHER KEY IN BILL WISE COLLECTION **//
                            SqlCommand cmdBill = new SqlCommand("UPDATE BillWiseCollection SET BlWsCol_VchrKey='" + Vchrkey + "' WHERE BlWsCol_EntryKey='" + BillColEntryKey + "' AND BlWsCol_YearId='" + YearId + "' AND BlWsCol_CompanyId='" + CompanyId + "'", sqlcon);
                            cmdBill.ExecuteNonQuery();
                            //**************************


                            //********Billing SMS ***************
                            int SMS_ID = 0;
                            string m_Text = "";
                            string m_Mob = "";
                            try
                            {
                                m_Mob = txtPhone.Substring(txtPhone.Length - 10, 10);
                            }
                            catch { }
                            if (m_Mob.Length == 10 && _BillWiseSms == 1)
                            {
                                m_Mob = "91" + m_Mob;
                                SqlCommand Sqlcmd;
                                Sqlcmd = new SqlCommand("SELECT ISNULL(SMS_ID,0) FROM sendSMS WHERE SMS_InvNo=" + TransNo + " AND SMS_YrId=" + YearId + " AND SMS_CpyId=" + CompanyId + " AND SMS_Type=3", sqlcon);
                                try
                                {
                                    SMS_ID = Convert.ToInt32(Sqlcmd.ExecuteScalar());
                                }
                                catch { }

                            }
                        }


                        //***** NEW CORP ID****
                        totAlloctAmt = 0;
                        AllocAmt = 0;

                        curntCorpId = CorpId;
                        try
                        {
                            AllocAmt = Convert.ToDouble(billwisearea1.collallowAmt);
                        }
                        catch { }
                        totAlloctAmt = totAlloctAmt + AllocAmt;
                        if (AllocAmt != 0)
                        {
                            //******************************************
                            double invAmt = 0;
                            double RecAmt = 0;
                            double InvNo = 0;
                            BalAmt = 0;
                            AllocAmt = 0;
                            double TempCurBal = 0;
                            Inv_No = 0;
                            try
                            {
                                BalAmt = Convert.ToDouble(billwisearea1.TempBalAmt);
                            }
                            catch { }
                            try
                            {
                                invAmt = Convert.ToDouble(billwisearea1.Inv_Netamt);
                            }
                            catch { }
                            try
                            {
                                AllocAmt = Convert.ToDouble(billwisearea1.collallowAmt);
                                TempCurBal = Convert.ToDouble(billwisearea1.currentbal);
                            }
                            catch { }
                            try
                            {
                                Inv_No = Convert.ToInt32(billwisearea1.invno);
                            }
                            catch { }

                            if (AllocAmt > 0)
                            {
                                try
                                {
                                    SqlCommand cmd = new SqlCommand("SELECT ISNULL(MAX(BlWsCol_EntryKey), 0) 'BlWsCol_EntryKey' FROM dbo.BillWiseCollection WITH (NOLOCK) WHERE  BlWsCol_CompanyId = " + CompanyId + "", sqlcon);
                                    BillColEntryKey = Convert.ToInt32(cmd.ExecuteScalar());
                                    BillColEntryKey += 1;

                                }
                                catch { }

                                SqlCommand Sqlcmd = new SqlCommand("StProc_INSERT_BILLWISECOLLECTION", sqlcon);
                                Sqlcmd.CommandType = CommandType.StoredProcedure;
                                Sqlcmd.Parameters.Add("@BlWsCol_CorpId", SqlDbType.Int).Value = curntCorpId;
                                Sqlcmd.Parameters.Add("@BlWsCol_VchrKey", SqlDbType.Int).Value = Vchrkey;
                                Sqlcmd.Parameters.Add("@BlWsCol_InvNo", SqlDbType.Int).Value = Inv_No;
                                Sqlcmd.Parameters.Add("@BlWsCol_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                                Sqlcmd.Parameters.Add("@BlWsCol_AlloAmt", SqlDbType.Float).Value = AllocAmt;
                                Sqlcmd.Parameters.Add("@BlWsCol_CurBal", SqlDbType.Float).Value = TempCurBal;
                                Sqlcmd.Parameters.Add("@BlWsCol_YearId", SqlDbType.Int).Value = YearId;
                                Sqlcmd.Parameters.Add("@BlWsCol_CompanyId", SqlDbType.Int).Value = CompanyId;
                                Sqlcmd.Parameters.Add("@BlWsCol_UserInfo", SqlDbType.NVarChar).Value = UserInfo;
                                Sqlcmd.Parameters.Add("@BlWsCol_EntryKey", SqlDbType.Int).Value = BillColEntryKey;
                                //Sqlcmd.Parameters.Add("@BlWsCol_BrId", SqlDbType.NVarChar).Value = UserInfo;
                                Sqlcmd.ExecuteNonQuery();


                            }
                            if (optCollection == true)
                            {
                                if (BalAmt == AllocAmt)
                                {


                                    cmd1 = new SqlCommand("UPDATE Invoice_Mst SET Invl_IsPending=0 ,Inv_CurBalAmt=0 WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                                    cmd1.ExecuteNonQuery();
                                }
                                else if (AllocAmt > 0)
                                {

                                    TempCurBal = -1 * TempCurBal;

                                    SqlCommand cmd3 = new SqlCommand("UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);
                                    //string aa = "UPDATE Invoice_Mst SET Inv_CurBalAmt=" + TempCurBal + " WHERE Inv_No=" + Inv_No + " AND Inv_YrId=" + cPublic.YearId + " AND Inv_CpyId=" + cPublic.CompanyId + "";
                                    cmd3.ExecuteNonQuery();
                                }
                            }
                            //***********************************************
                        }

                    }

                }

                //******************************************************************
                if (totAlloctAmt > 0)
                {
                    SqlCommand cmd2 = new SqlCommand("SELECT ISNULL(MAX(vchr_Key),0) FROM Vouchers WITH (NOLOCK) WHERE   vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " ", sqlcon);
                    Vchrkey = Convert.ToInt32(cmd2.ExecuteScalar());
                    Vchrkey += 1;
                    string SubQuery = "";
                    string TransType = "";

                    if (OptCash == true)
                    {
                        if (optCollection == true)
                        {
                            SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cash Receipts' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + logInBranchId + "";
                            TransType = "Cash Receipts";
                        }
                        BankId = 1;
                    }
                    else
                    {
                        if (optCollection == true)
                        {
                            SubQuery = "SELECT ISNULL(MAX(vchr_TransNo),0) FROM Vouchers WITH (NOLOCK) WHERE vchr_TransType='Cheque Receive' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + logInBranchId + "";
                            TransType = "Cheque Receive";
                        }
                        try
                        {
                            BankId = Convert.ToInt32(txtBankid);
                        }
                        catch { }
                        if (BankId == 0)
                        {
                            return Json(new { Result = "Invalid Bank" });


                        }
                        try
                        {
                            ChqNo = Convert.ToInt32(txtChqNo);

                        }
                        catch { }
                        if (ChqNo == 0)
                        {
                            return Json(new { Result = "Invalid Cheque No" });

                        }
                    }
                    cmd1 = new SqlCommand(SubQuery, sqlcon);
                    TransNo = 0;
                    TransNo = Convert.ToInt32(cmd1.ExecuteScalar());
                    TransNo += 1;
                    SqlCommand cmd = new SqlCommand("StProc_INSERT_Voucher", sqlcon);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@vchr_Key", SqlDbType.Float).Value = Vchrkey;
                    cmd.Parameters.Add("@vchr_Date", SqlDbType.DateTime).Value = dtpDate.ToShortDateString();
                    cmd.Parameters.Add("@vchr_BookId", SqlDbType.Float).Value = BankId;
                    cmd.Parameters.Add("@vchr_Id", SqlDbType.Float).Value = curntCorpId;
                    cmd.Parameters.Add("@vchr_TransType", SqlDbType.NVarChar).Value = TransType;
                    cmd.Parameters.Add("@vchr_TransNo", SqlDbType.Float).Value = TransNo;
                    if (OptChq == true)
                    {
                        cmd.Parameters.Add("@vchr_Chq", SqlDbType.Int).Value = 1;
                        cmd.Parameters.Add("@vchr_ChqNo", SqlDbType.NVarChar).Value = txtChqNo;
                        cmd.Parameters.Add("@vchr_ChqDate", SqlDbType.DateTime).Value = dtpChqDate.ToShortDateString();

                        cmd.Parameters.Add("@vchr_ChqPassed", SqlDbType.Int).Value = 0;


                        cmd.Parameters.Add("@vchr_Narration", SqlDbType.NVarChar).Value = txtNarr;
                    }
                    cmd.Parameters.Add("@vchr_Payment", SqlDbType.Float).Value = 0;
                    cmd.Parameters.Add("@vchr_Receipt", SqlDbType.Float).Value = float.Parse(totAlloctAmt.ToString());

                    cmd.Parameters.Add("@vchr_TimeStamp", SqlDbType.NVarChar).Value = UserInfo;
                    cmd.Parameters.Add("@vchr_UsrId", SqlDbType.Decimal).Value = UserId;
                    cmd.Parameters.Add("@vchr_YrId", SqlDbType.Int).Value = YearId;
                    cmd.Parameters.Add("@vchr_CpyId", SqlDbType.Int).Value = CompanyId;
                    cmd.Parameters.Add("@vchr_Updtd", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@vchr_BrId", SqlDbType.Int).Value = logInBranchId;
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception ex) { }


                    //*********** UPDATE VOUCHER KEY IN BILL WISE COLLECTION **//
                    SqlCommand cmdBill = new SqlCommand("UPDATE BillWiseCollection SET BlWsCol_VchrKey='" + Vchrkey + "' WHERE BlWsCol_EntryKey='" + BillColEntryKey + "' AND BlWsCol_YearId='" + YearId + "' AND BlWsCol_CompanyId='" + CompanyId + "'", sqlcon);
                    cmdBill.ExecuteNonQuery();
                    //**************************


                    //********Billing SMS ***************
                    int SMS_ID = 0;
                    string m_Text = "";
                    string m_Mob = "";
                    try
                    {
                        m_Mob = txtPhone.Substring(txtPhone.Length - 10, 10);
                    }
                    catch { }
                    if (m_Mob.Length == 10 && _BillWiseSms == 1)
                    {
                        m_Mob = "91" + m_Mob;
                        SqlCommand Sqlcmd;
                        Sqlcmd = new SqlCommand("SELECT ISNULL(SMS_ID,0) FROM sendSMS WHERE SMS_InvNo=" + TransNo + " AND SMS_YrId=" + YearId + " AND SMS_CpyId=" + CompanyId + " AND SMS_Type=3", sqlcon);
                        try
                        {
                            SMS_ID = Convert.ToInt32(Sqlcmd.ExecuteScalar());
                        }
                        catch { }
                        if (SMS_ID == 0)
                        {
                            Sqlcmd = new SqlCommand("INSERT INTO sendSMS(SMS_Text,SMS_InvNo,SMS_Flash,SMS_Mode,SMS_Mobile,SMS_isSent,SMS_YrId,SMS_CpyId,SMS_Type,SMS_Tryed) values('Dear Sir, Cash Received Rs " + totAlloctAmt.ToString() + " Only. Voucher No:" + TransNo + " on " + DateTime.Now.ToString("dd-MM-yyyy") + " . Your Current balance is Rs " + txtCurBal + " . Thank you for your support. For any clarification contact us.','" + txtName + "','False','TEXT','" + m_Mob.Trim() + "','False'," + YearId + "," + CompanyId + ",'3','0')", sqlcon);
                            Sqlcmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            string usrLogData = "";
            usrLogData = "BILLWISE COLLECTION -CORPORATE: " + txtName + "_AMT_" + txtAlloAmt;
           UserTrackInsert(usrLogData, "BILLWISE COLLECTION AREA", 24);
            return Json(JsonRequestBehavior.AllowGet);

        }
//*****************END-BILLWISECOLLECTION-AREA-SAVE*************************************

     
            
            
              
        public JsonResult BILLWISECORPORATION(string optCollectionpur, string optCollectionpha, string optCollection1, string otpUpto, string uptodate, string fromdate)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            bool optCollectionpha1 = false;
            bool optCollection = false;
            bool optPurchase = false;
            bool chkUpTo = false;
            string txtName = "";
            int txtNameid = 0;
            string txtPhone = "";
            sqlcon = con.dbcon();
            SqlCommand cmd = new SqlCommand();

            cmd.Connection = sqlcon;
            sqlcon.Open();
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            if (Convert.ToInt32(optCollectionpur) == 1)
            {
                optPurchase = true;
            }
            else
            {
                optPurchase = false;
            }

            if (Convert.ToInt32(optCollectionpha) == 1)
            {
                optCollectionpha1 = true;
            }
            else
            {
                optCollectionpha1 = false;
            }
            if (Convert.ToInt32(otpUpto) == 1)
            {
                chkUpTo = true;
            }
            else
            {
                chkUpTo = false;
            }
            if (optCollection == true)
            {
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT AhMst_pName,AhMst_Key,AhMst_Phno  FROM AccountHeads_Mst   where (AhMst_Type='AccHd' Or AhMst_Type='Hosp') and AhMst_IsActive=1 ";

                cmd.ExecuteNonQuery();

            }
            else if (optPurchase == true)
            {
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT AhMst_pName,AhMst_Key,AhMst_Phno  FROM AccountHeads_Mst   where (AhMst_Type='AccHd' Or AhMst_Type='Hosp') and AhMst_IsActive=1 AND Ahmst_Key In(select DISTINCT PSupId from PURCHASE  WHERE PPayMode='CREDIT'  )";

                cmd.ExecuteNonQuery();

            }
            else
            {
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT AhMst_pName,AhMst_Key,AhMst_Phno  FROM AccountHeads_Mst   where (AhMst_Type='AccHd' Or AhMst_Type='Hosp') and AhMst_IsActive=1 AhMst_IsActive=1 AND Ahmst_Key In(select Distinct  InvAccCode  from Pharma_Invoice  WHERE InvCredit='True' AND ISNULL(InvIsCancelled,0)!=1 AND  ISNULL(InvCurRec,0)!=InvCreditAmount AND InvAccCode>0)";

                cmd.ExecuteNonQuery();

            }
            SqlDataAdapter sda = new SqlDataAdapter();
            DataTable dt = new DataTable();
            //cmd = new SqlCommand(CommandText, sqlcon);
            sda = new SqlDataAdapter(cmd);
            sda.Fill(dt);

            if (dt.Rows.Count > 0)
            {

                foreach (DataRow dr1 in dt.Rows)
                {
                    txtName = dr1["AhMst_pName"].ToString();
                    txtNameid = Convert.ToInt32(dr1["AhMst_Key"].ToString());
                    txtPhone = dr1["AhMst_Phno"].ToString();



                    Billwisecollections getdetails1 = new Billwisecollections()
                    {
                        txtName = txtName,
                        txtNameid = txtNameid,
                        txtPhone = txtPhone
                    };
                    TempData["mydata"] = getdetails1;

                    getbillwisecollection.Add(getdetails1);
                }
            }
            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }
        public JsonResult BillwFetch(string optCollection1, string otpUpto, string uptodate, string fromdate, string corpnameid)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            bool optPharmacy = false;
            bool optCollection = false;
            bool optPurchase = false;
            int invno = 0;
            string TempInvdate = "";
            string Inv_Name = "";
            string AhMst_PName = "";
            int Inv_InsId = 0;
            double Inv_Netamt = 0;

            string txtNameid = corpnameid;
            bool chkUpTo = false;
            string txtPhone = "";
            DateTime dtpFrmdate = DateTime.ParseExact(uptodate, "dd/MM/yyyy", null);
            DateTime dtpUptoDate = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);

            //string dtpUptoDate = dtpUptoDate1.ToString("yyyy/MM/dd");
            sqlcon = con.dbcon();
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            string QueryTemp = "";
            int nCorpId = 0;
            try
            {
                nCorpId = Convert.ToInt32(txtNameid);
            }
            catch { }
            if (nCorpId == 0)
            {
                return Json(new { Result = "Invalid Corporate..." });
                //MessageBox.Show("Invalid Corporate...", cPublic.ProjectName);
                //txtName.Focus();
                //return;
            }
            if (optCollection == true)
            {
                QueryTemp = "SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + txtNameid + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + "  AND Inv_CpyId=" + CompanyId + "  AND Convert(Date,Inv_date)>='" + dtpFrmdate.ToString("yyyy-MM-dd") + "' AND Convert(Date,Inv_date)<='" + dtpUptoDate.ToString("yyyy-MM-dd") + "'  ORDER BY Inv_No";
            }
            //else if (optPurchase.Checked == true)
            //{
            //    QueryTemp = "SELECT PNo AS Inv_No,PSupName AS Inv_name,PInvoiceDate AS Inv_Date,PInvoiceAmount AS Inv_Netamt,PBalAmt As Inv_CurBalAmt FROM PURCHASE WHERE PPayMode='CREDIT' AND PSupId=" + txtName.Tag + " AND ISNULL(PIsCancelled,0)!=1 AND  ISNULL(PPaidAmt,0)!=PInvoiceAmount AND PFinYearID=" + cPublic.IncareYearId + " AND PCmpID=" + cPublic.IncareCompanyId + "  ORDER BY PInvoiceNo";

            //}
            //else
            //{
            //    QueryTemp = "SELECT InvNo AS Inv_No,InvAccName AS Inv_name,InvDate AS Inv_Date,InvCreditAmount AS Inv_Netamt,InvCurBal As Inv_CurBalAmt FROM Pharma_Invoice WHERE InvCredit='True' AND InvAccCode='" + txtName.Tag + "' AND ISNULL(InvIsCancelled,0)!=1 AND  ISNULL(InvCurRec,0)!=InvCreditAmount AND InvFinyearID=" + cPublic.IncareYearId + " AND InvCompanyID=" + cPublic.IncareCompanyId + "  ORDER BY InvNo";

            //}
            //SqlCommand cmd = new SqlCommand("SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + txtName.Tag + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + cPublic.YearId + " AND Inv_CpyId=" + cPublic.CompanyId + "  ORDER BY Inv_No ", Common.myConnectionVM);
            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter sda = new SqlDataAdapter();
            DataTable dt = new DataTable();
            try
            {
                cmd = new SqlCommand(QueryTemp, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt);
            }
            catch { }

            if (dt.Rows.Count > 0)
            {

                foreach (DataRow dr in dt.Rows)
                {
                    invno = Convert.ToInt32(dr["Inv_No"].ToString());
                    TempInvdate = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy");
                    Inv_Name = dr["Inv_Name"].ToString();

                    Inv_Netamt = Convert.ToInt32(dr["Inv_Netamt"].ToString());

                    double BalAmt = 0;
                    try
                    {
                        BalAmt = Convert.ToDouble(dr["Inv_CurBalAmt"]);
                        BalAmt = BalAmt * -1;
                    }
                    catch { }
                    //if (optPurchase == true || optPharmacy == true)
                    //{
                    //    if (BalAmt == 0)
                    //    {
                    //        BalAmt = Convert.ToDouble(dr["Inv_Netamt"]);
                    //    }
                    //    else
                    //    {
                    //        BalAmt = BalAmt * -1;
                    //    }
                    //}

                    Billwisecollections getdetails = new Billwisecollections()
                    {
                        invno = invno,
                        TempInvdate = TempInvdate,
                        Inv_Name = Inv_Name,
                        Inv_Netamt = Inv_Netamt,
                        BalAmt = BalAmt,


                    };
                    getbillwisecollection.Add(getdetails);

                }

            }
            var jsonResult = Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;


        }








        public JsonResult BILLWISECORPDATA(string optCollectionpur, string optCollectionpha, string optCollection1, string otpUpto, string uptodate, string fromdate, string corpnameid)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            bool optPharmacy = false;
            bool optCollection = false;
            bool optPurchase = false;
            int invno = 0;
            string TempInvdate = "";
            string Inv_Name = "";
            string AhMst_PName = "";
            int Inv_InsId = 0;
            double Inv_Netamt = 0;

            string txtNameid = corpnameid;
            bool chkUpTo = false;
            string txtPhone = "";
            DateTime dtpFrmdate = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
            DateTime dtpUptoDate = DateTime.ParseExact(uptodate, "dd/MM/yyyy", null);

            //string dtpUptoDate = dtpUptoDate1.ToString("yyyy/MM/dd");
            sqlcon = con.dbcon();
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            if (Convert.ToInt32(optCollectionpur) == 1)
            {
                optPurchase = true;
            }
            else
            {
                optPurchase = false;
            }

            if (Convert.ToInt32(optCollectionpha) == 1)
            {
                optPharmacy = true;
            }
            else
            {
                optPharmacy = false;
            }
            if (Convert.ToInt32(otpUpto) == 1)
            {
                chkUpTo = true;
            }
            else
            {
                chkUpTo = false;
            }






            string QueryTemp = "";
            string Ncond = "";
            if (chkUpTo)
            {
                Ncond = "AND Convert(Date, Inv_date)>= '" + dtpFrmdate.ToString("yyyy-MM-dd") + "' AND Convert(Date, Inv_date) <= '" + dtpUptoDate.ToString("yyyy-MM-dd") + "'";
            }
            if (optCollection == true)
            {
                QueryTemp = "SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + txtNameid + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + "  AND Inv_CpyId=" + CompanyId + " " + Ncond + "  ORDER BY Inv_No";
            }
            else if (optPurchase == true)
            {
                QueryTemp = "SELECT PNo AS Inv_No,PSupName AS Inv_name,PInvoiceDate AS Inv_Date,PInvoiceAmount AS Inv_Netamt,PBalAmt As Inv_CurBalAmt FROM PURCHASE WHERE PPayMode='CREDIT' AND PSupId=" + txtNameid + " AND ISNULL(PIsCancelled,0)!=1 AND  ISNULL(PPaidAmt,0)!=PInvoiceAmount AND PFinYearID=" + YearId + " AND PCmpID=" + CompanyId + "  ORDER BY PInvoiceNo";

            }
            else
            {
                QueryTemp = "SELECT InvNo AS Inv_No,InvAccName AS Inv_name,InvDate AS Inv_Date,InvCreditAmount AS Inv_Netamt,InvCurBal As Inv_CurBalAmt FROM Pharma_Invoice WHERE InvCredit='True' AND InvAccCode='" + txtNameid + "' AND ISNULL(InvIsCancelled,0)!=1 AND  ISNULL(InvCurRec,0)!=InvCreditAmount AND InvFinyearID=" + YearId + " AND InvCompanyID=" + CompanyId + "  ORDER BY InvNo";

            }
            //SqlCommand cmd = new SqlCommand("SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt FROM Invoice_Mst WHERE Inv_PayMode='Credit' AND Inv_InsId=" + txtName.Tag + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + cPublic.YearId + " AND Inv_CpyId=" + cPublic.CompanyId + "  ORDER BY Inv_No ", Common.myConnectionVM);
            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter sda = new SqlDataAdapter();
            DataTable dt = new DataTable();
            try
            {
                cmd = new SqlCommand(QueryTemp, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt);
            }
            catch { }

            //int GrdRow = 0;
            //dtnewsrch = dt;
            //grdPendingQ.Rows.Clear();
            //if (dt.Rows.Count > 0)
            //{
            //    grdPendingQ.RowCount = dt.Rows.Count;
            //}
            if (dt.Rows.Count > 0)
            {

                foreach (DataRow dr in dt.Rows)
                {
                    invno = Convert.ToInt32(dr["Inv_No"].ToString());
                    TempInvdate = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy");
                    Inv_Name = dr["Inv_Name"].ToString();
                    //AhMst_PName = dr["AhMst_PName"].ToString();
                    //Inv_InsId = Convert.ToInt32( dr["Inv_InsId"].ToString());

                    Inv_Netamt = Convert.ToInt32(dr["Inv_Netamt"].ToString());
                    //txtPhone = dr["AhMst_Mobile"].ToString();


                    double BalAmt = 0;
                    try
                    {
                        BalAmt = Convert.ToDouble(dr["Inv_CurBalAmt"]);
                        BalAmt = BalAmt * -1;
                    }
                    catch { }
                    if (optPurchase == true || optPharmacy == true)
                    {
                        if (BalAmt == 0)
                        {
                            BalAmt = Convert.ToDouble(dr["Inv_Netamt"]);
                        }
                        else
                        {
                            BalAmt = BalAmt * -1;
                        }
                    }

                    Billwisecollections getdetails = new Billwisecollections()
                    {
                        invno = invno,
                        TempInvdate = TempInvdate,
                        Inv_Name = Inv_Name,
                        Inv_Netamt = Inv_Netamt,
                        BalAmt = BalAmt,


                    };
                    getbillwisecollection.Add(getdetails);

                }

            }
            var jsonResult = Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;

        }













        public JsonResult GETBILLWISECORP(string selectbillMode, string areaid, string optCollection1)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            int cArea = 0;
            string txtAreaid = areaid;
            string cmbMode = selectbillMode;
            string txtName = "";
            string txtNameid = "";
            string txtPhone = "";
            string invno = "";
            string TempInvdate = "";
            string Inv_Name = "";
            string AhMst_PName = "";
            string Inv_InsId = "";
            string AhMst_Mobile = "";
            string Inv_Netamt = "";
            bool optCollection = false;
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            string cPayType = "", condtnArea = "", condtnPayType = "";

            try
            {
                cArea = Convert.ToInt32(txtAreaid);
            }
            catch { }
            cPayType = cmbMode;

            if (cArea != 0)
            {
                condtnArea = "AND AhMst_AreaID='" + cArea + "'";
            }
            if (cPayType != "")
            {
                condtnPayType = "AND AhMst_PayType='" + cPayType + "'";
            }


            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            cmd.Connection = sqlcon;
            sqlcon.Open();
            if (optCollection == true)
            {

                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT AhMst_pName,AhMst_Key,AhMst_Phno  FROM AccountHeads_Mst   where (AhMst_Type='AccHd' Or AhMst_Type='Hosp') and AhMst_IsActive=1 " + condtnArea + condtnPayType;

                cmd.ExecuteNonQuery();



            }

            DataTable dt = new DataTable();
            sda.Fill(dt);
            if (dt.Rows.Count > 0)
            {

                foreach (DataRow dr1 in dt.Rows)
                {
                    txtName = dr1["AhMst_pName"].ToString();
                    txtNameid = dr1["AhMst_Key"].ToString();
                    txtPhone = dr1["AhMst_Phno"].ToString();



                    BillWiseCollectionArea getdetails1 = new BillWiseCollectionArea()
                    {
                        txtName = txtName,
                        txtNameid = txtNameid,
                        txtPhone = txtPhone
                    };
                    TempData["mydata"] = getdetails1;

                    getbillwisecollection.Add(getdetails1);
                }
            }
            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BILLWISEFETCH(string selectbillMode, string areaid, string corpid, string chkup, string update)
        {
            logindetails l = Session["logindls"] as logindetails;
            BillWiseCollectionArea data = TempData["mydata"] as BillWiseCollectionArea;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            string invno = "";
            string TempInvdate = "";
            string Inv_Name = "";
            string AhMst_PName = "";
            string Inv_InsId = "";
            string AhMst_Mobile = "";
            string Inv_Netamt = "";
            string txtPhone = "";
            string QueryTemp = "";

            int bCorpId = 0;
            string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "", condtnUpTo = "";
            //String uptoDate = "";
            int CorpAreaId = 0;
            string CorpPayMode = "";
            string txtNameid = corpid;
            string txtAreaid = areaid;
            string cmbMode = selectbillMode;
            DateTime dtpUptoDate1 = DateTime.ParseExact(update, "dd/MM/yyyy", null);
            string dtpUptoDate = dtpUptoDate1.ToString("yyyy/MM/dd");
            //dtpUptoDate= DateTime.Now.ToString


            bool chkUpTo = false;
            if (Convert.ToInt32(chkup) == 1)
            {
                chkUpTo = true;
            }
            else
            {
                chkUpTo = false;
            }
            //**********************VALUES*******
            try
            {
                bCorpId = Convert.ToInt32(txtNameid);
            }
            catch { }
            try
            {
                CorpAreaId = Convert.ToInt32(txtAreaid);
            }
            catch { }
            try
            {
                CorpPayMode = cmbMode.ToString();
            }
            catch { }
            //********************************************

            //************************* CONDITIONS********
            if (CorpAreaId != 0)
            {
                condtnArea = "AND AhMst_AreaID=" + CorpAreaId;
            }
            else
            {
                condtnArea = "";
            }

            if (CorpPayMode != "")
            {
                condtnPayMode = "AND AhMst_PayType='" + CorpPayMode + "'";
            }
            else
            {
                condtnPayMode = "";
            }
            if (bCorpId != 0)
            {
                condtnCorp = "AND Inv_InsId=" + bCorpId;
            }
            else
            {
                condtnCorp = "";
            }
            if (chkUpTo == true)
            {
                condtnUpTo = "AND CONVERT(DATE,Inv_Date)<='" + dtpUptoDate + "'";
            }
            else
            {
                condtnUpTo = "";
            }
            //********************************************


            QueryTemp = "SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt,AhMst_PName,Inv_InsId,AhMst_Mobile FROM Invoice_Mst left join AccountHeads_Mst on Ahmst_Key=Inv_InsId WHERE Inv_PayMode='Credit' AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + condtnArea + condtnPayMode + condtnCorp + condtnUpTo + "  ORDER BY AhMst_PName,Inv_No";
            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter sda = new SqlDataAdapter();
            DataTable dt = new DataTable();
            try
            {
                cmd = new SqlCommand(QueryTemp, sqlcon);
                sda = new SqlDataAdapter(cmd);
                sda.Fill(dt);
            }
            catch { }
            int GrdRow = 0;
            if (dt.Rows.Count > 0)
            {

                foreach (DataRow dr in dt.Rows)
                {
                    invno = dr["Inv_No"].ToString();
                    TempInvdate = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy");
                    Inv_Name = dr["Inv_Name"].ToString();
                    AhMst_PName = dr["AhMst_PName"].ToString();
                    Inv_InsId = dr["Inv_InsId"].ToString();
                    AhMst_Mobile = dr["AhMst_Mobile"].ToString();
                    Inv_Netamt = dr["Inv_Netamt"].ToString();
                    txtPhone = dr["AhMst_Mobile"].ToString();

                    double BalAmt = 0;
                    try
                    {
                        BalAmt = Convert.ToDouble(dr["Inv_CurBalAmt"]);
                        BalAmt = BalAmt * -1;
                    }
                    catch { }
                    BillWiseCollectionArea getdetails = new BillWiseCollectionArea()
                    {
                        invno = invno,
                        TempInvdate = TempInvdate,
                        Inv_Name = Inv_Name,
                        AhMst_PName = AhMst_PName,
                        Inv_InsId = Inv_InsId,
                        AhMst_Mobile = AhMst_Mobile,
                        Inv_Netamt = Inv_Netamt,
                        BalAmt = Convert.ToString(BalAmt),
                        txtPhone = txtPhone,

                    };
                    getbillwisecollection.Add(getdetails);

                }
            }
            //TotalAmounts();
            //**********************************************

            var jsonResult = Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
            NewMethod(jsonResult);
            return jsonResult;

        }
        public JsonResult BILLWISEFETCHLABEL(string selectbillMode, string areaid, string corpid, string chkup, string update)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            string txtNameid = corpid;



            int CorpId = 0;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);
            }
            catch { }
            if (CorpId != 0)
            {

                SqlCommand cmd1 = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE vchr_Id=" + CorpId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);

                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);



                double Payments = 0;
                double Receipts = 0;
                double Bal = 0;

                int AccId = 0;

                foreach (DataRow dr in dt1.Rows)
                {

                    try
                    {
                        AccId = Convert.ToInt32(dr["vchr_Id"]);
                    }
                    catch { }

                    try
                    {
                        Payments = Convert.ToDouble(dr["Payment"]);

                    }
                    catch { Payments = 0; }
                    try
                    {
                        Receipts = Convert.ToDouble(dr["Receipts"]);

                    }

                    catch { Receipts = 0; }
                    Bal = Receipts - Payments;
                    LblSumm = "Total Billed:" + Payments + "  " + "Total Collected:" + Receipts + "  " + "Balance:" + Bal;
                    BillWiseCollectionArea getlblsumm = new BillWiseCollectionArea()
                    {
                        LblSumm = LblSumm
                    };
                    getbillwisecollection.Add(getlblsumm);
                }
            }

            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }




        public JsonResult GETBILLWISECORPDATA(string selectbillMode, string areaid, string optCollection1, string corpnameid)
        {
            logindetails l = Session["logindls"] as logindetails;
            BillWiseCollectionArea data = TempData["mydata"] as BillWiseCollectionArea;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            int cArea = 0;
            string txtAreaid = areaid;

            string cmbMode = selectbillMode;
            string txtName = "";
            string txtNameid = "";
            string txtPhone = "";
            string invno = "";
            string TempInvdate = "";
            string Inv_Name = "";
            string AhMst_PName = "";
            string Inv_InsId = "";
            string AhMst_Mobile = "";
            string Inv_Netamt = "";

            txtNameid = corpnameid;
            bool optCollection = false;
            if (Convert.ToInt32(optCollection1) == 1)
            {
                optCollection = true;
            }
            else
            {
                optCollection = false;
            }
            string cPayType = "", condtnArea = "", condtnPayType = "";

            try
            {
                cArea = Convert.ToInt32(txtAreaid);
            }
            catch { }
            cPayType = cmbMode;

            //if (cArea != 0)
            //{
            //    condtnArea = "AND AhMst_AreaID='" + cArea + "'";
            //}
            //if (cPayType != "")
            //{
            //    condtnPayType = "AND AhMst_PayType='" + cPayType + "'";
            //}


            SqlCommand cmd = new SqlCommand();
            cmd.Connection = sqlcon;
            sqlcon.Open();

            SqlDataAdapter sda = new SqlDataAdapter(cmd);

            string QueryTemp = "";
            SqlCommand cmd3 = new SqlCommand();
            cmd3.Connection = sqlcon;

            //sqlcon.Open();
            SqlDataAdapter sda2 = new SqlDataAdapter(cmd3);
            DataTable dtt = new DataTable();
            if (optCollection == true)
            {
                QueryTemp = "SELECT Inv_No,Inv_name,Inv_Date,Inv_Netamt,Inv_CurBalAmt,AhMst_PName,Inv_InsId,AhMst_Mobile FROM Invoice_Mst left join AccountHeads_Mst on Ahmst_Key=Inv_InsId WHERE Inv_PayMode='Credit' AND Inv_InsId=" + txtNameid + " AND Inv_Status!=-1 AND Invl_IsPending!=0 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "  ORDER BY Inv_No";
            }

            try
            {

                cmd3 = new SqlCommand(QueryTemp, sqlcon);
                sda = new SqlDataAdapter(cmd3);

                sda.Fill(dtt);
            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;
            }

            if (dtt.Rows.Count > 0)
            {

                foreach (DataRow dr in dtt.Rows)
                {
                    invno = dr["Inv_No"].ToString();
                    TempInvdate = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy");
                    Inv_Name = dr["Inv_Name"].ToString();
                    AhMst_PName = dr["AhMst_PName"].ToString();
                    Inv_InsId = dr["Inv_InsId"].ToString();
                    AhMst_Mobile = dr["AhMst_Mobile"].ToString();
                    Inv_Netamt = dr["Inv_Netamt"].ToString();
                    txtPhone = dr["AhMst_Mobile"].ToString();

                    double BalAmt = 0;
                    try
                    {
                        BalAmt = Convert.ToDouble(dr["Inv_CurBalAmt"]);
                        BalAmt = BalAmt * -1;
                    }
                    catch { }
                    BillWiseCollectionArea getdetails = new BillWiseCollectionArea()
                    {
                        invno = invno,
                        TempInvdate = TempInvdate,
                        Inv_Name = Inv_Name,
                        AhMst_PName = AhMst_PName,
                        Inv_InsId = Inv_InsId,
                        AhMst_Mobile = AhMst_Mobile,
                        Inv_Netamt = Inv_Netamt,
                        BalAmt = Convert.ToString(BalAmt),
                        txtPhone = txtPhone,

                    };
                    getbillwisecollection.Add(getdetails);

                }
            }



            //TotalAmounts();
            //**********************************************



            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GETLABLSUMM(string corpnameid)
        {
            logindetails l = Session["logindls"] as logindetails;
            BillWiseCollectionArea data = TempData["mydata"] as BillWiseCollectionArea;
            List<BillWiseCollectionArea> getbillwisecollection = new List<BillWiseCollectionArea>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            string txtNameid = corpnameid;
            //public JsonResult GETAutoAlloc(string selectallbillwise,string allowamt)
            //{

            int CorpId = 0;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);
            }
            catch { }

            SqlCommand cmd1 = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE vchr_Id=" + CorpId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);

            SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
            DataTable dt1 = new DataTable();
            sda1.Fill(dt1);



            double Payments = 0;
            double Receipts = 0;
            double Bal = 0;

            int AccId = 0;

            foreach (DataRow dr in dt1.Rows)
            {

                try
                {
                    AccId = Convert.ToInt32(dr["vchr_Id"]);
                }
                catch { }

                try
                {
                    Payments = Convert.ToDouble(dr["Payment"]);

                }
                catch { Payments = 0; }
                try
                {
                    Receipts = Convert.ToDouble(dr["Receipts"]);

                }

                catch { Receipts = 0; }
                Bal = Receipts - Payments;
                LblSumm = "Total Billed:" + Payments + "  " + "Total Collected:" + Receipts + "  " + "Balance:" + Bal;
            }
            BillWiseCollectionArea getlblsumm = new BillWiseCollectionArea()
            {
                LblSumm = LblSumm
            };
            getbillwisecollection.Add(getlblsumm);




            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GETBILLWISELABLSUMM(string corpnameid)
        {
            logindetails l = Session["logindls"] as logindetails;

            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string LblSumm = "";
            sqlcon = con.dbcon();
            string txtNameid = corpnameid;
            //public JsonResult GETAutoAlloc(string selectallbillwise,string allowamt)
            //{

            int CorpId = 0;
            try
            {
                CorpId = Convert.ToInt32(txtNameid);
            }
            catch { }

            SqlCommand cmd1 = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE vchr_Id=" + CorpId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);

            SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
            DataTable dt1 = new DataTable();
            sda1.Fill(dt1);



            double Payments = 0;
            double Receipts = 0;
            double Bal = 0;

            int AccId = 0;

            foreach (DataRow dr in dt1.Rows)
            {

                try
                {
                    AccId = Convert.ToInt32(dr["vchr_Id"]);
                }
                catch { }

                try
                {
                    Payments = Convert.ToDouble(dr["Payment"]);

                }
                catch { Payments = 0; }
                try
                {
                    Receipts = Convert.ToDouble(dr["Receipts"]);

                }

                catch { Receipts = 0; }
                Bal = Receipts - Payments;
                LblSumm = "Total Billed:" + Payments + "  " + "Total Collected:" + Receipts + "  " + "Balance:" + Bal;
            }
            Billwisecollections getlblsumm = new Billwisecollections()
            {
                LblSumm = LblSumm
            };
            getbillwisecollection.Add(getlblsumm);




            return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
        }

        public JsonResult TDSAMOUNTGET(string tdsamt, string totalallowamt)
        {

            logindetails l = Session["logindls"] as logindetails;
            Billwisecollections data = Session["data"] as Billwisecollections;
            List<Billwisecollections> getbillwisecollection = new List<Billwisecollections>();
            List<StoreBillWiseDetails> storebillwisecollection = new List<StoreBillWiseDetails>();
            SqlConnection sqlcon = new SqlConnection();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            double Tdsamt = 0;
            string txtTdsamt = tdsamt;
            double Bankamt = 0;
            double txtbankamt = 0;
            string tdid = "";
            double totalAllocAmt = 0;

            totalAllocAmt = Convert.ToInt32(totalallowamt);


            List<Billwisecollections> getkey = new List<Billwisecollections>();

            sqlcon = con.dbcon();
            //Select AhMst_pName As Corpoarte, Sum(vchr_Payment)As Payment, SUM(vchr_Receipt) As Receipts, vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id = Ahmst.AhMst_Key WHERE vchr_Id = " + CorpId + " AND vchr_YrId = " + YearId + " AND vchr_CpyId = " + CompanyId + " GROUP BY AhMst_pName, vchr_Id Order By AhMst_pName", sqlcon);
            SqlCommand cmd = new SqlCommand("SELECT  AhMst_Key FROM AccountHeads_Mst WITH (NOLOCK) ORDER BY AhMst_Key", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt6 = new DataTable();
            sda.Fill(dt6);
            foreach (DataRow dr in dt6.Rows)
            {


                string ackey = (dr["AhMst_Key"]).ToString();
                string acckey = ackey;
                var tdsid = (from c in db.SETTINGS
                             where c.StgValue == acckey
                             select c.StgValue).FirstOrDefault();


                tdid = tdsid;

            }

            Billwisecollections key = new Billwisecollections()
            {
                TdsId = tdid

            };
            Session["data"] = key;
            getkey.Add(key);

            string TdId = tdid;
            int TdsId = Convert.ToInt32(TdId);

            try
            {
                Tdsamt = Convert.ToDouble(txtTdsamt);
            }
            catch { }
            if (Tdsamt > 0)
            {
                if (TdsId == 0)
                {
                    return Json(new { Result = "Tds Account Not Assigned!" });

                    //MessageBox.Show("Tds Account Not Assigned!", cPublic.ProjectName);
                    //txtTdsamt.Text = "";
                    //txtNarr.Focus();
                    //return;
                }
                Bankamt = totalAllocAmt - Tdsamt;
                if (Bankamt > 0)
                {
                    txtbankamt = Bankamt;
                }
                Billwisecollections getamount = new Billwisecollections()
                {
                    txtbankamt = txtbankamt,
                    TdsId = TdId
                };
                getbillwisecollection.Add(getamount);

                return Json(getbillwisecollection, JsonRequestBehavior.AllowGet);
            }
            //else
            //{
            //    txtbankamt.Text = "";
            //}


            return Json(JsonRequestBehavior.AllowGet);

        }

























        public JsonResult DISPLAYPENDININGVIEW(string pendviewlabno)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<PENDINGCOLLECTION> getedit = new List<PENDINGCOLLECTION>();
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            try
            {
                string txtLabNo = "";
                double YearId = (double)l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                string txtlab = "";
                string txtnme = "";
                string txtSCharge = "";
                string txtnetamt = "";
                string txtTotal = "";
                string txtPaidAmount = "";
                string txtBalance = "";
                string txtpaymode = "";
                string txtDiscReason = "";
                string cmbDiscPer = "";
                string txtDiscAmt = "";
                txtLabNo = pendviewlabno;
                //SqlCommand sqlCmd = new SqlCommand();
                //sqlCmd.Connection = sqlcon;
                //sqlCmd.CommandType = CommandType.Text;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select [Inv_CurRcvdAmt],[Inv_CurBalAmt],[Invl_DiscPer],[Inv_DiscAmt],[Inv_DiscId],[Mstr_Desc],[Inv_PayMode],Inv_RcvdAmt,[Inv_BalAmt],Inv_No,Inv_name,[Inv_GrosAmt],[Inv_Netamt],[Inv_Schrge] from [dbo].[Invoice_Mst] left join [dbo].[Masters] on [Mstr_Key]=Inv_DiscId where [Inv_No]=" + txtLabNo + " AND Inv_YrId=" + YearId + "AND [Inv_CpyId]=" + CompanyId + "";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataTable tb = new DataTable();
                adapt.Fill(tb);
                foreach (DataRow dr in tb.Rows)
                {
                    txtlab = dr["Inv_No"].ToString();
                    txtnme = dr["Inv_name"].ToString();
                    txtSCharge = dr["Inv_Schrge"].ToString();
                    txtnetamt = dr["Inv_Netamt"].ToString();
                    txtTotal = dr["Inv_GrosAmt"].ToString();
                    txtPaidAmount = dr["Inv_CurRcvdAmt"].ToString();
                    txtBalance = dr["Inv_CurBalAmt"].ToString();
                    txtpaymode = dr["Inv_PayMode"].ToString();
                    txtDiscReason = dr["Mstr_Desc"].ToString();
                    cmbDiscPer = dr["Invl_DiscPer"].ToString();
                    txtDiscAmt = dr["Inv_DiscAmt"].ToString();
                }
                PENDINGCOLLECTION getpndlist = new PENDINGCOLLECTION()

                {
                    pendviewlabno = txtlab,
                    pndviewname = txtnme,
                    pndscharge = txtSCharge,
                    pndnetamt = txtnetamt,
                    pndviewtotal = txtTotal,
                    pndpaidnetamt = txtPaidAmount,
                    pndBalance = txtBalance,
                    pndpaymodeview = txtpaymode,
                    pnddiscrson = txtDiscReason,
                    discperview = cmbDiscPer,
                    pndviewdisc = txtDiscAmt
                };
                getedit.Add(getpndlist);
                return Json(getedit, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                var x = ex.Message;

            }
            return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult DISPLAYPENDVIEWTABLE(string pendviewlabno)
        {
            logindetails l = Session["logindls"] as logindetails;
            List<PENDINGCOLLECTION> getedit = new List<PENDINGCOLLECTION>();
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            double YearId = (double)l.Yr_Id;
            double CompanyId = l.BrMst_Key;
            string txtLabNo = "";
            string TESTNAME = "";
            string RATE = "";
            double DISCAMT = 0;
            string TOTAL = "";
            string TESTCODE = "";
            txtLabNo = pendviewlabno;

            SqlCommand cmd = new SqlCommand();
            cmd.Connection = sqlcon;
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "select [TstMst_ShortName],[TstMst_name],[InvItm_TstId],InvItm_Orgrate,[InvItm_DiscAmt],[InvItm_rate] from [dbo].[Invoice_Det] left join Test_Mst ON [InvItm_TstId]=[TstMst_Key] where [InvItm_Invno]=" + txtLabNo + " and [InvItm_YrId]=" + YearId + " and [InvItm_CpyId]=" + CompanyId + " ";
            SqlDataAdapter adapt = new SqlDataAdapter(cmd);
            DataTable tb = new DataTable();
            adapt.Fill(tb);

            //datagridtest.Rows.Clear();

            int i = 0;
            if (tb.Rows.Count > 0)
            {


                try
                {

                    foreach (DataRow dr in tb.Rows)
                    {

                        try
                        {
                            TESTNAME = dr["TstMst_name"].ToString();
                            RATE = dr["InvItm_Orgrate"].ToString();
                            DISCAMT = Convert.ToDouble(dr["InvItm_DiscAmt"].ToString());
                            TOTAL = dr["InvItm_rate"].ToString();
                            TESTCODE = dr["TstMst_ShortName"].ToString();

                            PENDINGCOLLECTION getpndlist = new PENDINGCOLLECTION()

                            {
                                TESTNAME = TESTNAME,
                                RATE = RATE,
                                DISCAMT = DISCAMT,
                                TOTAL = TOTAL,
                                TESTCODE = TESTCODE

                            };
                            getedit.Add(getpndlist);

                        }
                        catch { }
                    }
                    var jsonResult = Json(getedit, JsonRequestBehavior.AllowGet);
                    NewMethod(jsonResult);
                    return jsonResult;
                    //return Json(getedit,JsonRequestBehavior.AllowGet);
                }
                catch { }
            }
            return Json(JsonRequestBehavior.AllowGet);
        }

        [HttpPost]

//**************************DISPLAY-EDIT-INVOICE-****************************************
        public JsonResult DISPLAYEDITINVOICE(string editlabno)
        {
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                List<accountledgercs> getedit = new List<accountledgercs>();
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;
                int nInvNo = 0;
                nInvNo = Convert.ToInt16(editlabno);
                //bool txtPhone;
                //txtPhone = true;
                int txtLabNoid = 0;
                string txtLabNo = "";
                double? YearId = l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                string txtPassport = "";
                string txtSRFno = "";
                string txtAadhaar = "";
                DateTime dtpDate;
                string cmbPrefix = "";
                string cmbPayMode = "";
                string txtName = "";
                int txtNameid = 0;
                int _EnbleConPPat = 1;
                bool editfemale = false;
                bool editmale = false;
                string cmbAgeIn = "";
                string txtAgeYears = "";
                string txtmonth = "";
                int editInvDisPh = 0;
                string txtEmail = "";
                string txtMob = "";
                int txtRefByid = 0;
                string txtRefBy = "";
                string txtOutDr = "";
                int txtBranchid = 0;
                string txtBranchNo = "";
                int txtCollModeid = 0;
                int txtCollByid = 0;
                string txtWard = "";
                int txtWardid = 0;
                string txtNationality = "";
                bool dtpDOB = false;
                string dtpSampleOn = "";
                string dtpRportOn = "";
                bool chkPersonally = false;
                bool chkCourier = false;
                bool chkTelephone = false;
                bool chkEmail = false;
                bool chkWhatsApp = false;
                bool chkSms = false;
                string txtReleaseMode = "";
                string txtNote = "";
                string txtAddress = "";
                int Inv_Status = 0;
                bool chkUrgentReport = false, LblStatusid = false;
                string txtBranch = "";
                string txtCollMode = "";
                string txtCollBy = "", LblPatent = "", LblStatus = "";
                txtLabNo = Convert.ToString(nInvNo);
                string txtPhone = "";
                string cmbGender = "";



                bool LblPateniId = false;
                try
                {
                    nInvNo = Convert.ToInt32(txtLabNo);
                }
                catch { }
                int TempInvNo = 0;
                SqlCommand cmd = new SqlCommand("SELECT ISNULL(Inv_No,0) from Invoice_Mst WHERE Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + " AND Inv_No=" + nInvNo + " AND Inv_Status<>-1", sqlcon);
                TempInvNo = Convert.ToInt32(cmd.ExecuteScalar());
                if (TempInvNo == 0)
                {

                    nInvNo = 0;
                }

                if (nInvNo < 1)
                {
                    //MessageBox.Show("Record Not Found", cPublic.ProjectName);
                    txtLabNo = "";

                }
                SqlCommand sqlcmd0 = new SqlCommand();
                sqlcmd0.Connection = sqlcon;
                sqlcmd0.CommandType = CommandType.Text;
                sqlcmd0.CommandText = "SELECT ISNULL(Inv_No, 0) AS Inv_No, ISNULL(Inv_MemberCode,'') AS Inv_MemberCode, ISNULL(Inv_RevInc,0) AS Inv_RevInc, ISNULL(Inv_PrintBillC,0) AS Inv_PrintBillC, ISNULL(Inv_ModalitDiv,0) AS Inv_ModalitDiv, ISNULL(Inv_Passport,'') AS Inv_Passport, ISNULL(Inv_Mob,'') AS Inv_Mob, ISNULL(Inv_AutoMail,0) AS Inv_AutoMail, ISNULL(Inv_SRFno,'') AS Inv_SRFno, ISNULL(Inv_Area,'') AS Inv_Area, ISNULL(Inv_Ward,'') AS Inv_Ward, ISNULL(Inv_WardId,0) AS Inv_WardId, ISNULL(Inv_IsInsrnce,0) AS Inv_IsInsrnce, ISNULL(Inv_PntId,0) AS Inv_PntId, ISNULL(Inv_PntInvId,0) AS Inv_PntInvId, ISNULL(Inv_PayMode,0) AS Inv_PayMode, ISNULL(Inv_Tittle,'') AS Inv_Tittle, ISNULL(Inv_name,'') AS Inv_name, ISNULL(Inv_Gender,'') AS Inv_Gender, ISNULL(Inv_age,0) AS Inv_age, ISNULL(Inv_ageymd,'') AS Inv_ageymd, ISNULL(Inv_phno,'') AS Inv_phno, ISNULL(Inv_Address,'') AS Inv_Address, Inv_SmplDate, ISNULL(Inv_RsltNO,'') AS Inv_RsltNO," + Environment.NewLine
              + "ISNULL(Inv_BrID,0) AS Inv_BrID,(select isnull(BrMst_Code, '') from dbo.Baranches_Mst where BrMst_Key = i.Inv_BrID) Inv_BrCode,Inv_Date,Inv_time,ISNULL(Inv_InsId, 0) AS Inv_InsId, ISNULL(Inv_InsNo,0) AS Inv_InsNo, ISNULL(Inv_AreaId,0) AS Inv_AreaId, ISNULL(Inv_EmailtoPatient,0) AS Inv_EmailtoPatient, ISNULL(Inv_Email,'') AS Inv_Email, ISNULL(Inv_EtoDr,0) AS Inv_EtoDr, ISNULL(Inv_DrId,0) AS Inv_DrId, ISNULL(Inv_OutDr,'') AS Inv_OutDr, ISNULL(Inv_ageYY,0) AS Inv_ageYY,ISNULL(Inv_ageMM,0) AS Inv_ageMM,ISNULL(Inv_ageDD,0) AS Inv_ageDD, ISNULL(Inv_hospId,0) AS Inv_hospId, ISNULL(Inv_Schrge,0) AS Inv_Schrge, ISNULL(Inv_DiscId,0) AS Inv_DiscId, ISNULL(Inv_CltnID,0) AS Inv_CltnID," + Environment.NewLine
                + " ISNULL(Invl_DiscPer,0) AS Invl_DiscPer, Inv_RepTime, ISNULL(Inv_GrosAmt,0) AS Inv_GrosAmt, ISNULL(Inv_DiscAmt,0) AS Inv_DiscAmt, ISNULL(Inv_OthAmt,0) AS Inv_OthAmt, ISNULL(Inv_Netamt,0) AS Inv_Netamt, ISNULL(Inv_RcvdAmt,0) AS Inv_RcvdAmt, ISNULL(Inv_BalAmt,0) AS Inv_BalAmt, ISNULL(Inv_Comment,'') AS Inv_Comment, Inv_CmpltdDate, ISNULL(Inv_CmpltdTime,'') AS Inv_CmpltdTime, ISNULL(Inv_OthCmnt,'') AS Inv_OthCmnt, ISNULL(Inv_User,'') AS Inv_User, ISNULL(Invl_IsPending,0) AS Invl_IsPending," + Environment.NewLine
                   + "ISNULL(Inv_Status,0) AS Inv_Status, ISNULL(Inv_CnlComnt,'') AS Inv_CnlComnt, ISNULL(Inv_Cnltmestmp,'') AS Inv_Cnltmestmp, ISNULL(Inv_CurRcvdAmt,0) AS Inv_CurRcvdAmt, ISNULL(Inv_CurBalAmt,0) AS Inv_CurBalAmt, ISNULL(Inv_UsrId,0) AS Inv_UsrId, ISNULL(Inv_YrId,0) AS Inv_YrId, ISNULL(Inv_CpyId,0) AS Inv_CpyId, ISNULL(Inv_Updtd,0) AS Inv_Updtd, ISNULL(Inv_ItemDesc,'') AS Inv_ItemDesc, ISNULL(Inv_RepThrPersonal,0) AS Inv_RepThrPersonal, ISNULL(Inv_RepThrCourier,0) AS Inv_RepThrCourier," + Environment.NewLine
                   + "ISNULL(Inv_RepThrPhone,0) AS Inv_RepThrPhone, ISNULL(Inv_RepThrEmail,0) AS Inv_RepThrEmail, ISNULL(Inv_RepThrSms,0) AS Inv_RepThrSms, ISNULL(Inv_RptMode,0) AS Inv_RptMode, ISNULL(Inv_RepThrPersonal,0) AS Inv_RepThrPersonal, ISNULL(Inv_WhatsApp,0) AS Inv_WhatsApp, ISNULL(Inv_RepThrCourier,0) AS Inv_RepThrCourier, ISNULL(Inv_RepThrPhone,0) AS Inv_RepThrPhone, ISNULL(Inv_RepThrEmail,0) AS Inv_RepThrEmail, ISNULL(Inv_RepThrSms,0) As Inv_RepThrSms, ISNULL(Inv_RptMode,'') AS Inv_RptMode, ISNULL(Inv_DocPath1,'') AS Inv_DocPath1," + Environment.NewLine
                    + "ISNULL(Inv_DocPath2,'') AS Inv_DocPath2, ISNULL(Inv_DocPath3,'') AS Inv_DocPath3," + Environment.NewLine
                     + "ISNULL(Inv_CollModeId,0) As Inv_CollModeId, ISNULL(Inv_PresChck,0) AS Inv_PresChck, ISNULL(Inv_SRFno,'') AS Inv_SRFno, ISNULL(Inv_Passport,'') AS Inv_Passport, ISNULL(Inv_ModalitDiv,0) AS Inv_ModalitDiv," + Environment.NewLine
                         + "ISNULL(Inv_Mob,'') AS Inv_Mob, ISNULL(Inv_Aadhaar,'') AS Inv_Aadhaar, Inv_Dob, ISNULL(Inv_Nationality,'') AS Inv_Nationality, ISNULL(Inv_Hcbill,0) AS Inv_Hcbill, ISNULL(Inv_CountryCode,'') AS Inv_CountryCode, ISNULL(Inv_SecMob,'') AS Inv_SecMob" + Environment.NewLine

        + "FROM dbo.Invoice_Mst I WITH(NOLOCK) WHERE Inv_No ='" + editlabno + "' AND Inv_YrId = " + YearId + "AND Inv_CpyId =" + CompanyId + "";
                SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
                DataTable dt0 = new DataTable();
                sd0.Fill(dt0);
                //BO.LabRegistration _ObjLabRegMaster = DA.LabRegistration.GET_INVOICE_MST(nInvNo, cPublic.YearId, cPublic.CompanyId);
                txtLabNo = dt0.Rows[0]["Inv_No"].ToString();

                txtLabNoid = nInvNo;
                txtPassport = dt0.Rows[0]["Inv_Passport"].ToString();
                txtSRFno = dt0.Rows[0]["Inv_SRFno"].ToString();

                txtAadhaar = dt0.Rows[0]["Inv_Aadhaar"].ToString();

                //txtAadhaar.Text = _ObjLabRegMaster.Inv_Aadhaar;
                //O_Aadhaar = txtAadhaar.Text.Trim();
                try
                {
                    dtpDate = Convert.ToDateTime(dt0.Rows[0]["Inv_Date"].ToString());
                    /* dtpDate.Value = Convert.ToDateTime(_ObjLabRegMaster.Inv_Date.ToString())*/
                    ;// + " " + _ObjLabRegMaster.Inv_time.ToString());
                }
                catch { }
                try
                {
                    cmbPrefix = dt0.Rows[0]["Inv_Tittle"].ToString();
                    cmbPayMode = dt0.Rows[0]["Inv_PayMode"].ToString();
                    txtName = dt0.Rows[0]["Inv_name"].ToString();
                    cmbGender = dt0.Rows[0]["Inv_Gender"].ToString();

                    if (dt0.Rows[0]["Inv_Gender"].ToString() == "F")
                    {
                        editfemale = true;
                        cmbGender = "F";

                    }

                    if (dt0.Rows[0]["Inv_Gender"].ToString() == "M")
                    {
                        editmale = true;
                        cmbGender = "M";

                    }

                    txtNameid = Convert.ToInt32(dt0.Rows[0]["Inv_PntId"].ToString());
                    Inv_Status = Convert.ToInt32(dt0.Rows[0]["Inv_Status"].ToString());
                    if (Inv_Status < 0)
                    {
                        return Json(new { Result = "Record Not Found" });
                        //MessageBox.Show("Lab No : " + nInvNo + " Already Cancelled", cPublic.ProjectName);
                        //txtLabNo.Focus();
                        //return;
                    }

                   
                    if (txtNameid > 0 || dt0.Rows[0]["Inv_MemberCode"].ToString() != "")
                    {
                        if (_EnbleConPPat == 0)
                        {
                            //patientEnble(1);
                        }
                        else

                        {
                            LblPateniId = true;
                            LblPatent = "Patient Code :" + dt0.Rows[0]["Inv_PntId"].ToString();
                        }
                    }
                    else

                       
                  
                    txtAgeYears = dt0.Rows[0]["Inv_ageYY"].ToString();
                    cmbAgeIn = dt0.Rows[0]["Inv_ageDD"].ToString();
                    txtmonth = dt0.Rows[0]["Inv_ageMM"].ToString();

                 
                    txtPhone = dt0.Rows[0]["Inv_phno"].ToString();
                    
                    //**************************************

                    if (editInvDisPh == 1)
                    {
                        if (Convert.ToString(txtPhone) != "")
                        {
                            //txtPhone = false;
                        }
                    }
                    //**************************************
                    txtEmail = dt0.Rows[0]["Inv_Email"].ToString();
                    //txtEmail.Text = _ObjLabRegMaster.Inv_Email;
                    txtMob = dt0.Rows[0]["Inv_Mob"].ToString();
                    txtRefByid = Convert.ToInt32(dt0.Rows[0]["Inv_DrId"].ToString());
                    txtRefBy = db.AccountHeads_Mst.Where(p => p.AhMst_Key == txtRefByid).Select(pat => pat.AhMst_pName).FirstOrDefault();

                  
                    txtOutDr = dt0.Rows[0]["Inv_OutDr"].ToString();
                    txtBranchid = Convert.ToInt32(dt0.Rows[0]["Inv_BrID"].ToString());
                    txtBranch = db.Baranches_Mst.Where(p => p.BrMst_Key == txtBranchid).Select(pat => pat.BrMst_Name).FirstOrDefault();
                   
                    txtBranchNo = dt0.Rows[0]["Inv_RsltNO"].ToString();

                    txtCollModeid = Convert.ToInt32(dt0.Rows[0]["Inv_CollModeId"].ToString());
                    txtCollMode = db.Masters.Where(p => p.Mstr_Key == txtCollModeid).Select(pat => pat.Mstr_Desc).FirstOrDefault();
               

                    txtCollByid = Convert.ToInt32(dt0.Rows[0]["Inv_CltnID"].ToString());
                    txtCollBy = db.AccountHeads_Mst.Where(p => p.AhMst_Key == txtCollByid).Select(pat => pat.AhMst_pName).FirstOrDefault();
                 
                    txtWard = dt0.Rows[0]["Inv_Ward"].ToString();
                    txtWardid = Convert.ToInt32(dt0.Rows[0]["Inv_WardId"].ToString());
                    txtNationality = dt0.Rows[0]["Inv_Nationality"].ToString();
                  
                    if (dt0.Rows[0]["Inv_Dob"].ToString() == "" || dt0.Rows[0]["Inv_Dob"].ToString() == null)
                    {
                        dtpDOB = false;
                    }
                    else
                    {
                        dtpDOB = true;
                      
                    }
                    if (Convert.ToInt64(dt0.Rows[0]["Inv_RevInc"]) == 1)
                    {

                      
                        LblStatus = "Reverse Doctor Discount Exsisted..You Can't Change Ref By Option..";
                        LblStatusid = true;
                    }
                    
                    dtpSampleOn = dt0.Rows[0]["Inv_SmplDate"].ToString();
                    dtpRportOn = dt0.Rows[0]["Inv_RepTime"].ToString();
                    var x = dt0.Rows[0]["Inv_RepThrPersonal"].ToString();
                    if (dt0.Rows[0]["Inv_RepThrPersonal"].ToString() == "True")
                    {
                        chkPersonally = true;
                    }
                    if (dt0.Rows[0]["Inv_RepThrCourier"].ToString() == "True")
                    {
                        chkCourier = true;
                    }
                    if (dt0.Rows[0]["Inv_RepThrPhone"].ToString() == "True")
                    {
                        chkTelephone = true;
                    }
                    if (dt0.Rows[0]["Inv_RepThrEmail"].ToString() == "True")
                    {
                        chkEmail = true;
                    }
                    if (dt0.Rows[0]["Inv_WhatsApp"].ToString() == "True")
                    {
                        chkWhatsApp = true;
                    }
                    if (dt0.Rows[0]["Inv_RepThrSms"].ToString() == "True")
                    {
                        chkSms = true;
                    }

                    
                    txtReleaseMode = dt0.Rows[0]["Inv_RptMode"].ToString();
                    txtNote = dt0.Rows[0]["Inv_Comment"].ToString();
                    txtAddress = dt0.Rows[0]["Inv_Address"].ToString();
                    if (Convert.ToInt32(dt0.Rows[0]["Inv_Status"].ToString()) == 2)
                    {
                        chkUrgentReport = true;
                    }


               
                    sqlCmd.CommandType = CommandType.Text;
                    sqlCmd.CommandText = " SELECT  DrBkng_LabNo FROM Booking_Consultation WITH (NOLOCK) WHERE  DrBkng_YrId ='" + YearId + "'" + " AND DrBkng_CpyId ='" + CompanyId + "'" + " AND DrBkng_LabNo ='" + Convert.ToInt32(txtLabNo) + "'";

                    SqlDataAdapter sda2ET1 = new SqlDataAdapter(sqlCmd);
                    DataTable Dt2ET1 = new DataTable();
                    sda2ET1.Fill(Dt2ET1);
                    



                    //***********Set Original Data*********************

                    
                    var O_Inv_User = db.Invoice_Mst.Where(inv => Convert.ToDouble(inv.Inv_No) == Convert.ToDouble(txtLabNo) && inv.Inv_CpyId == (decimal)CompanyId
                  && inv.Inv_YrId == (decimal)CompanyId).FirstOrDefault();
                   

                    //*************************************************

                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                 
                }
                accountledgercs geteditinvoice = new accountledgercs()

                {
                    editlabno = txtLabNo,
                    editlabnoid = txtLabNo,
                    editprefix = cmbPrefix,
                    editname = txtName,
                    editnameid = Convert.ToString(txtNameid),
                    editinvage = Convert.ToInt32(cmbAgeIn),
                    editinvmonth = Convert.ToInt32(txtmonth),
                    editinvyear = Convert.ToInt32(txtAgeYears),
                    editmale = editmale,
                    editfemale = editfemale,
                    editphone2 = txtMob,
                    editemail = txtEmail,
                    editnationality = txtNationality,
                    editaddress = txtAddress,
                    editrefby = txtRefBy,
                    editrefbyid = Convert.ToString(txtRefByid),
                    editoutdr = txtOutDr,
                    editpassport = txtPassport,
                    editsrfno = Convert.ToString(txtSRFno),
                    editbranch = txtBranch,
                    editbranchid = Convert.ToString(txtBranchid),
                    editadhar = Convert.ToString(txtAadhaar),
                    editwardno = txtWard,
                    editwardnoid = Convert.ToString(txtWardid),
                    editcollmode = txtCollMode,
                    editcollmodeid = Convert.ToString(txtCollModeid),
                    editcollby = txtCollBy,
                    editcollbyid = Convert.ToString(txtCollByid),
                    editreporton = dtpRportOn,
                    editsampleon = dtpSampleOn,
                    editpersonality = chkPersonally,
                    edittelephone = chkTelephone,
                    editcourier = chkCourier,
                    chkeditemail = chkEmail,
                    editsms = chkSms,
                    txtReleaseMode = txtReleaseMode,
                    urgentreport = chkUrgentReport,
                    editnote = txtNote,
                    editwastsup = chkWhatsApp,
                    editipopno = txtBranchNo,
                    LblPateniId = LblPatent,
                    editphone = txtPhone,

                };
                TempData["mydata"] = geteditinvoice;
                getedit.Add(geteditinvoice);
                sqlcon.Close();
                return Json(getedit, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var x = ex.Message;
                return Json(JsonRequestBehavior.AllowGet);
            }


        }

//******************END-DISPLAY-EDIT-INVOICE****************************************

     


//******************UPDATE-EDITINVOICE********************************************
        public JsonResult EDITUPDATEINVOICE(accountledgercs editupdate)
        {
            try
            {
             
                logindetails l = Session["logindls"] as logindetails;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;
                int nInvNo = 0, nEditInvNo = 0, result = 0, nAge = 0;
                int txtLabNo = 0, txtNameid = 0;
                int _Phnomandry = 1, txtLabNoid = 0; ;
                string cmbPrefix = "", txtName = "", txtMob = "", txtEmail = "", txtNationality = "";
                bool editmale = false, editfemale = false;
                string txtAddress = "", txtRefBy = "", txtOutDr = "", txtPassport = "", txtSRFno = "", txtBranch = "", txtAadhaar = "";
                int txtRefByid = 0, txtBranchid = 0, txtWardid = 0, txtCollModeid = 0, txtCollByid = 0;
                string txtWard = "", cmbGender = "", txtCollMode = "", txtCollBy = "", LblPatent = "", txtPhone = "";
                string /*dtpRportOn = "",*/ txtReleaseMode = "", txtNote = "", txtBranchNo = "";
                bool chkPersonally = false, chkTelephone = false, chkCourier = false, chkEmail = false, chkSms = false, chkUrgentReport = false, chkWhatsApp = false;
                int allowEntryWithOutAge = 0;
                string InsertMode = "";
                string dtpSampleOn = "";
                string cmbPayMode = "" /*dtpDate = ""*/;
                //string PatDob = "";
                double? YearId = l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                string UserName = l.Usr_Name;
                int UserId = l.Usr_key;
                int txtAgeYears = 0, txtmonth = 0, cmbAgeIn = 0;
                string dtpRportOn = "";
                string dtpDate = "";
                string PatDob = "";
                DateTime dtpDate1 = DateTime.Now;
                dtpDate = dtpDate1.ToString("MM/dd/yyyy");

                //var date = new DateTime(now.Year, now.Month, now.Day,
                //                            now.Hour, now.Minute, 
                //                            now.Second);
                DateTime PatDob1 = DateTime.Now;
                PatDob = PatDob1.ToString("MM/dd/yyyy");

                DateTime dtpRportOn1 = DateTime.Now;
                dtpRportOn = dtpRportOn1.ToString("MM/dd/yyyy");
                DateTime dtpSampleOn1 = DateTime.Now;
                dtpSampleOn = dtpSampleOn1.ToString("MM/dd/yyyy");
               
                try
                {
                    txtLabNo = Convert.ToInt16(editupdate.editlabno);
                  
                    txtLabNoid = txtLabNo;
                    cmbPrefix = editupdate.editprefix;
                    txtName = editupdate.editname;
                    txtNameid = Convert.ToInt16(editupdate.editnameid);
                    cmbAgeIn = editupdate.editinvage;
                    txtmonth = editupdate.editinvmonth;
                    txtAgeYears = editupdate.editinvyear;
                    editmale = editupdate.editmale;
                    editfemale = editupdate.editfemale;
                    txtMob = editupdate.editphone2 ?? "";
                    txtEmail = editupdate.editemail ?? "";
                    txtNationality = editupdate.editnationality ?? "";
                    txtAddress = editupdate.editaddress ?? "";
                    txtRefBy = editupdate.editrefby;
                    txtRefByid = Convert.ToInt16(editupdate.editrefbyid);
                    txtOutDr = editupdate.editoutdr ?? "";
                    txtPassport = editupdate.editpassport ?? "";
                    txtSRFno = editupdate.editsrfno ?? "";
                    txtBranch = editupdate.editbranch;
                    double brid = db.Baranches_Mst.Where(brnch => brnch.BrMst_Name == txtBranch).Select(b => b.BrMst_Key).FirstOrDefault();
                    txtBranchid = Convert.ToInt32(brid);
                    txtAadhaar = editupdate.editadhar ?? "";
                    txtWard = editupdate.editwardno ?? "";
                    txtWardid = Convert.ToInt32(editupdate.editwardnoid);
                    txtCollMode = editupdate.editcollmode;
                    txtCollModeid = Convert.ToInt32(editupdate.editcollmodeid);
                    txtCollBy = editupdate.editcollby;
                    txtCollByid = Convert.ToInt32(editupdate.editcollbyid);
                    dtpRportOn = editupdate.editreporton;
                    dtpSampleOn = editupdate.editsampleon;
                    chkPersonally = editupdate.editpersonality;
                    chkTelephone = editupdate.edittelephone;
                    chkCourier = editupdate.editcourier;
                    chkEmail = editupdate.chkeditemail;
                    chkSms = editupdate.editsms;
                    txtReleaseMode = editupdate.txtReleaseMode;
                    chkUrgentReport = editupdate.urgentreport;
                    txtNote = editupdate.editnote ?? "";
                    chkWhatsApp = editupdate.editwastsup;
                    txtBranchNo = editupdate.editipopno;
                    LblPatent = editupdate.LblPateniId;
                    txtPhone = editupdate.editphone ?? "";
                }

                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;

                }
                try
                {
                    accountledgercs geteditinvoice = TempData["mydata"] as accountledgercs;
                    O_Prefix = geteditinvoice.editprefix;
                    O_InvName = geteditinvoice.editname;
                    O_InPhone = geteditinvoice.editphone;
                    O_Inv_Email = Convert.ToString(geteditinvoice.editemail);
                    O_Inv_Address = geteditinvoice.editaddress;
                    O_Inv_Doctor = geteditinvoice.editrefby;
                    O_Inv_OutDoctor = geteditinvoice.editoutdr;
                    O_Branch = geteditinvoice.editbranch;
                    O_CollMode = geteditinvoice.editcollmode;
                    O_Ward = geteditinvoice.editwardno;
                    O_CollBy = geteditinvoice.editcollby;
                    O_Urgent = geteditinvoice.urgentreport;
                    O_ReptReqTel = geteditinvoice.edittelephone;
                    O_ReptReqEmail = geteditinvoice.chkeditemail;
                    O_ReptReqsms = geteditinvoice.editsms;
                    O_ReptReqCour = geteditinvoice.editcourier;
                    O_ReptReqPer = geteditinvoice.editpersonality;
                    O_Inv_note = geteditinvoice.editnote;
                    O_SampledOn = geteditinvoice.editsampleon;
                    O_Srf = geteditinvoice.editsrfno;
                    o_Inv_Mob = geteditinvoice.editphone2;
                    O_Aadhaar = geteditinvoice.editadhar;
                    O_Nationality = geteditinvoice.editnationality;

                    O_Inv_User = l.Usr_Name;
                    if (geteditinvoice.editmale)
                    {
                        string male = "M";
                        O_Gender = male;

                    }
                    else
                    {
                        string female = "F";
                        O_Gender = female;
                    }
                    O_cmbAgeIn = geteditinvoice.editinvage;
                    O_txtAgeYears = geteditinvoice.editinvyear;
                    O_txtmonth = geteditinvoice.editinvmonth;
                    O_ReportedOn = geteditinvoice.editreporton;


                }
                catch (Exception exe)
                {

                }

                try
                {

                    //txtLabNo = nInvNo;
                    nInvNo = txtLabNo;
                }
                catch { }

                // dont save If Labno is empty
                if (nInvNo < 1)
                {
                    return Json(new { Result = "Invalid Lab No" });

                   
                }
                if (_Phnomandry == 1)
                {
                    if (txtPhone == "")
                    {
                        return Json(new { Result = "Must enter phone number" });
                       
                    }
                }
                try
                {
                    nEditInvNo = Convert.ToInt32(string.IsNullOrEmpty(nInvNo.ToString()) ? "0" : txtLabNoid.ToString());

                   
                }


                catch { }
              




                if (string.IsNullOrEmpty(txtName))
                {
                    return Json(new { Result = "Patient Name Must Be Entered" });


                }

                //// Empty age checking with Company Table // Company_Mst - Comp_NoAge
                try
                {
                    nAge = Convert.ToInt32(txtAgeYears);
                }
                catch { }

              
                if (cmbPrefix != "C/O Hosp.")
                {
                    if (nAge < 1 && cmbAgeIn < 1 && txtmonth < 1)
                    {
                        return Json(new { Result = "Age Must Be Entered" });

                        //MessageBox.Show("Age Must Be Entered", cPublic.ProjectName);
                        //txtAgeYears.Focus();
                        //return;
                    }

                   
                }
                try
                {
                    //var updateeditinvoice = db.Invoice_Mst.Where(a => a.Inv_No == nEditInvNo).ToList();
                    var updateeditinvoice = (from c in db.Invoice_Mst
                                             where c.Inv_No == nEditInvNo && c.Inv_YrId == (decimal)YearId && c.Inv_CpyId == (decimal)(CompanyId)
                                             select c).FirstOrDefault();
                    if (updateeditinvoice != null)
                    {
                        //Invoice_Mst invoice = new Invoice_Mst();
                        //BO.LabRegistration _ObjLabRegMaster = new BO.LabRegistration();
                        updateeditinvoice.Inv_No = nInvNo;
                        updateeditinvoice.Inv_PayMode = cmbPayMode;
                        updateeditinvoice.Inv_Passport = txtPassport;
                        updateeditinvoice.Inv_SRFno = txtSRFno;

                        if (editmale == true)
                        {
                            updateeditinvoice.Inv_Gender = "M";
                            cmbGender = "M";

                        }
                        if (editfemale == true)
                        {
                            updateeditinvoice.Inv_Gender = "F";
                            cmbGender = "F";

                        }
                        updateeditinvoice.Inv_ageDD = Convert.ToInt32(cmbAgeIn);
                        updateeditinvoice.Inv_ageMM = Convert.ToInt32(txtmonth);
                        updateeditinvoice.Inv_ageYY = Convert.ToInt32(txtAgeYears);
                        updateeditinvoice.Inv_phno = txtPhone;
                        updateeditinvoice.Inv_SmplDate = Convert.ToDateTime(dtpSampleOn);  /*DateTime.ParseExact(dtpSampleOn, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);*/
                        updateeditinvoice.Inv_Date = Convert.ToDateTime(dtpDate); /*DateTime.ParseExact(dtpDate, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);*/
                        updateeditinvoice.Inv_time = Convert.ToDateTime(dtpDate).ToString("hh:mm:ss");
                        if (chkEmail == true)
                        {
                            updateeditinvoice.Inv_EmailtoPatient = 1;
                        }
                        updateeditinvoice.Inv_Email = txtEmail;
                        updateeditinvoice.Inv_DrId = txtRefByid;
                        updateeditinvoice.Inv_OutDr = txtOutDr;
                        updateeditinvoice.Inv_Mob = txtMob;
                        updateeditinvoice.Inv_Dob = Convert.ToDateTime(PatDob);  /*DateTime.ParseExact(PatDob, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture); */
                        updateeditinvoice.Inv_Aadhaar = txtAadhaar;
                        updateeditinvoice.Inv_Nationality = txtNationality;
                        if (txtCollMode != "")
                        {
                            try
                            {
                                updateeditinvoice.Inv_CollModeId = txtCollModeid;
                                //_ObjLabRegMaster.Inv_CollModeId = Convert.ToInt32(string.IsNullOrEmpty(txtCollMode.Tag.ToString()) ? "0" : txtCollMode.Tag.ToString());
                            }
                            catch { }
                        }
                        if (txtCollBy != "")
                        {
                            updateeditinvoice.Inv_CltnID = txtCollByid;
                            //_ObjLabRegMaster.Inv_CltnID = Convert.ToInt32(string.IsNullOrEmpty(txtCollBy.Tag.ToString()) ? "0" : txtCollBy.Tag.ToString());
                        }
                        else
                        {
                            updateeditinvoice.Inv_CltnID = 0;
                            //_ObjLabRegMaster.Inv_CltnID = 0;
                        }
                        updateeditinvoice.Inv_Comment = txtNote;
                        updateeditinvoice.Inv_RptMode = txtReleaseMode;
                        updateeditinvoice.Inv_CmpltdDate = Convert.ToDateTime(dtpRportOn);  /*DateTime.ParseExact(dtpRportOn, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);*/
                        updateeditinvoice.Inv_CmpltdTime = Convert.ToDateTime(dtpRportOn).ToString("hh:mm:ss");
                        updateeditinvoice.Inv_User = UserName;
                        updateeditinvoice.Inv_UsrId = UserId;
                        updateeditinvoice.Inv_YrId = (decimal)YearId;
                        updateeditinvoice.Inv_CpyId = (decimal)CompanyId;
                        updateeditinvoice.Inv_Updtd = nEditInvNo;
                        if (chkPersonally == true)
                        {
                            updateeditinvoice.Inv_RepThrPersonal = true;
                        }
                        if (chkCourier == true)
                        {
                            updateeditinvoice.Inv_RepThrCourier = true;
                        }
                        if (chkTelephone == true)
                        {
                            updateeditinvoice.Inv_RepThrPhone = true;
                        }
                        if (chkEmail == true)
                        {
                            updateeditinvoice.Inv_RepThrEmail = true;
                        }
                        if (chkSms == true)
                        {
                            updateeditinvoice.Inv_RepThrSms = true;
                        }
                        if (chkWhatsApp == true)
                        {
                            updateeditinvoice.Inv_WhatsApp = true;
                        }

                        if (chkUrgentReport)
                        {
                            updateeditinvoice.Inv_Status = 2;
                        }
                        else
                        {
                            updateeditinvoice.Inv_Status = 0;
                        }

                        try
                        {
                            updateeditinvoice.Inv_PntId = Convert.ToDouble(LblPatent);

                            //_ObjLabRegMaster.Inv_PntId = Convert.ToInt32(txtName.Tag.ToString());
                        }
                        catch { }
                        updateeditinvoice.Inv_PntInvId = nInvNo;
                        updateeditinvoice.Inv_Tittle = cmbPrefix;
                        updateeditinvoice.Inv_name = txtName;
                        updateeditinvoice.Inv_Address = txtAddress;
                        updateeditinvoice.Inv_RsltNO = txtBranchNo;
                        updateeditinvoice.Inv_Mob = txtMob;

                        try
                        {
                            updateeditinvoice.Inv_BrID = txtBranchid;
                            //_ObjLabRegMaster.Inv_BrID = Convert.ToInt32(txtBranch.Tag.ToString());
                        }
                        catch { }

                        updateeditinvoice.Inv_Ward = txtWard;
                        //_ObjLabRegMaster.Inv_Ward = txtWard.Text;
                        try
                        {
                            updateeditinvoice.Inv_WardId = txtWardid;
                            //_ObjLabRegMaster.Inv_WardId = Convert.ToInt32(txtWard.Tag);
                        }
                        catch { }
                        updateeditinvoice.Inv_RepTime = Convert.ToDateTime(dtpRportOn);

                        updateeditinvoice.Inv_UserLevel = 1;

                        //updateeditinvoice.Mstr_Code = lookup.codelookup;

                        db.SaveChanges();


                    }
                }

                catch (Exception exe)
                {
                    var x = exe.Message;
                    var y = exe.InnerException;
                    filePathName = Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt";

                }





                if (nInvNo > 0)
                {
                    //*********IcounPub Tables Updation***********
                    //SqlCommand Cmd;
                    ////try
                    ////{
                    var updateinterface = (from c in db.IntrfceMechine_1
                                           where c.IM1_InvNo == nInvNo && c.IM1_YrId == (decimal)YearId && c.IM1_CopyId == (decimal)(CompanyId)
                                           select c).FirstOrDefault();
                    if (updateinterface != null)
                    {
                        updateinterface.IM1_RsltNo = txtBranchNo;
                        db.SaveChanges();
                    }
                    var updatetestorder = (from c in db.Test_Order
                                           where c.TstOrdr_InvNo == nInvNo && c.TstOrdr_YrId == (decimal)YearId && c.TstOrdr_CpyId == (decimal)(CompanyId)
                                           select c).FirstOrDefault();

                    if (updatetestorder != null)
                    {
                        updatetestorder.TstOrdr_PName = txtName;
                        updatetestorder.TstOrdr_Gender = cmbGender;

                        updatetestorder.TstOrdr_Age = cmbAgeIn;
                        db.SaveChanges();
                    }

                    //************************
                    //**********************Saved Modification Datas ************
                    string ModiDes = "";
                    bool dtpDOB = false;
                    string ModiData = "Modified Lab No:" + txtLabNo;
                    int ChngDate = 0;

                    DateTime TempDatetime = DateTime.Now;



                    string TempDat = TempDatetime.ToString("dd-MM-yyyy hh:mm:ss tt");
                    try
                    {
                        TempDatetime = Convert.ToDateTime(TempDatetime);
                    }
                    catch { }
                    if (cmbPrefix != O_Prefix)
                    {

                        ModiDes = "Prefix Changed From " + O_Prefix + " To " + cmbPrefix;
                    }
                    if (txtName != O_InvName)
                    {
                        ModiDes = ModiDes + " Patient Changed From " + O_InvName + " To " + txtName + "\r\n";
                    }
                    if (cmbGender != O_Gender)
                    {
                        ModiDes = ModiDes + " Gender Changed From " + O_Gender + " To " + cmbGender + "\r\n";
                    }
                    if (Convert.ToString(txtAgeYears).ToUpper() != Convert.ToString(O_txtAgeYears) || Convert.ToString(cmbAgeIn).ToUpper() != Convert.ToString(O_cmbAgeIn) || Convert.ToString(txtmonth).ToUpper() != Convert.ToString(O_txtmonth))
                    {
                        ModiDes = ModiDes + " Age Changed From " + O_txtAgeYears + " " + O_cmbAgeIn + " " + O_txtmonth + " To " + txtAgeYears + " " + cmbAgeIn + " " + txtmonth + "\r\n";
                    }
                    if (txtPhone != O_InPhone)
                    {
                        ModiDes = ModiDes + " Phone Changed From " + O_InPhone + " To " + txtPhone + "\r\n";
                    }

                    //txtEmail.ToString() ?? "";
                    if (txtEmail != O_Inv_Email)
                    {
                        ModiDes = ModiDes + " Email Changed From " + O_Inv_Email + " To " + txtEmail + "\r\n";
                    }
                    if (txtAddress != O_Inv_Address)
                    {
                        ModiDes = ModiDes + " Address Changed From " + O_Inv_Address + " To " + txtAddress + "\r\n";
                    }
                    if (txtRefBy != O_Inv_Doctor)
                    {
                        ModiDes = ModiDes + " RefBy Changed From " + O_Inv_Doctor + " To " + txtRefBy + "\r\n";
                    }
                    if (txtOutDr != O_Inv_OutDoctor)
                    {
                        ModiDes = ModiDes + " Out Doctor Changed From " + O_Inv_OutDoctor + " To " + txtOutDr + "\r\n";

                    }
                    if (txtBranch != O_Branch)
                    {
                        ModiDes = ModiDes + " Branch Changed From " + O_Branch + " To " + txtBranch + "\r\n";

                    }
                    if (txtCollMode != O_CollMode)
                    {
                        ModiDes = ModiDes + " Coll.mode Changed From " + O_Inv_Address + " To " + txtCollMode + "\r\n";

                    }
                    if (txtWard != O_Ward)
                    {
                        ModiDes = ModiDes + " Ward No Changed From " + O_Ward + " To " + txtWard + "\r\n";

                    }
                    if (txtCollBy != O_CollBy)
                    {
                        ModiDes = ModiDes + " Coll.By Changed From " + O_CollBy + " To " + txtCollBy + "\r\n";

                    }
                    if (chkUrgentReport != O_Urgent)
                    {
                        ModiDes = ModiDes + " Urgent Report Changed From " + O_Urgent + " To " + chkUrgentReport + "\r\n";

                    }
                    if (chkTelephone != O_ReptReqTel)
                    {
                        ModiDes = ModiDes + " Report.Req.Through Telephone Changed From " + O_ReptReqTel + " To " + chkTelephone + "\r\n";

                    }
                    if (chkSms != O_ReptReqsms)
                    {
                        ModiDes = ModiDes + " Report.Req.Through Sms  Changed From " + O_ReptReqsms + " To " + chkSms + "\r\n";

                    }
                    if (chkEmail != O_ReptReqEmail)
                    {
                        ModiDes = ModiDes + " Report.Req.Through Email Changed From " + chkEmail + " To " + chkEmail + "\r\n";

                    }
                    if (chkCourier != O_ReptReqCour)
                    {
                        ModiDes = ModiDes + " Report.Req.Through Courier Changed From " + O_ReptReqCour + " To " + chkCourier + "\r\n";

                    }
                    if (chkPersonally != O_ReptReqPer)
                    {
                        ModiDes = ModiDes + " Urgent Report Personally Changed From " + O_ReptReqPer + " To " + chkPersonally + "\r\n";

                    }
                    if (txtNote != O_Inv_note)
                    {
                        ModiDes = ModiDes + " Note Changed From " + O_Inv_note + " To " + txtNote + "\r\n";

                    }
                    try
                    {
                        ChngDate = Convert.ToInt32((Convert.ToDateTime(O_ReportedOn) - Convert.ToDateTime(dtpRportOn)).TotalSeconds);
                    }
                    catch { }
                    if (ChngDate != 0)
                    {
                        ModiDes = ModiDes + " Reported On Changed From " + O_ReportedOn + " To " + dtpRportOn + "\r\n";

                    }
                    try
                    {
                        ChngDate = Convert.ToInt32((Convert.ToDateTime(O_SampledOn) - Convert.ToDateTime(dtpSampleOn)).TotalSeconds);
                    }
                    catch { }
                    if (ChngDate != 0)
                    {
                        ModiDes = ModiDes + " Sampled On Changed From " + O_SampledOn + " To " + dtpSampleOn + "\r\n";


                    }
                    if (txtSRFno != O_Srf)
                    {
                        ModiDes = ModiDes + " Srfno Changed From " + O_Srf + " To " + txtSRFno + "\r\n";

                    }
                    if (txtPassport != O_Passport)
                    {
                        ModiDes = ModiDes + " Passport Changed From " + O_Passport + " To " + txtPassport + "\r\n";

                    }
                    if (txtMob != o_Inv_Mob)
                    {
                        ModiDes = ModiDes + " Phone No 2 Changed From " + o_Inv_Mob + " To " + txtMob + "\r\n";

                    }
                    if (txtAadhaar != O_Aadhaar.ToUpper())
                    {
                        ModiDes = ModiDes + " Aadhaar Changed From " + O_Aadhaar + " To " + txtAadhaar + "\r\n";

                    }
                    if (txtNationality != O_Nationality.ToUpper())
                    {
                        ModiDes = ModiDes + " Nationality Changed From " + O_Nationality + " To " + txtNationality + "\r\n";

                    }
                    if (O_Dob != "" || dtpDOB == true)
                    {

                        ModiDes = ModiDes + " Dob Changed From " + O_Dob + " To " + Convert.ToDateTime(dtpDOB).ToString("dd-MM-yyyy") + "\r\n";


                    }
                    if (ModiDes != "")
                    {
                        string editinvoice = "Edit Invoice";
                        string Log_System = System.Environment.MachineName;
                        try
                        {
                            ModiData = ModiData + "\r\n" + ModiDes + "\r\n" + "Old User -" + O_Inv_User + " New User -" + UserName;
                            SqlCommand sqlcmd0 = new SqlCommand();
                            sqlcmd0.Connection = sqlcon;
                            sqlcmd0.CommandType = CommandType.Text;
                            sqlcmd0.CommandText = "INSERT INTO dbo.LogDetails_Mst(Log_TransNo, Log_DateTime, Log_Desc, Log_Form, Log_User, Log_System, Log_UserId, Log_CmpyId, Log_Reason)" + Environment.NewLine

                                                                        + "VALUES(" + txtLabNo + ", '" + TempDatetime + "', '" + ModiData + "','" + editinvoice + "','" + UserName + "','" + Log_System + "', " + UserId + ", " + CompanyId + ",'')";


                           
                            sqlcmd0.ExecuteNonQuery();
                        }
                        catch (Exception exe) { var x = exe.Message; var y = exe.InnerException; }
                    }
                    //***********************************************************
                    string usrLogData = "";
                    usrLogData = "LAB INVOICE EDITED -" + txtLabNo + "_" + txtName;
                    UserTrackInsert(usrLogData, "EDIT INVOICE", 4);
                    //***********************************************************

                    //***************save to patientMaster***********************
                    //int NpatentId = 0;
                    //int _InvPrintType = 1;
                    //try { NpatentId = Convert.ToInt32(LblPatent); } catch { }
                    //int _EnbleConPPat = 1;
                    //if (_EnbleConPPat == 1 && NpatentId > 0)
                    //{
                    //    string ageDob = "";
                    //    int AgeCal = 0;
                    //    try
                    //    {
                    //        if (Convert.ToInt32(cmbAgeIn) == 0)
                    //        {
                    //            AgeCal = DateTime.Now.Year - Convert.ToInt32(txtAgeYears);

                    //            ageDob = DateTime.Now.Month + "-" + DateTime.Now.Day + "-" + AgeCal.ToString();
                    //        }
                    //        else if (Convert.ToInt32(cmbAgeIn) == 1)
                    //        {
                    //            AgeCal = DateTime.Now.Month - Convert.ToInt32(txtAgeYears);
                    //            if (AgeCal > 0)
                    //            {
                    //                ageDob = AgeCal.ToString() + "-" + DateTime.Now.Day + "-" + DateTime.Now.Year;
                    //            }
                    //            else if (AgeCal == 0)
                    //            {
                    //                AgeCal = Convert.ToInt32(txtAgeYears) + AgeCal;
                    //                ageDob = "12" + "-" + DateTime.Now.Day + "-" + (Convert.ToInt32(DateTime.Now.Year) - 1).ToString();
                    //            }
                    //            else
                    //            {
                    //                AgeCal = 12 + AgeCal;
                    //                ageDob = AgeCal.ToString() + "-" + DateTime.Now.Day + "-" + (Convert.ToInt32(DateTime.Now.Year) - 1).ToString();
                    //            }
                    //        }

                    //    }
                    //    catch { }
                    //    string fGender = "F";
                    //    if (cmbGender == "Male")
                    //    {
                    //        fGender = "M";
                    //    }
                    //    SqlCommand cmd = new SqlCommand("Update Patient_Mst SET Patient_Title ='" + cmbPrefix + "',Patient_Name='" + txtName + "',Patient_Ismale='" + fGender + "',Patient_Address='" + txtAddress + "',Patient_Phno='" + txtPhone + "',Patient_Dob='" + ageDob + "',Patient_Email='" + txtEmail + "'  WHERE Patient_Code='" + NpatentId + "'", sqlcon);
                    //    cmd.ExecuteNonQuery();
                    //}
                    //************************************************************

                }


                sqlcon.Close();

            }
            catch (Exception ex)
            {
                var x = ex.Message;
                var y = ex.InnerException;

                //return Json(JsonRequestBehavior.AllowGet);
            }
            return Json(JsonRequestBehavior.AllowGet);
        }
      //*********************END-UPDATE-EDITINVOICE***************************






//**********************DISPLAY-CANCEL-INVOICE**************************
        public JsonResult DISPLAYCANCELINVOICE(string labno)
        {
            List<accountledgercs> getcancel = new List<accountledgercs>();
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            string txtLabNo = "";
            int txtLabNoid = 0;
            string cmbPrefix = "";
            string txtName = "";
            int txtNameid = 0;
            string cmbGender = "";
            int txtAgeYears = 0;
            bool chkPersonally = false;
            int cmbAgeIn = 0;
            string txtPhone = "";
            string txtEmail = "";
            int txtRefByid = 0;
      
            bool chkTelephone = false;
            bool chkCourier = false;
            bool chkEmail = false;
            bool chkSms = false;
            string txtOutDr = "";
            string txtReason = "";
            int YearId = 2223;
            int CompanyId = 2;
            int txtBranchid = 0;
        
            string txtBranchNo = "";
            string dtpDate = "";
            int txtCollByid = 0;
         
            string dtpSampleOn = "";
            string dtpRportOn = "";
            string txtInvAmt = "";
            int Inv_Status = 0;
            bool invmale = false;
            bool invfemale = false;
            int txtmonth = 0;







            int nInvNo = 0, nInvStatus = 0;

            try
            {
                nInvNo = Convert.ToInt32(txtLabNo);
            }
            catch { }
            try
            {
                SqlCommand cmd = new SqlCommand("SELECT ISNULL(Inv_No,0) As TempLAbNo FROM Invoice_Mst WHERE Inv_No=" + nInvNo + " AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + "", sqlcon);

                nInvNo = Convert.ToInt32(cmd.ExecuteScalar());
            }
            catch { }
          
            SqlCommand sqlcmd0 = new SqlCommand();
            sqlcmd0.Connection = sqlcon;
            sqlcmd0.CommandType = CommandType.Text;
            sqlcmd0.CommandText = "SELECT ISNULL(Inv_No, 0) AS Inv_No, ISNULL(Inv_MemberCode,'') AS Inv_MemberCode, ISNULL(Inv_RevInc,0) AS Inv_RevInc, ISNULL(Inv_PrintBillC,0) AS Inv_PrintBillC, ISNULL(Inv_ModalitDiv,0) AS Inv_ModalitDiv, ISNULL(Inv_Passport,'') AS Inv_Passport, ISNULL(Inv_Mob,'') AS Inv_Mob, ISNULL(Inv_AutoMail,0) AS Inv_AutoMail, ISNULL(Inv_SRFno,'') AS Inv_SRFno, ISNULL(Inv_Area,'') AS Inv_Area, ISNULL(Inv_Ward,'') AS Inv_Ward, ISNULL(Inv_WardId,0) AS Inv_WardId, ISNULL(Inv_IsInsrnce,0) AS Inv_IsInsrnce, ISNULL(Inv_PntId,0) AS Inv_PntId, ISNULL(Inv_PntInvId,0) AS Inv_PntInvId, ISNULL(Inv_PayMode,0) AS Inv_PayMode, ISNULL(Inv_Tittle,'') AS Inv_Tittle, ISNULL(Inv_name,'') AS Inv_name, ISNULL(Inv_Gender,'') AS Inv_Gender, ISNULL(Inv_age,0) AS Inv_age, ISNULL(Inv_ageymd,'') AS Inv_ageymd, ISNULL(Inv_phno,'') AS Inv_phno, ISNULL(Inv_Address,'') AS Inv_Address, Inv_SmplDate, ISNULL(Inv_RsltNO,'') AS Inv_RsltNO," + Environment.NewLine
          + "ISNULL(Inv_BrID,0) AS Inv_BrID,(select isnull(BrMst_Code, '') from dbo.Baranches_Mst where BrMst_Key = i.Inv_BrID) Inv_BrCode,Inv_Date,Inv_time,ISNULL(Inv_InsId, 0) AS Inv_InsId, ISNULL(Inv_InsNo,0) AS Inv_InsNo, ISNULL(Inv_AreaId,0) AS Inv_AreaId, ISNULL(Inv_EmailtoPatient,0) AS Inv_EmailtoPatient, ISNULL(Inv_Email,'') AS Inv_Email, ISNULL(Inv_EtoDr,0) AS Inv_EtoDr, ISNULL(Inv_DrId,0) AS Inv_DrId, ISNULL(Inv_OutDr,'') AS Inv_OutDr, ISNULL(Inv_ageYY,0) AS Inv_ageYY,ISNULL(Inv_ageMM,0) AS Inv_ageMM,ISNULL(Inv_ageDD,0) AS Inv_ageDD, ISNULL(Inv_hospId,0) AS Inv_hospId, ISNULL(Inv_Schrge,0) AS Inv_Schrge, ISNULL(Inv_DiscId,0) AS Inv_DiscId, ISNULL(Inv_CltnID,0) AS Inv_CltnID," + Environment.NewLine
            + " ISNULL(Invl_DiscPer,0) AS Invl_DiscPer, Inv_RepTime, ISNULL(Inv_GrosAmt,0) AS Inv_GrosAmt, ISNULL(Inv_DiscAmt,0) AS Inv_DiscAmt, ISNULL(Inv_OthAmt,0) AS Inv_OthAmt, ISNULL(Inv_Netamt,0) AS Inv_Netamt, ISNULL(Inv_RcvdAmt,0) AS Inv_RcvdAmt, ISNULL(Inv_BalAmt,0) AS Inv_BalAmt, ISNULL(Inv_Comment,'') AS Inv_Comment, Inv_CmpltdDate, ISNULL(Inv_CmpltdTime,'') AS Inv_CmpltdTime, ISNULL(Inv_OthCmnt,'') AS Inv_OthCmnt, ISNULL(Inv_User,'') AS Inv_User, ISNULL(Invl_IsPending,0) AS Invl_IsPending," + Environment.NewLine
               + "ISNULL(Inv_Status,0) AS Inv_Status, ISNULL(Inv_CnlComnt,'') AS Inv_CnlComnt, ISNULL(Inv_Cnltmestmp,'') AS Inv_Cnltmestmp, ISNULL(Inv_CurRcvdAmt,0) AS Inv_CurRcvdAmt, ISNULL(Inv_CurBalAmt,0) AS Inv_CurBalAmt, ISNULL(Inv_UsrId,0) AS Inv_UsrId, ISNULL(Inv_YrId,0) AS Inv_YrId, ISNULL(Inv_CpyId,0) AS Inv_CpyId, ISNULL(Inv_Updtd,0) AS Inv_Updtd, ISNULL(Inv_ItemDesc,'') AS Inv_ItemDesc, ISNULL(Inv_RepThrPersonal,0) AS Inv_RepThrPersonal, ISNULL(Inv_RepThrCourier,0) AS Inv_RepThrCourier," + Environment.NewLine
               + "ISNULL(Inv_RepThrPhone,0) AS Inv_RepThrPhone, ISNULL(Inv_RepThrEmail,0) AS Inv_RepThrEmail, ISNULL(Inv_RepThrSms,0) AS Inv_RepThrSms, ISNULL(Inv_RptMode,0) AS Inv_RptMode, ISNULL(Inv_RepThrPersonal,0) AS Inv_RepThrPersonal, ISNULL(Inv_WhatsApp,0) AS Inv_WhatsApp, ISNULL(Inv_RepThrCourier,0) AS Inv_RepThrCourier, ISNULL(Inv_RepThrPhone,0) AS Inv_RepThrPhone, ISNULL(Inv_RepThrEmail,0) AS Inv_RepThrEmail, ISNULL(Inv_RepThrSms,0) As Inv_RepThrSms, ISNULL(Inv_RptMode,'') AS Inv_RptMode, ISNULL(Inv_DocPath1,'') AS Inv_DocPath1," + Environment.NewLine
                + "ISNULL(Inv_DocPath2,'') AS Inv_DocPath2, ISNULL(Inv_DocPath3,'') AS Inv_DocPath3," + Environment.NewLine
                 + "ISNULL(Inv_CollModeId,0) As Inv_CollModeId, ISNULL(Inv_PresChck,0) AS Inv_PresChck, ISNULL(Inv_SRFno,'') AS Inv_SRFno, ISNULL(Inv_Passport,'') AS Inv_Passport, ISNULL(Inv_ModalitDiv,0) AS Inv_ModalitDiv," + Environment.NewLine
                     + "ISNULL(Inv_Mob,'') AS Inv_Mob, ISNULL(Inv_Aadhaar,'') AS Inv_Aadhaar, Inv_Dob, ISNULL(Inv_Nationality,'') AS Inv_Nationality, ISNULL(Inv_Hcbill,0) AS Inv_Hcbill, ISNULL(Inv_CountryCode,'') AS Inv_CountryCode, ISNULL(Inv_SecMob,'') AS Inv_SecMob" + Environment.NewLine

    + "FROM dbo.Invoice_Mst I WITH(NOLOCK) WHERE Inv_No =" + labno + " AND Inv_YrId = " + YearId + "AND Inv_CpyId =" + CompanyId + "";
            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
            DataTable dt0 = new DataTable();
            sd0.Fill(dt0);
            txtLabNo = dt0.Rows[0]["Inv_No"].ToString();
            Inv_Status = Convert.ToInt32(dt0.Rows[0]["Inv_Status"].ToString());
            cmbPrefix = dt0.Rows[0]["Inv_Tittle"].ToString();
            txtName = dt0.Rows[0]["Inv_name"].ToString();
            txtNameid = Convert.ToInt32(dt0.Rows[0]["Inv_PntId"].ToString());
            if (dt0.Rows[0]["Inv_Gender"].ToString() == "M")
            {
                invmale = true;

            }
            if (dt0.Rows[0]["Inv_Gender"].ToString() == "F")
            {
                invfemale = true;

            }
            txtAgeYears = Convert.ToInt32(dt0.Rows[0]["Inv_ageYY"].ToString());
            cmbAgeIn = Convert.ToInt32(dt0.Rows[0]["Inv_ageDD"].ToString());
            txtmonth = Convert.ToInt32(dt0.Rows[0]["Inv_ageMM"].ToString());
            txtPhone = dt0.Rows[0]["Inv_phno"].ToString();
            txtEmail = dt0.Rows[0]["Inv_Email"].ToString();
            txtRefByid = Convert.ToInt32(dt0.Rows[0]["Inv_DrId"].ToString());
          
            string txtRefBy = db.AccountHeads_Mst.Where(p => p.AhMst_Key == txtRefByid).Select(pat => pat.AhMst_pName).FirstOrDefault();
           
            txtOutDr = dt0.Rows[0]["Inv_OutDr"].ToString();
            txtBranchid = Convert.ToInt32(dt0.Rows[0]["Inv_BrID"].ToString());

            string txtBranch = db.Baranches_Mst.Where(p => p.BrMst_Key == txtBranchid).Select(pat => pat.BrMst_Name).FirstOrDefault();
           
            try
            {
                txtBranchNo = dt0.Rows[0]["Inv_RsltNO"].ToString();
            }
            catch { }
            txtCollByid = Convert.ToInt32(dt0.Rows[0]["Inv_CltnID"].ToString());
            string txtCollBy = db.AccountHeads_Mst.Where(p => p.AhMst_Key == txtCollByid).Select(pat => pat.AhMst_pName).FirstOrDefault();
          
            try
            {
                dtpSampleOn = dt0.Rows[0]["Inv_SmplDate"].ToString();
                dtpRportOn = dt0.Rows[0]["Inv_CmpltdDate"].ToString();
            }
            catch { }

          
            if (dt0.Rows[0]["Inv_RepThrPersonal"].ToString() == "1")
            {
                chkPersonally = true;
            }
            if (dt0.Rows[0]["Inv_RepThrCourier"].ToString() == "1")
            {
                chkCourier = true;
            }
            if (dt0.Rows[0]["Inv_RepThrPhone"].ToString() == "1")
            {
                chkTelephone = true;
            }
            if (dt0.Rows[0]["Inv_RepThrEmail"].ToString() == "1")
            {
                chkEmail = true;
            }
            if (dt0.Rows[0]["Inv_RepThrSms"].ToString() == "1")
            {
                chkSms = true;
            }
            txtInvAmt = dt0.Rows[0]["Inv_Netamt"].ToString();
            if (Inv_Status < 0)
            {
                return Json(new { Result = "Already Cancelled" });
               
            }


            accountledgercs getcancelinvoice = new accountledgercs()

            {
                txtLabNo = Convert.ToInt32(txtLabNo),
                invprefix = cmbPrefix,
                invname = txtName,
                invmale = invmale,
                invfemale = invfemale,
                invphono = txtPhone,
                invemail = txtEmail,
                invrefby = txtRefBy,
                invrefbyid = txtRefByid,
                invoutdr = txtOutDr,
                invbranchid = txtBranchid,
                invbranch = txtBranch,
                invipopno = txtBranchNo,
                sampleon = dtpSampleOn,
                reporton = dtpRportOn,
                invamount = txtInvAmt,
                chkPersonally = chkPersonally,
                chkTelephone = chkTelephone,
                chkCourier = chkCourier,
                chkEmail = chkEmail,
                chkSms = chkSms,
                txtNameid = Convert.ToInt32(txtLabNo),

                invcollby = txtCollBy,
                txtCollByid = txtCollByid,
                invage = txtAgeYears,
                invyear = cmbAgeIn,
                invmonth = txtmonth

            };
            getcancel.Add(getcancelinvoice);
            sqlcon.Close();
            return Json(getcancel, JsonRequestBehavior.AllowGet);
        }

        //******************END-DISPLAY-CANCEL-INVOICE**********************************

        //*****************SAVE-CANCEL-INVOICE*****************************
        public JsonResult SAVECANCELINVOICE(accountledgercs invoicesave)
        {
            try
            {
                logindetails l = Session["logindls"] as logindetails;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand sqlCmd = new SqlCommand();
                sqlCmd.Connection = sqlcon;
                sqlCmd.CommandType = CommandType.Text;
                string txtLabNo = "";
                int txtLabNoid = 0;
                string cmbPrefix = "";
                string txtName = "";
                int txtNameid = 0;
                string cmbGender = "";
                string txtAgeYears = "";
                bool chkPersonally = false;
                string cmbAgeIn = "";
                string txtPhone = "";
                string txtEmail = "";
                int txtRefByid = 0;
                //string txtRefBy = "";
                bool chkTelephone = false;
                bool chkCourier = false;
                bool chkEmail = false;
                bool chkSms = false;
                string txtOutDr = "";
                string txtReason = "";
                double? YearId = l.Yr_Id;
                double CompanyId = l.BrMst_Key;
                int txtBranchid = 0;
             
                string txtBranchNo = "";
                string dtpDate = "";
                int txtCollByid = 0;
              
                string dtpSampleOn = "";
                string dtpRportOn = "";
                string txtInvAmt = "";
                int Inv_Status = 0;
                bool invmale = false;
                bool invfemale = false;
                string txtRefBy = "";
                string txtBranch = "";
                string txtCollBy = "";
                string UserName = "";
                try
                {

                    txtLabNo = Convert.ToString(invoicesave.txtLabNo);
                    cmbPrefix = invoicesave.invprefix;
                    txtName = invoicesave.invname;
                    invmale = invoicesave.invmale;
                    invfemale = invoicesave.invfemale;
                    txtPhone = invoicesave.invphono;
                    txtEmail = invoicesave.invemail;
                    txtRefBy = invoicesave.invrefby;
                    txtRefByid = invoicesave.invrefbyid;
                    txtOutDr = invoicesave.invoutdr;
                    txtBranchid = invoicesave.invbranchid;
                    txtBranch = invoicesave.invbranch;
                    txtBranchNo = invoicesave.invipopno;
                    dtpSampleOn = invoicesave.sampleon;
                    dtpRportOn = invoicesave.reporton;
                    txtInvAmt = invoicesave.invamount;
                    chkPersonally = invoicesave.chkPersonally;
                    chkTelephone = invoicesave.chkTelephone;
                    chkCourier = invoicesave.chkCourier;
                    chkEmail = invoicesave.chkEmail;
                    chkSms = invoicesave.chkSms;
                    txtNameid = Convert.ToInt32(txtLabNo);

                    txtCollBy = invoicesave.invcollby;
                    txtCollByid = invoicesave.txtCollByid;
                    txtReason = invoicesave.txtReason;
                }
                catch
                {

                }

                int nInvNo = 0, nEditInvNo = 0;
                string nInv_Name = "", nInv_CnlComnt = "", nInv_Cnltmestmp = "";

                try
                {
                    nInvNo = Convert.ToInt32(txtLabNo);
                }
                catch { }

               
                if (nInvNo < 1)
                {
                    return Json(new { Result = "Invalid Lab No" });
                   
                }

                try
                {
                    nEditInvNo = Convert.ToInt32(string.IsNullOrEmpty(txtLabNo.ToString()) ? "0" : txtLabNo.ToString());
                }
                catch { }

                
                UserName = l.Usr_Name;
                nInv_CnlComnt = txtReason;
                nInv_Name = txtName;
               
                nInv_Cnltmestmp = "User : " + UserName + " " + DateTime.Now.ToString("dd/MM/yyyy hh:mm tt ") + " System : ";
                //try
                //{
                SqlCommand sqlcmd0 = new SqlCommand();
                sqlcmd0.Connection = sqlcon;
                sqlcmd0.CommandType = CommandType.Text;
                
                sqlcmd0 = new SqlCommand("UPDATE dbo.Invoice_Mst SET Inv_name = '***-" + nInv_Name + "',Inv_CnlComnt ='" + nInv_CnlComnt + "',Inv_Cnltmestmp ='" + nInv_Cnltmestmp + "',Inv_Status = -1" + Environment.NewLine
   + "WHERE Inv_No =" + nInvNo + "  AND Inv_YrId =" + YearId + " AND Inv_CpyId =" + CompanyId + "" + Environment.NewLine
   + "UPDATE dbo.PendingCollections SET PndC_Cancld = 1 where PndC_Labno = " + nInvNo + " AND PndC_YrId = " + YearId + " AND PndC_CpyId =" + CompanyId + "" + Environment.NewLine
   + "UPDATE dbo.Booking_Consultation SET DrBkng_Status = -1 where DrBkng_LabNo = " + nInvNo + " AND DrBkng_YrId =" + YearId + " AND DrBkng_CpyId =" + CompanyId + "", sqlcon);

                sqlcmd0.ExecuteNonQuery();
                //+ "DELETE FROM ICONPUB.dbo.Test_Order WHERE TstOrdr_SampleId = (SELECT DIstinct(IM1_SmplId) from ICONPUB.dbo.IntrfceMechine_1 WHERE IM1_YrId = " + YearId + " AND IM1_CopyId = " + CompanyId + " AND IM1_InvNo =" + nInvNo + ")" + Environment.NewLine
                //+ "DELETE FROM ICONPUB.dbo.IntrfceMechine_1 WHERE IM1_YrId = " + YearId + " AND IM1_CopyId = " + CompanyId + " AND IM1_InvNo =" + nInvNo + "" + Environment.NewLine
                //+ "DELETE FROM ICONPUB.dbo.Sample_Track WHERE Smpl_YrId = " + YearId + " AND Smpl_CpyId = " + CompanyId + " AND Smpl_LabNo = " + nInvNo + "";
                //            //return Json(all,JsonRequestBehavior.AllowGet);
                //            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
                //            DataTable dt0 = new DataTable();
                //            sd0.Fill(dt0);
                //            nInv_Name = dt0.Rows[0]["Inv_name"].ToString();
                //            nInv_CnlComnt = dt0.Rows[0]["Inv_CnlComnt"].ToString();

                if (nInvNo > 0)
                {

                    try
                    {
                        SqlCommand cmd10 = new SqlCommand("DELETE FROM Vouchers WHERE vchr_TransNo=" + nInvNo + " and  vchr_TransType='Credit bill' and  vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " AND  vchr_BrId= " + CompanyId + " ", sqlcon);
                        //SqlCommand cmd10 = new SqlCommand("DELETE FROM Vouchers WHERE vchr_TransNo=" + nInvNo + " and  vchr_TransType='Credit bill' and  vchr_YrId=" + cPublic.YearId + " AND vchr_CpyId=" + cPublic.CompanyId + " AND  vchr_BrId= " + cPublic.CompanyId + " AND vchr_BookId=24", Common.myConnectionVM);
                        cmd10.ExecuteNonQuery();
                    }
                    catch { }
                    try
                    {
                        SqlCommand cmd = new SqlCommand("INSERT INTO Cancel_Details(Cancl_LabNo,Cancl_CmpyId,Cancl_YrId,Cancl_UserInfo,Cancl_Reason,Cancl_Name) VALUES(" + nInvNo + "," + CompanyId + "," + YearId + ",'" + nInv_Cnltmestmp + "','" + nInv_CnlComnt + "','" + nInv_Name + "')", sqlcon);
                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception xe) { string msgerr = xe.Message; }

                    string usrLogData = "";
                    usrLogData = "INVOICE CANCELLED -LAB NO: " + txtLabNo.ToString() + "_NAME_" + txtName.Trim();
                    UserTrackInsert(usrLogData, "CANCEL INVOICE", 25);

                    return Json(new { Result = "Cancelled" /*+ nInvNo + " Cancelled"*/ });
                   
                }
                else
                {
                    return Json(new { Result = "Error. Please Check" });
                  
                }
              
            }
            catch (Exception exe)
            {
                var x = exe.Message;
                return Json(JsonRequestBehavior.AllowGet);
            }

        }
        //*******************END-SAVE-CANCEL-INVOICE*************************







            //*************DISPLAY ACCOUNLEGER DATA***************************
        public JsonResult ACCOUNTLEDGERDISPLAY(string ledgername, string ledgerid)
        {
            logindetails l = Session["logindls"] as logindetails;


            List<accountledgercs1> allUser = new List<accountledgercs1>();



            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            decimal? ahmst_key = 0;
            ahmst_key = Convert.ToDecimal(ledgerid);
            string ledgrname = "";
            ledgrname = ledgername;
            string txtAddress = "";
            string txtPhone = "";
            string txtMobile = "";
            string txtEmail = "";
            string txtDiscount = "";
            string SendMail = "";

            string txtScheme = "";
            string txtCustType = "";
            string txtArea = "";
            string IsActive = "";

            string txtACgrpName = "";
            double? YearId = l.Yr_Id;
            double logInBranchId = l.BrMst_Key;
            string txtDescrpton = "";
            string cmbPayType = "";
            string txtTstDiscPer = "";
            string txtcrDays = "";
            string txtGroup = "";
            string nGROUPLEVEL = "";
            string txtCreditLmt = "";
            string nLEVEL1 = "";

            string cmbPayMode = "";
            string txtOpeningBalnc = "";

            string cmbOpnType = "";
            string txtCur = "";
            string InsertMode = "";
            bool chkEmailReport, chkAvoidLH = false, chkIsActive;
            int IsLettHd = 0;
            string txtSchemeid = "";
            string txtCustTypeid = "";
            string txtAreaid = "";
            string txtACgrpId = "";
            string txtGroupid = "";
            int splrchk = 0;
            
            var splrlist = db.Special_Rates.Where(sp => sp.SplR_ID == ahmst_key).ToList();
            if (splrlist.Count > 0)
            {
                splrchk = 1;
            }

            sqlCmd.CommandText = "select AH.AhMst_AreaID,area.Mstr_Desc as area,AH.AhMst_Address,AH.AhMst_AcGrpId,AH.AhMst_Phno,AH.AhMst_mobile,AH.AhMst_Email,AH.AhMst_DiscPer,AH.AhMst_SendMail,AH.AhMst_CrLimit,AH.AhMst_IsActive,AH.AhMst_Note,AG.AcGrp_GrpName,AH.AhMst_SchemeId,Mst.Mstr_Desc AS Scheme,Mst1.Mstr_Desc AS CustType,AH.AhMst_CustTypeId,AH.AhMst_PayType,AhMst_TstDiscPer,AhMst_CRDays,AH.LEVEL1,AH.GROUPLEVEL,AH.GROUPCODE,G.HEAD As GroupName ,AH.AhMst_IsLettHd,AH.AhMst_DefPaymode from dbo.AccountHeads_Mst AH WITH (NOLOCK) left Join dbo.AccountGroup AG  WITH (NOLOCK) ON AH.AhMst_AcGrpId=AG.AcGrp_Key LEFT JOIN Masters Mst ON AH.AhMst_SchemeId=Mst.Mstr_Key LEFT JOIN Masters Mst1 ON AH.AhMst_CustTypeId=Mst1.Mstr_Key left join Masters as area on AH.Ahmst_areaid=area.mstr_key LEFT JOIN GROUPS G On AH.GROUPCODE=G.CODE WHERE AhMst_Key=" + ahmst_key + "";

            SqlDataReader sdr;
            sdr = sqlCmd.ExecuteReader();
            while (sdr.Read())
            {
                txtAddress = sdr["AhMst_Address"].ToString();
                txtPhone = sdr["AhMst_Phno"].ToString();
                txtMobile = sdr["AhMst_mobile"].ToString();

                txtEmail = sdr["AhMst_Email"].ToString();
                try
                {
                    txtDiscount = sdr["AhMst_DiscPer"].ToString();
                }
                catch (Exception exe)
                {
                    txtDiscount = "0";
                }
                try
                {
                    SendMail = sdr["AhMst_SendMail"].ToString();
                }
                catch (Exception exe)
                {
                    chkEmailReport = false;
                }
                try
                {
                    txtCreditLmt = sdr["AhMst_CrLimit"].ToString();
                }
                catch (Exception exe)
                {
                    txtCreditLmt = "0";
                }

                try
                {
                    txtScheme = sdr["Scheme"].ToString();
                    txtSchemeid = sdr["AhMst_SchemeId"].ToString();

                }
                catch { }
                try
                {
                    txtCustType = sdr["CustType"].ToString();
                    txtCustTypeid = sdr["AhMst_CustTypeId"].ToString();
                }
                catch { }
                try
                {

                    txtArea = sdr["area"].ToString();
                    txtAreaid = sdr["AhMst_AreaID"].ToString();
                }
                catch { }

                IsActive = sdr["AhMst_IsActive"].ToString();
                txtACgrpName = sdr["AcGrp_GrpName"].ToString();
                txtACgrpId = sdr["AhMst_AcGrpId"].ToString();
                txtDescrpton = sdr["AhMst_Note"].ToString();
                cmbPayType = sdr["AhMst_PayType"].ToString();
                txtTstDiscPer = sdr["AhMst_TstDiscPer"].ToString();
                txtcrDays = sdr["AhMst_CRDays"].ToString();
                //************************************************
                txtGroup = sdr["GroupName"].ToString();
                txtGroupid = sdr["GROUPCODE"].ToString();
                nGROUPLEVEL = sdr["GROUPLEVEL"].ToString();
                nLEVEL1 = sdr["LEVEL1"].ToString();
                try { IsLettHd = Convert.ToInt32(sdr["AhMst_IsLettHd"]); } catch { }
                chkAvoidLH = false;
                if (IsLettHd == 1)
                {
                    chkAvoidLH = true;
                }
                cmbPayMode = sdr["AhMst_DefPaymode"].ToString();
            }
            sdr.Close();

            SqlCommand sqlCmd1 = new SqlCommand();
            sqlCmd1.Connection = sqlcon;
            sqlCmd1.CommandType = CommandType.Text;
            sqlCmd1.CommandText = "Select OpBl_OpBalance,OpBl_OpStatus from Opening_Balance WITH (NOLOCK) WHERE OpBl_AccId=" + ahmst_key + " and  OpBl_YrId=" + YearId + "";
            SqlDataReader sdr1;
            sdr1 = sqlCmd1.ExecuteReader();

            while (sdr1.Read())
            {
                txtOpeningBalnc = sdr1["OpBl_OpBalance"].ToString();
                cmbOpnType = sdr1["OpBl_OpStatus"].ToString();


            }
            sdr1.Close();
            //***********CurrentLedger******************
            SqlDataAdapter sda;
            double CashPay = 0;
            double CashRec = 0;
            double ChqPay = 0;
            double ChqRec = 0;
            double OpAmt = 0;
            Double CurBal = 0;
            // double CashPay=0;
            sqlCmd = new SqlCommand("SELECT ISNULL(SUM(vchr_Payment),0) AS  Payment, ISNULL(SUM(vchr_Receipt),0) AS Receipt  FROM Vouchers WHERE (vchr_TransType='Cash Receipts' OR vchr_TransType='Cash Payment')  AND vchr_BrId=" + logInBranchId + " AND vchr_CpyId=" + logInBranchId + " AND vchr_YrId=" + YearId + " AND vchr_Id=" + ahmst_key + "", sqlcon);
            sda = new SqlDataAdapter(sqlCmd);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            foreach (DataRow dr in dt.Rows)
            {
                CashPay = Convert.ToDouble(dr["Payment"]);
                CashRec = Convert.ToDouble(dr["Receipt"]);
            }
            sqlCmd1 = new SqlCommand("SELECT ISNULL(SUM(vchr_Payment),0) AS  Payment, ISNULL(SUM(vchr_Receipt),0) AS Receipt  FROM Vouchers WHERE (vchr_TransType='Cheque Receive' OR vchr_TransType='Cheque Issue') AND vchr_BrId=" + logInBranchId + " AND vchr_CpyId=" + logInBranchId + " AND vchr_YrId=" + YearId + " AND vchr_Id=" + ahmst_key + "", sqlcon);
            sda = new SqlDataAdapter(sqlCmd1);
            DataTable dt1 = new DataTable();
            sda.Fill(dt1);
            foreach (DataRow dr1 in dt1.Rows)
            {
                ChqPay = Convert.ToDouble(dr1["Payment"]);
                ChqRec = Convert.ToDouble(dr1["Receipt"]);
            }
            try
            {
                OpAmt = Convert.ToDouble(txtOpeningBalnc.Trim());
            }
            catch { }
            if (cmbOpnType == "Cr")
            {
                CurBal = OpAmt + (CashRec + ChqRec) - (CashPay + ChqPay);
            }
            else
            {
                CurBal = OpAmt - (CashRec + ChqRec) + (CashPay + ChqPay);
            }
            txtCur = CurBal.ToString("#0.00");
            //*************************************************
            if (IsActive == "" || IsActive == "0")
            {
                chkIsActive = false;
            }
            else
            {
                chkIsActive = true;
            }
            if (SendMail == "" || SendMail == "0")
            {
                chkEmailReport = false;
            }
            else
            {
                chkEmailReport = true;
            }

            InsertMode = "";

            accountledgercs1 accountledg = new accountledgercs1()

            {
                txtAddress = txtAddress,
                txtPhone = txtPhone,
                txtMobile = txtMobile,
                txtEmail = txtEmail,
                txtDiscount = txtDiscount,
                SendMail = SendMail,
                txtCreditLmt = txtCreditLmt,
                chkEmailReport = chkEmailReport,
                txtScheme = txtScheme,
                txtCustType = txtCustType,
                txtArea = txtArea,
                IsActive = IsActive,
                txtACgrpName = txtACgrpName,
                txtDescrpton = txtDescrpton,
                cmbPayType = cmbPayType,
                txtTstDiscPer = txtTstDiscPer,
                txtcrDays = txtcrDays,
                txtGroup = txtGroup,
                nGROUPLEVEL = nGROUPLEVEL,
                nLEVEL1 = nLEVEL1,
                chkAvoidLH = chkAvoidLH,
                cmbPayMode = cmbPayMode,
                txtOpeningBalnc = txtOpeningBalnc,
                cmbOpnType = cmbOpnType,

                ChqPay = ChqPay,
                ChqRec = ChqRec,
                chkIsActive = chkIsActive,
                OpAmt = OpAmt,
                CashPay = CashPay,
                CashRec = CashRec,
                txtSchemeid = txtSchemeid,
                txtCustTypeid = txtCustTypeid,
                txtAreaid = txtAreaid,
                txtACgrpId = txtACgrpId,
                txtGroupid = txtGroupid,
                txtCur = txtCur,
                splrchk = splrchk




            };

            allUser.Add(accountledg);

            sqlcon.Close();
            return Json(allUser, JsonRequestBehavior.AllowGet);
        }
        //****************END-DISPLAY ACCOUNTLEDGER******************

        public JsonResult SAVEVIEWHOSPITAL(accountledgercs hospitalsave, string dtpHospDay1)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            int txtHosId = 0;
            double? YearId = l.Yr_Id;
            string txtHosName = "";
            string txtGroupid = "";
            string saveFlag = "";
            string InsertMode = "";
            int txtHosNameid = 0;
            //string old_Name = "";
            string txtHosSpecialised = "";
            int txtHosSpecialisedid = 0;
            bool chkIsActive = true;
            int openbalanceid = 0;
            int IsActive = 0;
            string AhMst_Address = "";
            string AhMst_Phno = "";
            string AhMst_mobile = "";
            string txtHosArea = "";
            int AhMst_AreaID = 0;
            string txtHosConPrsn = "";
            //string dtpHospDay = "";
            string txtNoteHos = "";
            string dtpHospDay = "";
            string dtpHospDays1 = "";
            dtpHospDays1 = dtpHospDay1;
            DateTime dtpHospDays = DateTime.ParseExact(dtpHospDays1, "dd/MM/yyyy", null);
            //DateTime from = DateTime.Now;
            dtpHospDay = dtpHospDays.ToString("MM/dd/yyyy");

            try
            {
                txtHosId = hospitalsave.txtHosId;
                txtHosName = hospitalsave.txtHosName;
                txtHosNameid = hospitalsave.txtHosNameid;
                AhMst_Address = hospitalsave.AhMst_Address;
                AhMst_Phno = hospitalsave.AhMst_Phno;
                AhMst_mobile = hospitalsave.AhMst_mobile;
                txtHosArea = hospitalsave.txtHosArea;

                AhMst_AreaID = hospitalsave.AhMst_AreaID;
                txtHosConPrsn = hospitalsave.txtHosConPrsn;
                txtHosSpecialised = hospitalsave.txtHosSpecialised;
                txtHosSpecialisedid = hospitalsave.txtHosSpecialisedid;
                //dtpHospDay = hospitalsave.dtpHospDay;
                txtNoteHos = hospitalsave.txtNoteHos;
                chkIsActive = hospitalsave.chkIsActive;


            }
            catch
            {

            }
            //if (dtpHospDay == null)
            //{
            //    dtpHospDay = Convert.ToString(DateTime.Now);
            //}


            if (txtHosName == "")
            {

            }
            else
            {
                //***HosName   Exsists Checking**

                int HosID = 0;
                int ExsistHosId = 0;
                string nGroupCode = "";
                try
                {
                    nGroupCode = txtGroupid.ToString();
                }
                catch { }

                SqlCommand cmd5;

                double hosKey = 0;
                var saveEdit = db.AccountHeads_Mst.Where(a => a.AhMst_Key == txtHosNameid).ToList();
                foreach (var svedt in saveEdit)
                {
                    db.AccountHeads_Mst.Remove(svedt);
                }
                db.SaveChanges();
                if (saveEdit.Count > 0)
                {
                    saveFlag = "Old";
                }
                else
                {
                    saveFlag = "New";
                }

                if (saveFlag == "New")
                {
                    hosKey = db.AccountHeads_Mst.Max(acc => acc.AhMst_Key) + 1;
                    hospitalsave.txtHosNameid = Convert.ToInt32(hosKey);
                    cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='Hosp' And [AhMst_pName]='" + txtHosName + "'", sqlcon);
                }
                else
                {
                    try
                    {
                        hosKey = Convert.ToDouble(hospitalsave.txtHosNameid);

                        ExsistHosId = Convert.ToInt32(txtHosNameid);
                    }
                    catch { }
                    cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='Hosp' And [AhMst_pName]='" + txtHosName + "' And AhMst_Key!=" + ExsistHosId + " ", sqlcon);
                }

                try
                {

                    HosID = Convert.ToInt32(cmd5.ExecuteScalar());

                }
                catch { }

                if (HosID != 0)
                {
                    return Json(new { Result = "Hospital Name Already Exsists" });

                }

                try
                {



                    //*****
                    AccountHeads_Mst accounthead = new AccountHeads_Mst();
                    accounthead.AhMst_Key = Convert.ToInt32(hosKey);
                    //hospitalsave.txtHosNameid = Convert.ToInt32(hosKey);
                    accounthead.AhMst_pName = hospitalsave.txtHosName;



                    try
                    {
                        accounthead.AhMst_SplID = Convert.ToInt32(hospitalsave.txtHosSpecialisedid);

                    }
                    catch
                    {
                        accounthead.AhMst_SplID = 0;
                        /*sqlcmd1.Parameters.AddWithValue("@AhMst_SplID", 0);*/
                    }
                    accounthead.AhMst_SplID = Convert.ToInt32(hospitalsave.txtHosSpecialisedid);
                    accounthead.AhMst_Address = hospitalsave.AhMst_Address;
                    accounthead.AhMst_AreaID = Convert.ToDouble(hospitalsave.AhMst_AreaID);

                    try
                    {
                        accounthead.AhMst_AreaID = Convert.ToDouble(hospitalsave.AhMst_AreaID);

                    }
                    catch
                    {
                        accounthead.AhMst_AreaID = 0;

                    }
                    try
                    {
                        accounthead.AhMst_ContPrsn = hospitalsave.txtHosConPrsn;
                        accounthead.AhMst_Phno = hospitalsave.AhMst_Phno;
                        accounthead.AhMst_mobile = hospitalsave.AhMst_mobile;

                        accounthead.AhMst_Dob = Convert.ToDateTime(dtpHospDay);
                        accounthead.AhMst_Email = hospitalsave.AhMst_Email;
                        accounthead.AhMst_SendMail = 0;
                        accounthead.AhMst_IsActive = Convert.ToInt32(hospitalsave.chkIsActive);
                        accounthead.AhMst_Note = hospitalsave.txtNoteHos;
                        accounthead.AhMst_IsCrdHldr = 0;
                        accounthead.AhMst_Type = "Hosp";


                        db.AccountHeads_Mst.Add(accounthead);
                    }
                    catch (Exception ex)
                    {
                        var x = ex.Message;
                        var y = ex.InnerException;
                    }

                    var openbalancesave = db.Opening_Balance.Where(a => a.OpBl_AccId == hosKey && a.OpBl_YrId == YearId).ToList();
                    foreach (var svedt in openbalancesave)
                    {
                        db.Opening_Balance.Remove(svedt);
                    }
                    db.SaveChanges();
                    if (openbalancesave.Count > 0)
                    {
                        InsertMode = "Old";
                    }
                    else
                    {
                        InsertMode = "New";
                    }


                    if (InsertMode == "New")
                    {

                        Opening_Balance openbalance = new Opening_Balance();
                        openbalanceid = db.Opening_Balance.Max(acc => acc.OpBl_Key) + 1;
                        openbalance.OpBl_Key = openbalanceid;
                        openbalance.OpBl_AccId = Convert.ToInt32(hosKey);
                        openbalance.OpBl_OpBalance = 0;
                        openbalance.OpBl_UsrId = 2;
                        openbalance.OpBl_YrId = (int)YearId;
                        openbalance.OpBl_OpStatus = "";
                        openbalance.Head = hospitalsave.txtHosName;


                        db.Opening_Balance.Add(openbalance);
                        db.SaveChanges();
                    }
                    if (InsertMode == "Old")
                    {
                        try
                        {
                            Opening_Balance openbalance = new Opening_Balance();

                            openbalanceid = db.Opening_Balance.Max(acc => acc.OpBl_Key) + 1;
                            openbalance.OpBl_Key = openbalanceid;
                            openbalance.OpBl_AccId = Convert.ToInt32(hosKey);
                            openbalance.OpBl_OpBalance = 0;
                            openbalance.OpBl_UsrId = 2;
                            openbalance.OpBl_YrId = 2223;
                            openbalance.OpBl_OpStatus = "";
                            openbalance.Head = hospitalsave.txtHosName;


                            db.Opening_Balance.Add(openbalance);
                            db.SaveChanges();

                        }


                        catch (Exception ex)
                        {
                            var x = ex.Message;
                            var y = ex.InnerException;
                        }
                    }
                }
                catch (Exception ex)
                {
                    var x = ex.Message;
                    var y = ex.InnerException;
                }
                if (chkIsActive == true)
                {
                    IsActive = 1;
                }


                sqlcon.Close();

            }

            return Json(JsonRequestBehavior.AllowGet);

        }

        public JsonResult GETHOSNAME()
        {

            var customers1 = from c in db.AccountHeads_Mst
                             where c.AhMst_Type == "Hosp"
                             //orderby c.AhMst_pName
                             select c;
            return Json(customers1, JsonRequestBehavior.AllowGet);

        }
        public JsonResult SEARCHHOSPITALNAME(string customerName)
        {




            var hospitalname = from c in db.AccountHeads_Mst
                               where c.AhMst_Type.Contains(customerName)
                               select c;
            return Json(hospitalname.ToList());


        }
        public JsonResult SEARCHAREA(string customerName)
        {




            var srcharea = from c in db.Masters
                           where c.Mstr_Desc.Contains(customerName)
                           select c;
            return Json(srcharea.ToList());


        }
        public JsonResult SEARCHSpecialised(string customerName)
        {




            var customers = from c in db.Masters
                            where c.Mstr_Desc.Contains(customerName)
                            select c;
            return Json(customers.ToList());


        }


        public JsonResult GETAREA()
        {

            var area = from c in db.Masters
                       where c.Mstr_Type == "Area" /*orderby c.Mstr_Desc*/
                       select c;
            return Json(area, JsonRequestBehavior.AllowGet);

        }




        public JsonResult GETSpecialised()
        {

            var specialised = from c in db.Masters
                              where c.Mstr_Type == "Specilzed" /*orderby c.Mstr_Desc*/
                              select c;
            return Json(specialised, JsonRequestBehavior.AllowGet);

        }
        public JsonResult selecthospital(string selectedValue)
        {
            var selecthospital = from s in db.AccountHeads_Mst
                                 where s.AhMst_Type == "Hosp"
                                 orderby s.AhMst_pName

                                 select s;
            return Json(selecthospital, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selecthospital1(string selectedValue)
        {
            var orderhospital = from s in db.AccountHeads_Mst
                                where s.AhMst_Type == "Hosp"
                                orderby s.AhMst_Key

                                select s;
            return Json(orderhospital, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectarea(string selectedValue)
        {
            var orderByResult = from s in db.Masters
                                where s.Mstr_Type == "Area"
                                orderby s.Mstr_Desc

                                select s;
            return Json(orderByResult, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectarea1(string selectedValue)
        {
            var orderByResult = from s in db.Masters
                                where s.Mstr_Type == "Area"
                                orderby s.Mstr_Key

                                select s;
            return Json(orderByResult, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectspec(string selectedValue)
        {
            var orderByResult = from s in db.Masters
                                where s.Mstr_Type == "Specilzed"
                                orderby s.Mstr_Desc

                                select s;
            return Json(orderByResult, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectspec1(string selectedValue)
        {
            var orderByResult = from s in db.Masters
                                where s.Mstr_Type == "Specilzed"
                                orderby s.Mstr_Key

                                select s;
            return Json(orderByResult, JsonRequestBehavior.AllowGet);
        }



        public JsonResult displayhospital(string hospname, string hospid)
        {

            List<accountledgercs> allUser = new List<accountledgercs>();



            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            string txtHosNameid = "";
            string txtHosId = "";
            string txtHosName = "";
            string old_Name = "";
            string Address = "";
            string txtHosAddres = "";
            string txtHosMobile = "";
            string txtHosPhone = "";
            string txtHosEmail = "";
            string txtHosArea = "";
            string txtHosAreaid = "";
            string txtHosConPrsn = "";
            string txtHosSpecialised = "";
            string txtHosSpecialisedid = "";
            string dtpHospDay = "";
            string txtNoteHos = "";
            string txtGroup = "";
            string txtGroupid = "";
            string nGROUPLEVEL = "";
            string nLEVEL1 = "";
            bool chkActiveHos = true;
            string saveFlag = "";
            bool chkCardHolderHos = true;

            //DateTime from = DateTime.Now;
            //dtpHospDay = from.ToString("MM/dd/yyyy");


            try
            {

            }
            catch
            {

            }


            SqlCommand sqlcmd0 = new SqlCommand();
            sqlcmd0.Connection = sqlcon;
            sqlcmd0.CommandType = CommandType.Text;
            sqlcmd0.CommandText = "SELECT     dbo.AccountHeads_Mst.AhMst_Key, dbo.AccountHeads_Mst.AhMst_pName, dbo.AccountHeads_Mst.AhMst_SplID, dbo.Masters.Mstr_Desc AS Specialized,dbo.AccountHeads_Mst.LEVEL1,dbo.AccountHeads_Mst.GROUPLEVEL,dbo.AccountHeads_Mst.GROUPCODE,G.HEAD As GroupName," + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_Address, dbo.AccountHeads_Mst.AhMst_AreaID, Masters_1.Mstr_Desc AS Area, dbo.AccountHeads_Mst.AhMst_ContPrsn, " + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_Phno, dbo.AccountHeads_Mst.AhMst_mobile, dbo.AccountHeads_Mst.AhMst_Dob, dbo.AccountHeads_Mst.AhMst_Email, " + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_IsActive, dbo.AccountHeads_Mst.AhMst_Note, dbo.AccountHeads_Mst.AhMst_IsCrdHldr, dbo.AccountHeads_Mst.AhMst_IssDate" + Environment.NewLine
                  + "FROM dbo.AccountHeads_Mst WITH (NOLOCK) LEFT OUTER JOIN" + Environment.NewLine
                  + "dbo.Masters AS Masters_1 WITH (NOLOCK) ON dbo.AccountHeads_Mst.AhMst_AreaID = Masters_1.Mstr_Key LEFT OUTER JOIN" + Environment.NewLine
                  + "dbo.Masters WITH (NOLOCK) ON dbo.AccountHeads_Mst.AhMst_SplID = dbo.Masters.Mstr_Key LEFT JOIN GROUPS G On dbo.AccountHeads_Mst.GROUPCODE=G.CODE WHERE dbo.AccountHeads_Mst.AhMst_Key='" + hospid + "'";
            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
            DataTable dt0 = new DataTable();
            sd0.Fill(dt0);
            txtHosId = dt0.Rows[0]["AhMst_Key"].ToString();

            txtHosName = dt0.Rows[0]["AhMst_pName"].ToString();
            txtHosNameid = dt0.Rows[0]["AhMst_Key"].ToString();
            old_Name = txtHosName = "";
            Address = dt0.Rows[0]["AhMst_Address"].ToString();
            txtHosAddres = dt0.Rows[0]["AhMst_Address"].ToString();
            txtHosMobile = dt0.Rows[0]["AhMst_mobile"].ToString();
            txtHosPhone = dt0.Rows[0]["AhMst_Phno"].ToString();
            txtHosEmail = dt0.Rows[0]["AhMst_Email"].ToString();

            txtHosArea = dt0.Rows[0]["Area"].ToString();
            txtHosAreaid = dt0.Rows[0]["AhMst_AreaID"].ToString();

            txtHosConPrsn = dt0.Rows[0]["AhMst_ContPrsn"].ToString();

            txtHosSpecialised = dt0.Rows[0]["Specialized"].ToString();
            txtHosSpecialisedid = dt0.Rows[0]["AhMst_SplID"].ToString();

            dtpHospDay = dt0.Rows[0]["AhMst_Dob"].ToString();

            //dtpCardIssue.Text = dt0.Rows[0]["AhMst_IssDate"].ToString();
            txtNoteHos = dt0.Rows[0]["AhMst_Note"].ToString();
            //********************************************************
            //************************************************
            txtGroup = dt0.Rows[0]["GroupName"].ToString();
            txtGroupid = dt0.Rows[0]["GROUPCODE"].ToString();
            nGROUPLEVEL = dt0.Rows[0]["GROUPLEVEL"].ToString();
            nLEVEL1 = dt0.Rows[0]["LEVEL1"].ToString();
            //DateTime date = DateTime.Now;
            //dtpHospDay = date.ToString("MM/dd/yyyy");


            //saveFlag = "Edit";
            accountledgercs hospital = new accountledgercs()

            {
                txtHosNameid = Convert.ToInt32(txtHosNameid),
                txtHosId = Convert.ToInt32(txtHosNameid),
                txtHosName = txtHosName,
                AhMst_Address = txtHosAddres,

                AhMst_mobile = txtHosMobile,
                AhMst_Phno = txtHosPhone,
                AhMst_Email = txtHosEmail,
                txtHosArea = txtHosArea,
                AhMst_AreaID = Convert.ToInt32(txtHosAreaid),
                txtHosConPrsn = txtHosConPrsn,
                txtHosSpecialised = txtHosSpecialised,
                txtHosSpecialisedid = Convert.ToInt32(txtHosSpecialisedid),
                dtpHospDay = dtpHospDay,
                txtNoteHos = txtNoteHos,
                chkIsActive = chkActiveHos




            };
            allUser.Add(hospital);

            sqlcon.Close();
            return Json(allUser, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GETEMPNAME()
        {

            var empname = (from c in db.AccountHeads_Mst

                           where c.AhMst_Type == "Staff"
                           //orderby c.AhMst_pName
                           select c).ToList();
            //var emp = db.AccountHeads_Mst.OrderBy(c => c.AhMst_Type == "Staff").ToList();
            //var empnames = empname.ToList();
            return Json(empname, JsonRequestBehavior.AllowGet);

        }
        public JsonResult SEARCHEMPLOYEEENAME(string customerName)
        {

            var customers = from c in db.AccountHeads_Mst
                            where c.AhMst_Type.Contains(customerName)
                            select c;
            return Json(customers.ToList());


        }
        public JsonResult selectempname(string selectedValue)
        {
            var empname = from s in db.AccountHeads_Mst
                          where s.AhMst_Type == "Staff"
                          orderby s.AhMst_pName
                          select s;
            return Json(empname, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectempname1(string selectedValue)
        {
            var empname1 = from s in db.AccountHeads_Mst
                           where s.AhMst_Type == "Staff"
                           orderby s.AhMst_Key

                           select s;
            return Json(empname1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult displayemployee(string empname, string empid)
        {
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            string txtStfId = "";
            string txtStfName = "";
            string txtStfNameid = "";
            string txtStfAddres = "";
            string txtStfMobile = "";
            string txtStfPhone = "";
            string txtStfArea = "";
            string txtStfEmail = "";
            string txtStfConPrsn = "";
            string dtpStfDob = "";
            string dtpStfWedding = "";
            string dtpStfCardIssue = "";
            string txtStfNote = "";
            bool chkIsActive = true;
            bool chkCardHolder = true;
            bool optMale = false;
            bool optFemale = false;
            string saveFlag = "";
            string txtStfAreaid = "";








            List<accountledgercs> allUser = new List<accountledgercs>();

            SqlCommand sqlcmd0 = new SqlCommand();
            sqlcmd0.Connection = sqlcon;
            sqlcmd0.CommandType = CommandType.Text;
            sqlcmd0.CommandText = "SELECT     dbo.AccountHeads_Mst.AhMst_Key, dbo.AccountHeads_Mst.AhMst_pName, dbo.AccountHeads_Mst.AhMst_Ismale, dbo.AccountHeads_Mst.AhMst_Address,dbo.AccountHeads_Mst.LEVEL1,dbo.AccountHeads_Mst.GROUPLEVEL,dbo.AccountHeads_Mst.GROUPCODE,G.HEAD As GroupName," + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_AreaID, dbo.AccountHeads_Mst.AhMst_ContPrsn, dbo.AccountHeads_Mst.AhMst_Phno, dbo.AccountHeads_Mst.AhMst_mobile, " + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_Dob, dbo.AccountHeads_Mst.AhMst_WedAnn, dbo.AccountHeads_Mst.AhMst_Email, dbo.AccountHeads_Mst.AhMst_IsActive, " + Environment.NewLine
                  + "dbo.AccountHeads_Mst.AhMst_Note, dbo.AccountHeads_Mst.AhMst_IssDate, dbo.AccountHeads_Mst.AhMst_IsCrdHldr, dbo.Masters.Mstr_Desc AS Area" + Environment.NewLine
                  + "FROM dbo.AccountHeads_Mst WITH (NOLOCK) LEFT JOIN GROUPS G On dbo.AccountHeads_Mst.GROUPCODE=G.CODE LEFT OUTER JOIN" + Environment.NewLine
                  + "dbo.Masters WITH (NOLOCK) ON dbo.AccountHeads_Mst.AhMst_AreaID = dbo.Masters.Mstr_Key WHERE dbo.AccountHeads_Mst.AhMst_Key=" + empid + "  ";

            SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd0);
            DataTable dt0 = new DataTable();
            sd0.Fill(dt0);

            txtStfId = dt0.Rows[0]["AhMst_Key"].ToString();
            txtStfName = dt0.Rows[0]["AhMst_pName"].ToString();
            txtStfNameid = dt0.Rows[0]["AhMst_Key"].ToString();
            txtStfAddres = dt0.Rows[0]["AhMst_Address"].ToString();
            txtStfMobile = dt0.Rows[0]["AhMst_mobile"].ToString();
            txtStfPhone = dt0.Rows[0]["AhMst_Phno"].ToString();
            txtStfArea = dt0.Rows[0]["Area"].ToString();
            txtStfAreaid = dt0.Rows[0]["AhMst_AreaID"].ToString();
            txtStfEmail = dt0.Rows[0]["AhMst_Email"].ToString();
            txtStfConPrsn = dt0.Rows[0]["AhMst_ContPrsn"].ToString();
            dtpStfDob = dt0.Rows[0]["AhMst_Dob"].ToString();
            dtpStfWedding = dt0.Rows[0]["AhMst_WedAnn"].ToString();

            try
            {
                dtpStfCardIssue = dt0.Rows[0]["AhMst_IssDate"].ToString();
            }
            catch { }
            txtStfNote = dt0.Rows[0]["AhMst_Note"].ToString();
            chkIsActive = false;
            if (dt0.Rows[0]["AhMst_IsActive"].ToString() == "1")
            {
                chkIsActive = true;
            }
            if (dt0.Rows[0]["AhMst_IsCrdHldr"].ToString() == "1")
            {
                chkCardHolder = true;

            }
            else
            {

            }

            if (dt0.Rows[0]["AhMst_Ismale"].ToString() == "M")
            {
                optMale = true;

            }
            else
            {
                optFemale = true;
            }

            //saveFlag = "Edit";
            accountledgercs employee = new accountledgercs()

            {

                txtStfId = txtStfNameid,
                txtStfNameid = txtStfNameid,
                txtStfName = txtStfName,
                txtStfAddres = txtStfAddres,
                txtStfMobile = txtStfMobile,
                txtStfAreaid = Convert.ToInt32(txtStfAreaid),
                txtStfPhone = txtStfPhone,
                txtStfArea = txtStfArea,
                txtStfEmail = txtStfEmail,
                txtStfConPrsn = txtStfConPrsn,
                dtpStfDob = dtpStfDob,
                dtpStfWedding = dtpStfWedding,
                txtStfNote = txtStfNote,
                chkIsActive = chkIsActive,
                optMale = optMale,
                optFemale = optFemale








            };
            allUser.Add(employee);
            sqlcon.Close();
            return Json(allUser, JsonRequestBehavior.AllowGet);
        }







        public JsonResult SAVEVIEWEMPLOYEE(accountledgercs employeesave, string dtpStfDob1, string dtpStfWedding1)
        {
            logindetails l = Session["logindls"] as logindetails;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;

            string txtStfName = "";
            string txtGroupid = "";
            string saveFlag = "";
            //saveFlag = employeesave.saveFlag;
            int txtStfNameid = 0;
            bool optMale = true;
            bool optFemale = true;
            string txtStfAddres = "";
            int txtStfAreaid = 0;
            string txtStfArea = "";
            string txtStfConPrsn = "";
            string txtStfPhone = "";
            string txtStfMobile = "";
            string dtpStfDob = "";
            string dtpStfWedding = "";
            string txtStfEmail = "";
            string txtStfNote = "";
            bool chkIsActive = true;
            int IsActive = 0;
            double? YearId = l.Yr_Id;
            //DateTime.ParseExact(dtpStfDob, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);
            //DateTime.ParseExact(dtpStfWedding, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);

            //saveFlag = employeesave.saveFlag;
            //DateTime from = DateTime.Now;
            //dtpStfDob = from.ToString("dd/MM/yyyy");
            //DateTime from1 = DateTime.Now;
            //dtpStfWedding = from1.ToString("dd/MM/yyyy");
            DateTime dtpStfDobs = DateTime.ParseExact(dtpStfDob1, "dd/MM/yyyy", null);
            DateTime dtpStfWeddings = DateTime.ParseExact(dtpStfWedding1, "dd/MM/yyyy", null);
            dtpStfDob = dtpStfDobs.ToString("MM/dd/yyyy hh:mm tt");
            dtpStfWedding = dtpStfWeddings.ToString("MM/dd/yyyy hh:mm tt");
            //employeesave.dtpStfDob = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            //employeesave.dtpStfWedding = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            try
            {
                txtStfNameid = Convert.ToInt32(employeesave.txtStfNameid);
                txtStfName = employeesave.txtStfName;
                txtStfAddres = employeesave.txtStfAddres;
                txtStfAreaid = employeesave.txtStfAreaid;
                txtStfArea = employeesave.txtStfArea;
                txtStfConPrsn = employeesave.txtStfConPrsn;
                txtStfPhone = employeesave.txtStfPhone;
                txtStfMobile = employeesave.txtStfMobile;
                txtStfEmail = employeesave.txtStfEmail;
                txtStfNote = employeesave.txtStfNote;
                chkIsActive = employeesave.chkIsActive;
                optMale = employeesave.optMale;
                optFemale = employeesave.optFemale;








            }
            catch
            {

            }

            if (txtStfName == "")
            {

            }
            else
            {



                int StaffID = 0;
                int ExsistStaffId = 0;
                string nGroupCode = "";
                try
                {
                    nGroupCode = txtGroupid.ToString();
                }
                catch { }
                if (nGroupCode == "")
                {
                    nGroupCode = "45";

                }
                SqlCommand cmd5;
                double empKey = 0;
                var saveEdit = db.AccountHeads_Mst.Where(a => a.AhMst_Key == txtStfNameid).ToList();
                foreach (var svedt in saveEdit)
                {
                    db.AccountHeads_Mst.Remove(svedt);
                }
                db.SaveChanges();
                if (saveEdit.Count > 0)
                {
                    saveFlag = "Old";
                }
                else
                {
                    saveFlag = "New";
                }
                if (saveFlag == "New")
                {
                    empKey = db.AccountHeads_Mst.Max(acc => acc.AhMst_Key) + 1;
                    cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='Staff' And [AhMst_pName]='" + txtStfName + "'", sqlcon);
                }
                else
                {
                    try
                    {
                        empKey = Convert.ToDouble(employeesave.txtStfNameid);
                        ExsistStaffId = Convert.ToInt32(txtStfNameid);
                    }
                    catch { }
                    cmd5 = new SqlCommand("select isnull(AhMst_Key,0) from [dbo].[AccountHeads_Mst] WITH (NOLOCK) where [AhMst_Type]='Staff' And [AhMst_pName]='" + txtStfName + "' And AhMst_Key!=" + ExsistStaffId + " ", sqlcon);
                }

                try
                {

                    StaffID = Convert.ToInt32(cmd5.ExecuteScalar());

                }
                catch { }

                if (StaffID != 0)
                {


                }



                //*****
                SqlCommand sqlcmd1 = new SqlCommand();
                sqlcmd1.Connection = sqlcon;
                //sqlcmd1.CommandType = CommandType.StoredProcedure;

                AccountHeads_Mst accounthead = new AccountHeads_Mst();
                accounthead.AhMst_Key = Convert.ToInt32(empKey);

                accounthead.AhMst_pName = employeesave.txtStfName;



                if (optMale == true)
                {
                    accounthead.AhMst_Ismale = "M";

                }
                else if (optFemale == true)
                    accounthead.AhMst_Ismale = "F";
                {

                }
                if (chkIsActive == true)
                {
                    IsActive = 1;
                }
                accounthead.AhMst_SplID = 0;
                accounthead.AhMst_Address = employeesave.txtStfAddres;
                accounthead.AhMst_AreaID = employeesave.txtStfAreaid;
                accounthead.AhMst_ContPrsn = employeesave.txtStfConPrsn;
                accounthead.AhMst_Phno = employeesave.txtStfPhone;
                accounthead.AhMst_mobile = employeesave.txtStfMobile;
                accounthead.AhMst_Dob = Convert.ToDateTime(dtpStfDob);/*DateTime.ParseExact(dtpStfDob, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);*/
                //DateTime.ParseExact(nowDate, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);
                accounthead.AhMst_WedAnn = Convert.ToDateTime(dtpStfWedding);/*DateTime.ParseExact(dtpStfWedding, "yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);*/
                accounthead.AhMst_Email = employeesave.txtStfEmail;
                accounthead.AhMst_SendMail = 0;
                accounthead.AhMst_Note = employeesave.txtStfNote;
                accounthead.AhMst_IsActive = Convert.ToInt32(employeesave.chkIsActive);
                accounthead.AhMst_Type = "Staff";

                db.AccountHeads_Mst.Add(accounthead);

                var openbalancesave = db.Opening_Balance.Where(a => a.OpBl_AccId == txtStfNameid).ToList();
                foreach (var svedt in openbalancesave)
                {
                    db.Opening_Balance.Remove(svedt);
                }
                db.SaveChanges();
                if (saveEdit.Count > 0)
                {
                    saveFlag = "Old";
                }
                else
                {
                    saveFlag = "New";

                }


                if (saveFlag == "New")
                {

                    Opening_Balance opening = new Opening_Balance();
                    int openbalanceid = db.Opening_Balance.Max(acc => acc.OpBl_Key) + 1;
                    opening.OpBl_Key = openbalanceid;
                    opening.OpBl_AccId = Convert.ToInt32(empKey);
                    opening.OpBl_OpBalance = 0;
                    opening.OpBl_UsrId = 2;
                    opening.OpBl_YrId = (int)YearId;
                    opening.OpBl_OpStatus = "";
                    opening.Head = employeesave.txtStfName;
                    //opening.OpBl_AccId = Convert.ToDecimal(advert + 1);
                    db.Opening_Balance.Add(opening);
                    db.SaveChanges();
                }
                try
                {

                    sqlcon.Close();
                }

                catch (Exception exe)
                {
                    var x = exe.InnerException;
                    var y = exe.Message;
                    return Json(new { Result = "error" });
                }



            }


            return Json(JsonRequestBehavior.AllowGet);

        }




        public JsonResult SAVEUSERCREATION(accountledgercs usersave)
        {
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            int EmpId = 0;
            int EmpIdExisist = 0;
            string txtUsrName = "";
            string txtPasswrd = "";
            string txtEmp = "";
            string pb_Sign = "";
            string txtRtpass = "";
            string txtUsrNameid = "";
            string txtEmpid = "";
            string Password = "";
            string cmbUsrGrp = "";
            string CheckExsistUser = "";
            bool _CheckUserFlag;
            int imgId = 0;

            string file = usersave.Filepic;

            byte[] imagebyte = null;
            try
            {
                txtUsrNameid = usersave.txtUsrNameid;
                txtUsrName = usersave.txtUsrName;
                txtEmp = usersave.txtEmp;
                txtEmpid = Convert.ToString(usersave.txtEmpid);
                txtRtpass = usersave.txtRtpass;
                cmbUsrGrp = usersave.cmbUsrGrp;
                file = usersave.Filepic;
                txtPasswrd = usersave.txtPasswrd;
                file = usersave.Filepic;
            }
            catch
            {

            }
            if (txtUsrName == "")
            {

            }
            if (txtPasswrd == "")
            {

            }
            if (Convert.ToString(txtEmpid) == "0")
            {

            }
            if (pb_Sign != null && Convert.ToString(txtEmpid) == "0")
            {

            }
            else
            {

            }
            try
            {

                try
                {
                    EmpId = Convert.ToInt32(txtEmpid);
                }
                catch { }
                try
                {
                    SqlCommand cmd3 = new SqlCommand("Select Usr_key from Users WITH (NOLOCK) Where Usr_EmpId=" + EmpId + "", sqlcon);
                    EmpIdExisist = Convert.ToInt32(cmd3.ExecuteScalar());
                }
                catch { }
                if (EmpIdExisist > 0 && EmpId != 0)
                {
                    return Json(new { Result = "Employee Already Added..Please Change Employee.." });

                }

                Password = Encrypt1(usersave.txtPasswrd, "sblw-3hn8-sqoy19");
                if (txtPasswrd == txtRtpass)
                {

                    SqlCommand cmd1 = new SqlCommand();
                    cmd1.Connection = sqlcon;

                    User users = new User();
                    var advert = (from ad in db.Users
                                  select ad.Usr_key).Max();
                    users.Usr_key = advert + 1;

                    users.Usr_Name = usersave.txtUsrName;
                    users.Usr_pwd = Password;
                    users.Usr_grp = usersave.cmbUsrGrp;
                    users.Usr_EmpId = Convert.ToInt32(usersave.txtEmpid);
                    users.Usr_EmpKey = "";

                    if (file != null)
                    {
                        string base64string;
                        base64string = usersave.Filepic;
                        string[] arr;
                        arr = base64string.Split(',');
                        byte[] bytearr;
                        bytearr = Convert.FromBase64String(arr[1]);
                        users.Usr_Sign = bytearr;


                    }




                    db.Users.Add(users);
                    db.SaveChanges();
                }
            }



            catch (Exception exe)
            {
                var x = exe.InnerException;
                var y = exe.Message;
                return Json(new { Result = "error" });
            }

            return Json(JsonRequestBehavior.AllowGet);

        }
        public static string Encrypt1(string input, string key)
        {
            byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }


        public JsonResult CHECKUSRNAME(accountledgercs usersave)
        {
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            int UserKey = 0;
            string txtUsrName = "";
            string txtPasswrd = "";
            string txtRtpass = "";
            try
            {
                UserKey = Convert.ToInt32(usersave.txtUsrNameid);
                txtUsrName = usersave.txtUsrName;
                txtPasswrd = usersave.txtPasswrd;
                txtRtpass = usersave.txtRtpass;
            }
            catch
            {

            }

            try
            {
                SqlCommand cmd = new SqlCommand("SELECT isnull(Usr_key,0) FROM Users WITH (NOLOCK) where Usr_Name='" + txtUsrName + "'", sqlcon);
                UserKey = Convert.ToInt32(cmd.ExecuteScalar());
            }
            catch { }

            if (UserKey != 0)
            {
                return Json(new { Result = "UserName Already Exsist" });


            }
            else
            {

            }
            if (txtPasswrd != txtRtpass)
            {
                return Json(new { Result = "Passwords Not Matching" });
            }
            else
            {

            }


            return Json(JsonRequestBehavior.AllowGet);
        }
        public JsonResult CheckAgent()
        {
            try
            {
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string AhMst_pName = "";
                double AhMst_Key = 0;
                List<branchdetails> brdls = new List<branchdetails>();
                //*****************************************************************
                SqlCommand cmd1 = new SqlCommand("select AhMst_pName,AhMst_Key from AccountHeads_Mst where AhMst_Type = 'AGENT' And AhMst_IsActive = 1 order by AhMst_Key", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    branchdetails bds = new branchdetails()
                    {
                        AhMst_pName = dr["AhMst_pName"].ToString(),
                        AhMst_Key = Convert.ToDouble(dr["AhMst_Key"])
                    };
                    brdls.Add(bds);
                }
                ViewBag.AgentDtls = brdls;
                sqlcon.Close();
                return Json(new { Result = "OK", Records = brdls });

            }
            catch (Exception exe)
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult InsuranceWiseColln(branchdetails insrncWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = insrncWiseObj.ff;
                string todatee = insrncWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = insrncWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = insrncWiseObj.BrMst_Name;
                Head1 = "INSURANCE WISE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "InsuranceWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "InsuranceWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition; //ISNULL(Inv_InsNo,'') <> '' 
                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                        "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                        "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                        "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                        "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                        "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                        "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                        "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                        "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit'  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition; //ISNULL(Inv_InsNo,'') <> '' 

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditCardwise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CreditCardwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFInsuranceWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "InsuranceWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "InsuranceWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
        }
        public JsonResult CreditCardWiseColln(branchdetails crCardWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = crCardWiseObj.ff;
                string todatee = crCardWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = crCardWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = crCardWiseObj.BrMst_Name;
                Head1 = "CREDIT CARD WiSE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CreditCardWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CreditCardWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {


                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_Netamt As Inv_Netamt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition +
                            " UNION " +
                            "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt  as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,pend.PndC_Amount As Inv_Netamt " +
                            "FROM PendingCollections Pend Left Join  dbo.Invoice_Mst WITH (NOLOCK) On Pend.PndC_Labno=Invoice_Mst.Inv_No AND Pend.PndC_CpyId=Invoice_Mst.Inv_CpyId  AND Pend.PndC_YrId=Invoice_Mst.Inv_YrId LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON pend.PndC_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE  Pend.PndC_Date  >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  Pend.PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Pend.PndC_InvPaymode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " ORDER BY Inv_No ";

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_Netamt As Inv_Netamt " +
                                         "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                         "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition +
                                         " UNION " +
                                         "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt  as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,pend.PndC_Amount As Inv_Netamt " +
                                         "FROM PendingCollections Pend Left Join  dbo.Invoice_Mst WITH (NOLOCK) On Pend.PndC_Labno=Invoice_Mst.Inv_No AND Pend.PndC_CpyId=Invoice_Mst.Inv_CpyId  AND Pend.PndC_YrId=Invoice_Mst.Inv_YrId LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON pend.PndC_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                         "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Pend.PndC_InvPaymode = 'Debit/Credit'  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " ORDER BY Inv_No ";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditCardwise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CreditCardwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCreditCardWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CreditCardWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CreditCardWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyCashInvoice(branchdetails dailycashInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = dailycashInvObj.ff;
                string todatee = dailycashInvObj.tt;
                string nTblOut = "";
                string Nfile_name = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = dailycashInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCashInvoice";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND Inv_PayMode='Cash' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;

                }
                else
                {
                    //sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                    //      "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                    //      "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                    //      "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                    //      "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                    //      "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                    //      "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                    //      "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                    //      "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode='Cash' AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND Inv_PayMode='Cash' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                   "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + condition;

                }
                else
                {
                    //   sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                    //"B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                    //"B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                    //"B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                    //"B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                    //"B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                    //"A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                    //"FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                    //"(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + condition;
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                      "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                      "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                      "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                      "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                      "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                      "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                      "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                      "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + condition;

                }
                ////************************************************************************

                //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingColl);
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + condition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
               "(PndC_Cancld <> 1)  AND PndC_InvPaymode='Cash' AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + condition;


                }
                double PedColSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PedColSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PedColSum = 0;
                }
                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["PendSum"] = PedColSum;
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyCashInv.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DailyCashInv.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        [HttpPost]
        public JsonResult DailyClctnStatements(branchdetails dailyColnStmnts)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dailyColnStmnts.ff;
                string todatee = dailyColnStmnts.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = dailyColnStmnts.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dailyColnStmnts.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionStatement";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_OthCmnt,dbo.Invoice_Mst.Inv_Comment,dbo.Invoice_Mst.Inv_ModalitDiv, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_OthCmnt,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                          "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                          "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                          "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                          "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                          "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                          "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                          "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);




                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                   "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                 "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                 "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                 "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                 "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                 "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                 "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                 "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                 "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'" + nCondition;

                }
                ////************************************************************************

                //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingColl);


                //*******CancelledInvoice******

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_CnlComnt,dbo.Invoice_Mst.Inv_Cnltmestmp " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status = - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;
                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_CnlComnt,dbo.Invoice_Mst.Inv_Cnltmestmp " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status = - 1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(CancelledInvoice);



                ///**********Cancelled Invoice End***************

                //**************************Credit Bill summary****************************
                try
                {
                    if (BrmstKey > 0)
                    {
                        sqlStr = " SELECT COUNT(Inv_No) as count,Ah.AhMst_pName as Corporate,SUM(Inv_Netamt) as NetAmt FROM Invoice_Mst With(Nolock) LEFT JOIN AccountHeads_Mst Ah On Inv_InsId=Ah.Ahmst_key  WHERE Inv_Yrid=" + nYrId + " And Inv_CpyId=" + BrmstKey + " And Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "' ANd Inv_InsId>0 And Inv_PayMode='Credit' GROUP BY AhMst_pName";
                    }

                    else
                    {
                        sqlStr = "SELECT COUNT(Inv_No) as count,Ah.AhMst_pName as Corporate,SUM(Inv_Netamt) as NetAmt FROM Invoice_Mst With(Nolock) LEFT JOIN AccountHeads_Mst Ah On Inv_InsId=Ah.Ahmst_key  WHERE Inv_Yrid=" + nYrId + "  And Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "' ANd Inv_InsId>0 And Inv_PayMode='Credit' GROUP BY AhMst_pName";
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                    sDa.Fill(CorpSummary);
                }
                catch { }
                //**************************END of Credit Bill summary*********************
                /////*****************PENDING REGISTER**************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_BalAmt <> 0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash' AND Inv_No not In (SELECT PndC_Labno FROm PendingCollections WHERE PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId=" + BrmstKey + ")";




                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingReg);

                //************************************************************************

                //sqlStr = "SELECT SUM (PndC_Amount) AS PendSumAmt FROM PendingCollections WITH (NOLOCK) WHERE  " +
                // "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId = " + nCpyId ;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + nCondition;


                }
                double PedColSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PedColSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PedColSum = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Payment'  OR vchr_TransType='Day book') AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double CashPaySum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPaySum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPaySum = 0;
                }


                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode<>'Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode<>'Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double CreditSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CreditSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CreditSum = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(Inv_BalAmt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_BalAmt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                            "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;
                }
                double Inv_BalSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    Inv_BalSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    Inv_BalSum = 0;
                }

                ////************************

                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendSumNew = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendSumNew = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendSumNew = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsRecAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Receipts' OR  vchr_TransType='Day book') AND vchr_CpyId = " + BrmstKey + "  AND vchr_BrId=" + BrmstKey;

                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsRecAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Receipts' OR  vchr_TransType='Day book') AND  vchr_BrId=" + BrmstKey;


                }
                double CashPayrEC = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPayrEC = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPayrEC = 0;
                }
                /////////////////////
                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + "  AND (PndC_InvPaymode='Debit/Credit' OR PndC_InvPaymode='BHIM/UPI Online Payment') ";

                    //sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' " +
                    //     "AND Inv_Status <> - 1 AND Inv_CpyId = " + nCpyId + " AND Inv_YrId = " + nYrId+" AND PndC_InvPaymode='Debit/Credit'";
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1   AND (PndC_InvPaymode='Debit/Credit' OR PndC_InvPaymode='BHIM/UPI Online Payment')";

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendDebit = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendDebit = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendDebit = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double CreditAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CreditAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CreditAmt = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Debit/Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Debit/Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double DebitCreditAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    DebitCreditAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    DebitCreditAmt = 0;
                }
                //***************************************


                if (BrmstKey > 0)
                {
                    //sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + _DaCollBranchId;
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + "  AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   AND vchr_BrId=" + BrmstKey;

                }
                double cashRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRecipts = 0;
                }
                //*********************************************


                //***************************************


                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashRfundRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRfundRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRfundRecipts = 0;
                }
                //*********************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                double PendColCur = 0;
                double PendColPre = 0;

                double PendColCurCash = 0;
                double PendColPreCard = 0;

                double PendColCurCard = 0;
                double PendColPrecash = 0;


                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCur = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCur = 0;
                }
                //*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'AND PndC_InvPaymode='Cash'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCash = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCard = 0;
                }
                //**************************
                double PendCurCheq = 0;
                double PendPreCheq = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurCheq = 0;
                }
                //**************************
                //**********************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPrecash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPrecash = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPreCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPreCard = 0;
                }
                //******************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreCheq = 0;
                }
                //********************************************
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************

                //*******************BHIM/UPI
                //**************************
                double PendCurBhimUpi = 0;
                double PendPreBhimUpi = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurBhimUpi = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurBhimUpi = 0;
                }
                //**************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreBhimUpi = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreBhimUpi = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='BHIM/UPI Online Payment' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='BHIM/UPI Online Payment' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double BHIMUPIINVAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    BHIMUPIINVAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    BHIMUPIINVAmt = 0;
                }
                //***************************************

                //**************Cheque*************************
                if (BrmstKey > 0)
                {

                    sqlStr = " select isnull(sum(vchr_Receipt),0) as vouchercheque from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy-MM-dd") + "'and  vchr_CpyId =" + BrmstKey + "";


                }
                else
                {

                    sqlStr = " select isnull(sum(vchr_Receipt),0) as vouchercheque from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy-MM-dd") + "'";
                }
                double ChequeReceipt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    ChequeReceipt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    ChequeReceipt = 0;
                }
                //***************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_Date> =' " + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
    " ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningColl = Math.Round(OpeningColl, 2);
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                OpeningnewPrevPend = Math.Round(OpeningnewPrevPend, 2);
                //*************************END Of OPENING COLL***************************************
                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["PendSum"] = PedColSum;

                dtMaster.Columns.Add("CPaySum", typeof(double));
                dtMaster.Rows[0]["CPaySum"] = CashPaySum;

                dtMaster.Columns.Add("CreditSum1", typeof(double));
                dtMaster.Rows[0]["CreditSum1"] = CreditSum;

                dtMaster.Columns.Add("Inv_BalSum", typeof(double));
                dtMaster.Rows[0]["Inv_BalSum"] = Inv_BalSum;

                dtMaster.Columns.Add("PendSumNew", typeof(double));
                dtMaster.Rows[0]["PendSumNew"] = PendSumNew;


                dtMaster.Columns.Add("CRecsum", typeof(double));
                dtMaster.Rows[0]["CRecsum"] = CashPayrEC;

                dtMaster.Columns.Add("PendDebit", typeof(double));
                dtMaster.Rows[0]["PendDebit"] = PendDebit;

                dtMaster.Columns.Add("CreditAmt", typeof(double));
                dtMaster.Rows[0]["CreditAmt"] = CreditAmt;

                dtMaster.Columns.Add("DebitCreditAmt", typeof(double));
                dtMaster.Rows[0]["DebitCreditAmt"] = DebitCreditAmt;

                //dtMaster.Columns.Add("CashReceipt", typeof(double));
                //dtMaster.Rows[0]["CashReceipt"] = cashRecipts;

                //*************Pending Collection Data*************
                dtMaster.Columns.Add("PendColCur", typeof(double));
                dtMaster.Rows[0]["PendColCur"] = PendColCur;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;
                //***********************************************
                dtMaster.Columns.Add("PendColPreCash", typeof(double));
                dtMaster.Rows[0]["PendColPreCash"] = PendColPrecash;

                dtMaster.Columns.Add("PendColPreCard", typeof(double));
                dtMaster.Rows[0]["PendColPreCard"] = PendColPreCard;

                dtMaster.Columns.Add("PendColCurCash", typeof(double));
                dtMaster.Rows[0]["PendColCurCash"] = PendColCurCash;

                dtMaster.Columns.Add("PendColcurChq", typeof(double));
                dtMaster.Rows[0]["PendColcurChq"] = PendCurCheq;

                dtMaster.Columns.Add("PendColPreChq", typeof(double));
                dtMaster.Rows[0]["PendColPreChq"] = PendPreCheq;


                dtMaster.Columns.Add("PendColCurCard", typeof(double));
                dtMaster.Rows[0]["PendColCurCard"] = PendColCurCard;


                dtMaster.Columns.Add("dateColl", typeof(string));
                dtMaster.Rows[0]["dateColl"] = fromdate.ToString("dd-MM-yyyy");

                dtMaster.Columns.Add("nOpeningCol", typeof(string));
                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));
                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;


                dtMaster.Columns.Add("RefundRecipts", typeof(string));
                dtMaster.Rows[0]["RefundRecipts"] = cashRfundRecipts;


                dtMaster.Columns.Add("InvBhimUpi", typeof(string));
                dtMaster.Rows[0]["InvBhimUpi"] = BHIMUPIINVAmt;



                dtMaster.Columns.Add("PendPreBHIMUPI", typeof(string));
                dtMaster.Rows[0]["PendPreBHIMUPI"] = PendPreBhimUpi;




                dtMaster.Columns.Add("PendCurBhimUpi", typeof(string));
                dtMaster.Rows[0]["PendCurBhimUpi"] = PendCurBhimUpi;

                dtMaster.Columns.Add("ChequeReceipts", typeof(string));
                dtMaster.Rows[0]["ChequeReceipts"] = ChequeReceipt;

                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                dsPrint.Tables.Add(CancelledInvoice);
                dsPrint.Tables.Add(PendingReg);
                dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                //ReportDocument reportDocument = new ReportDocument();

                //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_LabToken.rpt";

                //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_LabToken.xsd");

                //reportDocument.Load(filepath);


                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CollectnStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public static DataTable FillTitleTbl(string Header1, string Header2, string Header3)
        {
            //CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
            CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
            List<Stproc_GET_CMPNY_MST_DTLS_Result> cpydl = new List<Stproc_GET_CMPNY_MST_DTLS_Result>();
            cpydl = db.Stproc_GET_CMPNY_MST_DTLS().ToList();
            foreach (Stproc_GET_CMPNY_MST_DTLS_Result item in cpydl)
            {
                FirmName = item.CmpMst_Name;
                FirmAdd2 = item.CmpMst_Addr2;
                FirmAdd1 = item.CmpMst_Addr1;
                FirmAdd3 = item.CmpMst_place;
                PhoneNo = item.CmpMst_Ph;
                MailId = item.CmpMst_Email;
            }


            DataTable dtTitle = new DataTable();
            dtTitle.TableName = "dtTitle";

            dtTitle.Columns.Add("FirmName", typeof(string));
            dtTitle.Columns.Add("FirmAdd1", typeof(string));
            dtTitle.Columns.Add("FirmAdd2", typeof(string));
            dtTitle.Columns.Add("FirmAdd3", typeof(string));
            dtTitle.Columns.Add("PhoneNo", typeof(string));
            dtTitle.Columns.Add("MailId", typeof(string));
            dtTitle.Columns.Add("TinNo", typeof(string));
            dtTitle.Columns.Add("CstNo", typeof(string));
            dtTitle.Columns.Add("Header1", typeof(string));
            dtTitle.Columns.Add("Header2", typeof(string));
            dtTitle.Columns.Add("Header3", typeof(string));
            //dtTitle.Columns.Add("_InvPrintType", typeof(int));


            dtTitle.Rows.Add();
            dtTitle.Rows[0]["FirmName"] = FirmName;
            dtTitle.Rows[0]["FirmAdd1"] = FirmAdd1;
            dtTitle.Rows[0]["FirmAdd2"] = FirmAdd2;
            dtTitle.Rows[0]["FirmAdd3"] = FirmAdd3;
            dtTitle.Rows[0]["PhoneNo"] = PhoneNo;
            dtTitle.Rows[0]["MailId"] = MailId;
            dtTitle.Rows[0]["TinNo"] = TinNo;
            dtTitle.Rows[0]["CstNo"] = CstNo;
            dtTitle.Rows[0]["Header1"] = Header1;
            dtTitle.Rows[0]["Header2"] = Header2;
            dtTitle.Rows[0]["Header3"] = Header3;
            //dtTitle.Rows[0]["_InvPrintType"] = Header3;
            return dtTitle;
        }
        public FileResult PDFDailyCollctnStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyClctnSummary(branchdetails dailyCollnSmryObj)
        {



            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string sqlStr = "";
                string Head2 = "";
                SqlDataAdapter sDa = new SqlDataAdapter();
                string fromdatee = dailyCollnSmryObj.ff;
                string todatee = dailyCollnSmryObj.tt;
                //*****************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                DateTimeConverter cx = new DateTimeConverter();
                string fromdt = fromdat.ToShortDateString();
                string todt = todat.ToShortDateString();
                //DateTime fdts = Convert.ToDateTime(fromdt);
                //DateTime tdts = Convert.ToDateTime(todt);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                //string fromdat = Convert.ToDateTime(fromdatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
                //string todat = Convert.ToDateTime(todatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);

                //int nYrId = 2122;
                brnchName = dailyCollnSmryObj.BrMst_Name;
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                SqlCommand cmd = new SqlCommand();
                string Head3 = "";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                string Head1 = "";
                string nCondition = "";
                double BrmstKey = 0;
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";

                string BrmstName = dailyCollnSmryObj.BrMst_Name;
                Head1 = "COLLECTION SUMMERY";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstName;
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                          " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                          " UNION " +
                          "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + "  AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                          " UNION " +
                          " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + "  AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                           " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";

                }
                else
                {
                    //sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal ,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt FROM " +

                    // " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType', case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND  Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                    //" UNION " +
                    // "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4, 0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1)  AND PndC_YrId = " + nYrId + " AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                    //" UNION " +
                    // " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType', 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1)   AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                    //" A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";
                    //***********************************************************
                    //sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                    //     " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                    //     " UNION " +
                    //     "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_YrId = " + nYrId + " AND  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                    //     " UNION " +
                    //     " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                    //      " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";


                    //******************

                    sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                             " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1)  AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                             " UNION " +
                             "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1)  AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                             " UNION " +
                             " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1)   AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                              " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);



                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendSumNew = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendSumNew = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendSumNew = 0;
                }
                //***************************************
                //***************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                double PendColCur = 0;
                double PendColPre = 0;

                double PendColCurCash = 0;
                double PendColPreCard = 0;

                double PendColCurCard = 0;
                double PendColPrecash = 0;


                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCur = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCur = 0;
                }
                //*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'AND PndC_InvPaymode='Cash'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCash = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCard = 0;
                }
                //**************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPrecash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPrecash = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPreCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPreCard = 0;
                }
                //********************************************
                //**************************
                double PendCurCheq = 0;
                double PendPreCheq = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurCheq = 0;
                }
                //**************************
                //******************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreCheq = 0;
                }
                //********************************************
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
    " ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                //*************************END Of OPENING COLL***************************************




                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);

                dtMaster.Columns.Add("PendSumNew", typeof(double));
                dtMaster.Rows[0]["PendSumNew"] = PendSumNew;
                //*************Pending Collection Data*************
                dtMaster.Columns.Add("PendColCur", typeof(double));
                dtMaster.Rows[0]["PendColCur"] = PendColCur;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;
                //***********************************************
                dtMaster.Columns.Add("PendColPreCash", typeof(double));
                dtMaster.Rows[0]["PendColPreCash"] = PendColPrecash;

                dtMaster.Columns.Add("PendColPreCard", typeof(double));
                dtMaster.Rows[0]["PendColPreCard"] = PendColPreCard;

                dtMaster.Columns.Add("PendColCurCash", typeof(double));
                dtMaster.Rows[0]["PendColCurCash"] = PendColCurCash;

                dtMaster.Columns.Add("PendColCurCard", typeof(double));
                dtMaster.Rows[0]["PendColCurCard"] = PendColCurCard;


                dtMaster.Columns.Add("PendColcurChq", typeof(double));
                dtMaster.Rows[0]["PendColcurChq"] = PendCurCheq;

                dtMaster.Columns.Add("PendColPreChq", typeof(double));
                dtMaster.Rows[0]["PendColPreChq"] = PendPreCheq;

                dtMaster.Columns.Add("nOpeningCol", typeof(string));

                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));

                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                //*********************************************************
                string Reportfilepaths = "";
                string filepath = "";
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                dsPrint.Tables.Add(CancelledInvoice);
                dsPrint.Tables.Add(PendingReg);
                dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CollectnSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFDailyCashInvoice()

        {
            string fileName = "";
            if (brKey > 0)
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCashInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            //fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
            //fileName = fileName + ".pdf";
            //string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            //byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            //return File(FileBytes, "application/pdf");

        }
        public FileResult PDFDailyCollctnSmry()

        {
            string fileName = "";





            if (brKey > 0)
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyClctnSummary2(branchdetails dailyCollnSmry2)
        {
            int RowAdd = 0;
            int CountData = 0;
            int Totaldata = 0;
            string fordate = "";
            int MonthTemp = 0;
            int YearTempr = 0;
            int mnth = 0;
            int yr = 0;
            string YearTemp = "";
            //***********************************
            int RowNo = 0;
            double PendsumNew1 = 0;
            double PrependCash1 = 0;
            double PrePendCrd1 = 0;
            double Adnvce1 = 0;
            double Cashpend1 = 0;
            double TotalCash1 = 0;
            double TotalCard1 = 0;

            double ccardcoll1 = 0;
            double CreditPend1 = 0;

            double cashbalance1 = 0;
            double TotalPendingOn1 = 0;

            double npayments1 = 0;
            double NetCashBal1 = 0;
            double NetAmt1 = 0;
            double Creditamt1 = 0;
            double nBhim1 = 0;
            double nDiscamt1 = 0;
            double ngross1 = 0;
            //*******************************
            Adnvce = 0;
            Cashpend = 0;
            TotalCash = 0;
            TotalCard = 0;
            CreditPend = 0;
            cashbalance = 0;
            TotalPendingOn = 0;
            npayments = 0;
            NetCashBal = 0;
            NetAmt = 0;
            Creditamt = 0;
            nBhim = 0;
            ngross = 0;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                double ccardcoll = 0;
                SqlCommand cmd1 = new SqlCommand();
                string sqlStr = "";
                //int CompanyId = 2;
                double PendsumNew = 0;
                //int YearId = 2122;
                double PrependCash = 0;
                double PrePendCrd = 0;
                List<collectionDetails> cdlss = new List<collectionDetails>();
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = dailyCollnSmry2.ff;
                string todatee = dailyCollnSmry2.tt;
                //******************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                //string date = f.ToString("dd/MM/yyyy");
                //DateTime fromdat = Convert.ToDateTime(date);


                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                //string date1 = f.ToString("dd/MM/yyyy");
                //DateTime todat = Convert.ToDateTime(date1);

                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = dailyCollnSmry2.rowCount;
                //int CompanyId = 2;
                //int YearId = 2122;
                int optDaily = dailyCollnSmry2.dailyCheck;
                int RowCount = 0;
                List<Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result> clctsmry = new List<Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result>();
                clctsmry = db.Stproc_GET_COLLECTION_SUMMERY_DETAILS((int?)CompanyId, (int?)YearId, fromdat, todat).ToList();
                //Totaldata = (clctsmry.Count()) - 1;
                if (dailyCollnSmry2.dailyCheck == 0)
                {
                    if (clctsmry.Count > 0)
                    {
                        RowCount = clctsmry.Count;
                    }
                }
                else
                {
                    Totaldata = clctsmry.Count - 1;
                }
                List<collectionDetails> cds = new List<collectionDetails>();
                foreach (Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result item in clctsmry)
                {

                    collectionDetails cs = new collectionDetails()
                    {
                        Mdate = (DateTime)item.Mdate,
                        Discamt = item.Discamt,
                        Netamt = item.Netamt,
                        Advance = item.Advance,
                        CashBalance = item.CashBalance,
                        CredBalance = item.CredBalance,
                        CCardBalance = item.CCardBalance,
                        PendCol = item.PendCol,
                        Payments = item.Payments,
                        NetBal = item.NetBal,
                        CashPend = item.CashPend,
                        CreditPend = item.CreditPend,
                        Bhim = item.Bhim
                    };
                    cds.Add(cs);

                }
                //foreach (collectionDetails css in cds)
                //{

                //}
                //Session["clctnSmry2"] = cds;
                if (cds != null)
                {
                    foreach (collectionDetails item in cds)
                    {
                        mnth = ((DateTime)item.Mdate).Month;
                        yr = ((DateTime)item.Mdate).Year;
                        try
                        {
                            DateTemp = Convert.ToDateTime(item.Mdate);
                        }
                        catch { }


                        sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                         "(PndC_Cancld <> 1) AND PndC_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + DateTemp.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + " AND Inv_BrID=" + CompanyId;

                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PrependCash = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }
                        sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                         "(PndC_Cancld <> 1) AND PndC_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND  Inv_Date < '" + DateTemp.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + " AND Inv_BrID=" + CompanyId;

                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PrePendCrd = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }
                        sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId;
                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PendsumNew = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }

                        try
                        {
                            ccardcoll = Convert.ToDouble(item.CCardBalance);
                            ccardcoll = ccardcoll * -1;
                        }
                        catch { }
                        if (dailyCollnSmry2.dailyCheck == 1)
                        {
                            if (RowAdd == 0)
                            {

                                RowAdd = 1;
                                MonthTemp = DateTemp.Month;
                                YearTemp = DateTemp.ToString("MMM-yyyy");
                            }

                        }

                        int MonthTempCheck = DateTemp.Month;

                        List<collectionDetails> cdls = new List<collectionDetails>();
                        if (dailyCollnSmry2.dailyCheck == 0)
                        {
                            collectionDetails cs = new collectionDetails()
                            {

                                Mdate = item.Mdate,
                                Discamt = item.Discamt,
                                Netamt = item.Netamt,
                                Advance = item.Advance,
                                CashBalance = item.CashBalance,
                                CredBalance = item.CredBalance,
                                CCardBalance = item.CCardBalance,
                                PendCol = item.PendCol,
                                Payments = item.Payments,
                                NetBal = item.NetBal,
                                CashPend = item.CashPend,
                                CreditPend = item.CreditPend,
                                Bhim = item.Bhim,
                                //s = (item.Mdate).ToString(),
                                M_date = (item.Mdate).ToString(),
                                CashColl = (item.Advance) + (item.CashPend) - PrependCash,
                                CardColl = ccardcoll + (item.CreditPend) - PrePendCrd,
                                Credit = (item.CredBalance),
                                PndngOnSameDay = ((item.CashBalance) + PendsumNew) * -1,
                                PrePendCashColl = PrependCash,
                                PrePendCardColl = PrePendCrd,
                                Payment = item.Payments,
                                NetCash = (item.CashPend) + (item.Advance) - (item.Payments),
                                nBhim = item.Bhim,
                                Balance = item.Netamt
                            };
                            cls.Add(cs);
                        }
                        else
                        {
                            //************************************************
                            if (MonthTemp != MonthTempCheck || Totaldata == CountData)
                            {

                                if (Totaldata == CountData && MonthTemp == MonthTempCheck)
                                {
                                    PendsumNew1 += PendsumNew;
                                    PrependCash1 += PrependCash;
                                    PrePendCrd1 += PrePendCrd;
                                    Adnvce1 += (double)item.Advance;
                                    Cashpend1 += (double)item.CashPend;


                                    ccardcoll1 += ccardcoll;
                                    CreditPend1 += (double)item.CreditPend;

                                    cashbalance1 += (double)item.CashBalance;

                                    Creditamt1 += (double)item.CredBalance;
                                    npayments1 += (double)item.Payments;

                                    nBhim1 += (double)item.Bhim;

                                    NetAmt1 += (double)item.Netamt;
                                    nDiscamt1 += (double)item.Discamt;
                                    ngross1 = NetAmt1 + nDiscamt1;

                                }

                                //******************************************
                                TotalCash1 = Adnvce1 + Cashpend1 - PrependCash1;
                                TotalCard1 = ccardcoll1 + CreditPend1 - PrePendCrd1;
                                TotalPendingOn1 = (cashbalance1 + PendsumNew1) * -1;
                                NetCashBal1 = Cashpend1 + Adnvce1 - npayments1;
                                ngross1 = NetAmt1 + nDiscamt1;
                                //******************************************
                                collectionDetails cs = new collectionDetails()
                                {
                                    CashColl = TotalCash1,
                                    CardColl = TotalCard1,
                                    Credit = Creditamt1,
                                    PndngOnSameDay = TotalPendingOn1,
                                    Payment = npayments1,
                                    PrePendCashColl = PrependCash1,
                                    PrePendCardColl = PrePendCrd1,
                                    NetCash = NetCashBal1,
                                    Balance = NetAmt1,
                                    M_date = YearTemp,
                                    nBhim = nBhim1,
                                    Grossamt = ngross1,
                                    DiscAmt = nDiscamt1
                                };
                                cls.Add(cs);


                                if (Totaldata != CountData)
                                {
                                    YearTemp = DateTemp.ToString("MMM-yyyy");
                                    PendsumNew1 = PendsumNew;
                                    PrependCash1 = PrependCash;
                                    PrePendCrd1 = PrePendCrd;
                                    Adnvce1 = (double)item.Advance;
                                    Cashpend1 = (double)item.CashPend;
                                    TotalCash1 = TotalCash;
                                    TotalCard1 = TotalCard;
                                    Creditamt1 = (double)item.CredBalance;
                                    ccardcoll1 = ccardcoll;
                                    CreditPend1 = (double)item.CreditPend;

                                    cashbalance1 = (double)item.CashBalance;
                                    TotalPendingOn1 = TotalPendingOn;

                                    npayments1 = (double)item.Payments;
                                    NetCashBal1 = NetCashBal;
                                    nBhim1 = (double)item.Bhim;
                                    NetAmt1 = (double)item.Netamt;
                                    nDiscamt1 = (double)item.Discamt;
                                    RowAdd = 0;
                                    RowNo += 1;


                                }

                                if (Totaldata == CountData && MonthTemp != MonthTempCheck)
                                {
                                    PendsumNew1 = PendsumNew;
                                    PrependCash1 = PrependCash;
                                    PrePendCrd1 = PrePendCrd;
                                    Adnvce1 = (double)item.Advance;
                                    Cashpend1 = (double)item.CashPend;
                                    TotalCash1 = TotalCash;
                                    TotalCard1 = TotalCard;
                                    Creditamt1 = (double)item.CredBalance;
                                    ccardcoll1 = ccardcoll;
                                    CreditPend1 = (double)item.CreditPend;

                                    cashbalance1 = (double)item.CashBalance;
                                    TotalPendingOn1 = TotalPendingOn;

                                    npayments1 = (double)item.Payments;
                                    NetCashBal1 = NetCashBal;
                                    nBhim1 = (double)item.Bhim;
                                    NetAmt1 = (double)item.Netamt;
                                    nDiscamt1 = (double)item.Discamt;

                                    ngross1 = NetAmt1 + nDiscamt1;
                                    RowAdd = 0;
                                    //grdsummary.Rows.Add();
                                    RowNo += 1;
                                    //******************************************
                                    TotalCash1 = Adnvce + Cashpend - PrependCash;
                                    TotalCard1 = ccardcoll + CreditPend - PrePendCrd;
                                    TotalPendingOn1 = (cashbalance + PendsumNew) * -1;
                                    NetCashBal1 = Cashpend + Adnvce - npayments;
                                    collectionDetails cs1 = new collectionDetails()
                                    {
                                        CashColl = TotalCash1,
                                        CardColl = TotalCard1,
                                        Credit = Creditamt1,
                                        PndngOnSameDay = TotalPendingOn1,
                                        Payment = npayments1,
                                        PrePendCashColl = PrependCash1,
                                        PrePendCardColl = PrePendCrd1,
                                        NetCash = NetCashBal1,
                                        Balance = NetAmt1,
                                        M_date = YearTemp,
                                        nBhim = nBhim1,
                                        Grossamt = ngross1,
                                        DiscAmt = nDiscamt1
                                    };
                                    cls.Add(cs);

                                }
                            }
                            else
                            {
                                PendsumNew1 += PendsumNew;
                                PrependCash1 += PrependCash;
                                PrePendCrd1 += PrePendCrd;
                                Adnvce1 += (double)item.Advance;
                                Cashpend1 += (double)item.CashPend;
                                ccardcoll1 += ccardcoll;
                                CreditPend1 += (double)item.CreditPend;
                                cashbalance1 += (double)item.CashBalance;
                                npayments1 += (double)item.Payments;
                                NetAmt1 += (double)item.Netamt;
                                Creditamt1 += (double)item.CredBalance;
                                nDiscamt1 += (double)item.Discamt;

                            }
                        }
                        CountData += 1;
                        //************************************************

                    }

                }



                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new
                {
                    Result = "OK",
                    Record = cls
                });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult ClctnSummary2Print(branchdetails dailyCollnSmryObj)
        {

            string fromdatee = dailyCollnSmryObj.ff;
            string todatee = dailyCollnSmryObj.tt;
            string Nfile_name = "";
            //********************
            //string[] dateString2 = fromdatee.Split('/');
            //if (Convert.ToInt32(dateString2[1]) < 10)
            //{
            //    dateString2[1] = "0" + dateString2[1];
            //}
            //if (Convert.ToInt32(dateString2[0]) < 10)
            //{
            //    dateString2[0] = "0" + dateString2[0];
            //}

            //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
            ////fromdat 11 / 30 / 2021 11:11:40 AM
            //string[] dateString3 = todatee.Split('/');
            //if (Convert.ToInt32(dateString3[1]) < 10)
            //{
            //    dateString3[1] = "0" + dateString3[1];
            //}
            //if (Convert.ToInt32(dateString3[0]) < 10)
            //{
            //    dateString3[0] = "0" + dateString3[0];
            //}
            //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
            //**********************
            string[] dateString = fromdatee.Split('/');
            DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
            string[] dateString2 = todatee.Split('/');
            DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
            fromdate = fromdat;
            todate = todat; /*Br_Name fromdate todate*/
            fdt = fromdate.ToString("ddMMyyyy");
            tdt = todate.ToString("ddMMyyyy");
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                Br_Name = BrMst_Name;
                //**************************************
                //DateTime nInvDate = DateTime.Now;
                DateTime nInvDate = DateTime.Now;
                double nNetamount = 0;
                double nCashcoll = 0;
                double nCardColl = 0;
                double nPendSmDay = 0;
                double nPrePendCash = 0;
                double nPrePendCard1 = 0;
                double nPaymnts = 0;
                double nNetCashBal = 0;
                double nCredit = 0;
                double nBhim = 0;
                double nDiscAmt = 0;
                double ngross = 0;

                int nDtRow = 0;
                DataTable DailyColl = new DataTable();
                DailyColl.TableName = "DailyCollSummary";
                DailyColl.Columns.Add("InvDate", typeof(DateTime));
                DailyColl.Columns.Add("Netamount", typeof(float));
                DailyColl.Columns.Add("Cashcoll", typeof(float));
                DailyColl.Columns.Add("CardColl", typeof(float));
                DailyColl.Columns.Add("PendSmDay", typeof(float));
                DailyColl.Columns.Add("PrePendCash", typeof(float));
                DailyColl.Columns.Add("PrePendCard1", typeof(float));
                DailyColl.Columns.Add("Paymnts", typeof(float));
                DailyColl.Columns.Add("NetCashBal", typeof(float));
                DailyColl.Columns.Add("Credit", typeof(float));
                DailyColl.Columns.Add("Bhim", typeof(float));
                DailyColl.Columns.Add("DiscAmt", typeof(float));
                DailyColl.Columns.Add("GrossAmt", typeof(float));
                SqlCommand cmd0;
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "CollectionSummery2";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                List<collectionDetails> cls = new List<collectionDetails>();
                SqlDataAdapter sd0;
                DataSet ds0 = new DataSet();
                //logindetails l = Session["logindls"] as logindetails;
                List<collectionDetails> clctn = Session["CollSmry2"] as List<collectionDetails>;
                if (clctn.Count == 0)
                {
                    return Json(new { Result = "ERROR" });
                }
                else
                {
                    foreach (collectionDetails item in clctn)
                    {
                        //for (int i = 0; i < clctn.Count; i++)
                        //{
                        nInvDate = DateTime.Now;
                        nNetamount = 0;
                        nCashcoll = 0;
                        nCardColl = 0;
                        nPendSmDay = 0;
                        nPrePendCash = 0;
                        nPrePendCard1 = 0;
                        nPaymnts = 0;
                        nNetCashBal = 0;
                        nCredit = 0;
                        DailyColl.Rows.Add();
                        //*******************************************************
                        try
                        {
                            nInvDate = Convert.ToDateTime(item.M_date);

                        }
                        catch { }

                        try
                        {
                            nNetamount = Convert.ToDouble(item.NetCash);

                        }
                        catch { }
                        try
                        {
                            nCashcoll = Convert.ToDouble(item.CashColl);

                        }
                        catch { }
                        try
                        {
                            nCardColl = Convert.ToDouble(item.CardColl);

                        }
                        catch { }

                        try
                        {
                            nPendSmDay = Convert.ToDouble(item.PndngOnSameDay);

                        }
                        catch { }
                        try
                        {
                            nPrePendCash = Convert.ToDouble(item.PrePendCashColl);

                        }
                        catch { }
                        try
                        {
                            nPrePendCard1 = Convert.ToDouble(item.PrePendCardColl);

                        }
                        catch { }


                        try
                        {
                            nPaymnts = Convert.ToDouble(item.Payment);

                        }
                        catch { }
                        try
                        {
                            nNetCashBal = Convert.ToDouble(item.Balance);

                        }
                        catch { }
                        try
                        {
                            nCredit = Convert.ToDouble(item.Credit);

                        }
                        catch { }

                        try
                        {
                            nBhim = Convert.ToDouble(item.nBhim);

                        }
                        catch { }
                        try
                        {
                            nDiscAmt = Convert.ToDouble(item.Discamt);

                        }
                        catch { }
                        try
                        {
                            ngross = Convert.ToDouble(item.Grossamt);

                        }
                        catch { }
                        //*************************************************************
                        collectionDetails cs1 = new collectionDetails()
                        {
                            CashColl = TotalCash1,
                            CardColl = TotalCard1,
                            Credit = Creditamt1,
                            PndngOnSameDay = TotalPendingOn1,
                            Payment = npayments1,
                            PrePendCashColl = PrependCash1,
                            PrePendCardColl = PrePendCrd1,
                            NetCash = NetCashBal1,
                            Balance = NetAmt1,
                            M_date = Convert.ToString(nInvDate),
                            nBhim = nBhim1,
                            Grossamt = ngross1,
                            DiscAmt = nDiscamt1
                        };
                        cls.Add(cs1);
                        //dt.Rows[0]["Rpt_Type_Index"] = cb_rptType.SelectedIndex;
                        //dt.Rows[0]["TestName"] = TstMst_name;
                        //dt.Rows[0]["PendingTestName"] = tstname;
                        DailyColl.Rows[nDtRow]["InvDate"] = nInvDate;
                        DailyColl.Rows[nDtRow]["Netamount"] = nNetamount;
                        DailyColl.Rows[nDtRow]["Cashcoll"] = nCashcoll;
                        DailyColl.Rows[nDtRow]["CardColl"] = nCardColl;
                        DailyColl.Rows[nDtRow]["PendSmDay"] = nPendSmDay;
                        DailyColl.Rows[nDtRow]["PrePendCash"] = nPrePendCash;
                        DailyColl.Rows[nDtRow]["PrePendCard1"] = nPrePendCard1;
                        DailyColl.Rows[nDtRow]["Paymnts"] = nPaymnts;
                        DailyColl.Rows[nDtRow]["NetCashBal"] = nNetCashBal;
                        DailyColl.Rows[nDtRow]["Credit"] = nCredit;
                        DailyColl.Rows[nDtRow]["Bhim"] = nBhim;
                        DailyColl.Rows[nDtRow]["DiscAmt"] = nDiscAmt;
                        DailyColl.Rows[nDtRow]["GrossAmt"] = ngross;
                        nDtRow += 1;
                        //}
                    }
                    cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    ds0.Tables.Add(DailyColl);
                    sqlcon.Close();
                    ReportDocument reportDocument = new ReportDocument();
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnSummary2.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_CollectnSummary2.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";


                    try
                    {


                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();




                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                }
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCollectionSummary2()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "CollectionSummery2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFBranchWiseCollection()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFPatientWiseClctn()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult BranchWiseCollection(branchdetails BrnchObj)
        {
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchObj.checkedBrnch;
            string[] checkedBrnchId = BrnchObj.checkedBrnchId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchObj.ff;
                string todatee = BrnchObj.tt;
                //DateTime s = DateTime.Parse(fromdatee);
                //*****************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //***************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_IsInsrnce, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_name," + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Address, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_SmplDate, dbo.Invoice_Mst.Inv_RsltNO, dbo.Invoice_Mst.Inv_BrID, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_time, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_InsId, dbo.Invoice_Mst.Inv_AreaId, dbo.Invoice_Mst.Inv_EmailtoPatient, dbo.Invoice_Mst.Inv_Email, dbo.Invoice_Mst.Inv_EtoDr, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DrId, dbo.Invoice_Mst.Inv_OutDr, dbo.Invoice_Mst.Inv_hospId, dbo.Invoice_Mst.Inv_Schrge, dbo.Invoice_Mst.Inv_DiscId, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_CltnID, dbo.Invoice_Mst.Invl_DiscPer, dbo.Invoice_Mst.Inv_RepTime, dbo.Invoice_Mst.Inv_GrosAmt, dbo.Invoice_Mst.Inv_DiscAmt, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Inv_BalAmt, dbo.Invoice_Mst.Inv_Comment, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_CmpltdDate, dbo.Invoice_Mst.Inv_CmpltdTime, dbo.Invoice_Mst.Inv_OthCmnt, dbo.Invoice_Mst.Inv_User, dbo.Invoice_Mst.Invl_IsPending, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_Status, dbo.Invoice_Mst.Inv_CnlComnt, dbo.Invoice_Mst.Inv_Cnltmestmp, dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, " + Environment.NewLine
                            + "dbo.Baranches_Mst.BrMst_Code, dbo.Baranches_Mst.BrMst_Name, dbo.AccountHeads_Mst.AhMst_pName AS Insurance, " + Environment.NewLine
                            + "AccountHeads_Mst_1.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS HospName," + Environment.NewLine
                            + "AccountHeads_Mst_4.AhMst_pName AS CollectionStaff, dbo.Masters.Mstr_Desc AS AraMst_Name, Masters_1.Mstr_Desc AS DscRsnMst_Reason, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_UsrId, dbo.Invoice_Mst.Inv_YrId, dbo.Invoice_Mst.Inv_CpyId, dbo.Invoice_Mst.Inv_Updtd, dbo.Invoice_Mst.Inv_Tittle, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_InsNo, dbo.Invoice_Mst.Inv_PayMode, dbo.Invoice_Mst.Inv_ItemDesc, dbo.Invoice_Mst.Inv_SentMail, dbo.Invoice_Mst.Inv_RptMode, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_RepThrPersonal, dbo.Invoice_Mst.Inv_RepThrCourier, dbo.Invoice_Mst.Inv_RepThrPhone, dbo.Invoice_Mst.Inv_RepThrEmail, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DocPath1, dbo.Invoice_Mst.Inv_RepThrSms, dbo.Invoice_Mst.Inv_DocPath2, dbo.Invoice_Mst.Inv_CollModeId, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DocPath3" + Environment.NewLine
                            + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Baranches_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_BrID = dbo.Baranches_Mst.BrMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = dbo.AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_3  WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_hospId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_PntId = AccountHeads_Mst_1.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_AreaId = dbo.Masters.Mstr_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Masters AS Masters_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters_1.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             " AND inv_status!=-1  AND dbo.Invoice_Mst.Inv_YrId = " + YearId + " and Inv_BrID in(" + nCondition + ") order by Inv_Date";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "InvoiceMst_View");


                cmd.CommandText = "Select Vo.vchr_Key,Vo.vchr_Id,Vo.vchr_Date,Vo.vchr_TransType,Vo.vchr_BrId,Vo.vchr_TransNo,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Ah.AhMst_pName from Vouchers Vo WITH(NOLOCK) left join AccountHeads_Mst Ah WITH(NOLOCK) on Vo.vchr_Id = Ah.AhMst_Key where(vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and vchr_YrId = " + YearId + "and Vo.vchr_BrId in(" + nCondition + " )  AND Convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtvoucher");

                cmd.CommandText = "Select vchr_BrId,vchr_Payment,vchr_Receipt  FROM Vouchers where (vchr_TransType='Cash Payment'or vchr_TransType= 'Cash Receipts') and  vchr_YrId=" + YearId + " and vchr_BrId in(" + nCondition + ") AND   Convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtvouchers");

                cmd.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND A.PndC_CpyId=B.Inv_CpyId WHERE  " +
                   "(A.PndC_Cancld <> 1)" + "AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'" + " AND inv_status!=-1  AND Inv_YrId = " + YearId + "and B.Inv_BrID in (" + nCondition + " )  order by Inv_Date";

                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "payment");

                cmd.CommandText = "SELECT SUM(RCVDAMT)AS RCVDAMT,sum(netamt) as netamt, sum(PNDC)AS PNDC, sum(pay) as pay, sum(rece) as rece, BRID ,brmst_name from " + Environment.NewLine
     + "(SELECT SUM(Inv_RcvdAmt) AS RCVDAMT,sum(Inv_Netamt) as netamt ,'' AS PNDC, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst  where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status!=-1 " + "and Inv_BrID in (" + nCondition + " ) group by inv_brid" + Environment.NewLine

             + "UNION" + Environment.NewLine
     + "SELECT '' AS RCVDAMT,'' as netamt, SUM(PndC_Amount) AS PNDC, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld!=1 " + " and PndC_CpyId in(" + nCondition + " ) group by PndC_CpyId " + Environment.NewLine

      + "UNION" + Environment.NewLine

       + "select '' AS RCVDAMT,'' as netamt, '' AS PNDC, vchr_BrId as BRID, sum(vchr_payment) as pay, sum(vchr_receipt) as rece from Vouchers where (vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and Convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) <= '" + todate.ToString("yyyy-MM-dd") + "'and vchr_BrId in (" + nCondition + " ) group by vchr_BrId)  a left join Baranches_Mst on BrMst_Key=BRID group by BRID,brmst_name";



                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "summary");
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }


                //***************************************************************
                //*******************Opening Collection*************************

                cmd.CommandText = " SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt,Brid FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt,Inv_CpyId as Brid FROM Invoice_Mst WHERE(Inv_Status <> -1)  AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' GROUP BY Inv_CpyId " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt,PndC_CpyId as Brid FROM PendingCollections WHERE(PndC_Cancld <> 1)  AND  PndC_Date>'" + StartDate.ToString("yyyy-MM-dd") + "' AND  PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' group by  PndC_CpyId " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt,vchr_CpyId as Brid FROM  Vouchers WHERE(vchr_BookId = 1)  AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book')  group by  vchr_CpyId  " +
    " ) A group by Brid";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "OpeningBal");
                //******//*************************************************************************************************************************************************

                cmd.CommandText = "SELECT SUM(RCVDAMT)AS RCVDAMT,sum(netamt) as netamt,sum(netamtDR) as netamtDR,SUM(RCVDAMTdr)AS RCVDAMTdr,sum(netamtcR) as netamtcr,SUM(RCVDAMTcr)AS RCVDAMTcr,sum(netamtbh) as netamtbh, SUM(RCVDAMTbh)AS RCVDAMTbh,sum(PNDC)AS PNDC,sum(PNDCDR)AS PNDCDR, sum(PNDCCR)AS PNDCCR, sum(PNDCBH)AS PNDCBH, sum(pay) as pay, sum(rece) as rece, BRID, brmst_name from (SELECT SUM(Inv_RcvdAmt) AS RCVDAMT, sum(Inv_Netamt) as netamt, '' as netamtDR, ''AS RCVDAMTdr, '' as netamtcR, '' AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Cash' and Inv_BrID in (" + nCondition + " ) group by inv_brid " +
                " UNION " +
                "SELECT ''AS RCVDAMT, '' as netamt, sum(Inv_Netamt) as netamtDR, SUM(Inv_RcvdAmt) AS RCVDAMTdr, '' as netamtcR, '' AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Debit/Credit' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                   " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt ,'' as netamtDR,''AS RCVDAMTdr, sum(Inv_Netamt) as netamtcR, sum(Inv_Netamt) AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Credit' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                      " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt ,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr, sum(Inv_Netamt) as netamtbh, sum(Inv_Netamt) as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst  where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'BHIM/UPI Online Payment' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                      " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr, '' as netamtbh,'' as RCVDAMTbh,SUM(PndC_Amount) AS PNDC,'' AS PNDCDR,''AS PNDCCR,'' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld!= 1 AND PndC_InvPaymode = 'Cash' and PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +

                " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR, ''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh,'' AS PNDC, SUM(PndC_Amount)AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'Debit/Credit' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                     " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh, '' AS PNDC,'' AS PNDCDR, SUM(PndC_Amount)AS PNDCCR, '' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'Credit' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                   " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh, '' AS PNDC,'' AS PNDCDR,''AS PNDCCR, SUM(PndC_Amount)AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'BHIM/UPI Online Payment' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                    " UNION " +
                "select '' AS RCVDAMT,'' as netamt,'' as netamtDR, ''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh,'' AS PNDC,'' AS PNDCDR,''AS PNDCCR,'' AS PNDCBH, vchr_BrId as BRID, sum(vchr_payment) as pay, sum(vchr_receipt) as rece from Vouchers where (vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and Convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111))  <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (3,6,5,2,4 ) group by vchr_BrId)  a left join Baranches_Mst on BrMst_Key = BRID group by BRID,brmst_name";

                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtmaster");

                //*********************************************************************************************************************************************************


                cmd.CommandText = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                "AccountHeads_Mst.AhMst_pName AS PatientName,AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                                "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt,dbo.Invoice_Mst.inv_brid,dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                                "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId in(" + nCondition + ") AND dbo.Invoice_Mst.Inv_YrId = " + YearId + "";



                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtDetails");
                //*******************************************************************************************************


                SqlCommand cmdyr = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId in (" + nCondition + ") AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }

                //***************************************************************************************************************************************************************
                string filepath = "";
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                DataTable dtMaster = new DataTable();
                dt.Reset();
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "[dbo].[Company_Mst]");
                //dtMaster.Columns.Add("nOpeningCol", typeof(string));
                //dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                //dtMaster.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_collectionstatementbranchwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_collectionstatementbranchwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public JsonResult PatientIdWiseBillClctn(branchdetails patntIdObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                fdt = patntIdObj.ff;
                tdt = patntIdObj.tt;
                int PatFromID = 0;
                int PatToID = 0;
                string Nfile_name = "";
                try
                {
                    PatFromID = Convert.ToInt32(fdt.Trim());
                }
                catch { }
                try
                {
                    PatToID = Convert.ToInt32(tdt.Trim());
                }
                catch { }
                if (PatToID == 0 || PatFromID == 0)
                {
                    return Json(new { Result = "ERROR" });
                }
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
                DataSet ds0 = new DataSet();

                cmd0.CommandText = "SELECT Inv_No,Inv_name,Inv_GrosAmt,Inv_Netamt,Inv_DiscAmt,Inv_CurBalAmt,Inv_CurRcvdAmt,Inv_Date,Inv_PayMode FROM Invoice_Mst " +
                    "WHERE Inv_No >= " + PatFromID + " AND Inv_No <= " + PatToID + " " +
                    "AND Inv_CpyId = " + CompanyId + " AND Inv_Status<>-1 AND Inv_YrId = " + YearId + " ";



                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************





                string Head2 = "FROM : " + fdt + "     To : " + tdt;
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");


                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "PATIENT ID WISE BILL COLLECTION DETAILS";
                ds0.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PatIdBillColl.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_PatIdBillColl.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult MonthlyCollctnSmry(branchdetails mnthcollObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                DataSet dsPrint = new DataSet();
                DataTable dTitle = new DataTable();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                dtMaster.TableName = "dtMaster";
                dtDetails.TableName = "dtDetails";
                dTitle.TableName = "dTitle";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double nCpyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                brnchName = BrMst_Name;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                double ccardcoll = 0;
                string nCondition = "";
                //SqlCommand cmd1 = new SqlCommand();
                string sqlStr = "";
                //int CompanyId = 2;
                double PendsumNew = 0;
                //int YearId = 2122;
                double PrependCash = 0;
                double PrePendCrd = 0;


                string Head1 = "MONTHLY COLLECTION SUMMERY";
                if (nCpyId > 0)
                {
                    nCondition = " AND Inv_BrID=" + nCpyId + "";
                }


                List<collectionDetails> cdlss = new List<collectionDetails>();
                //SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = mnthcollObj.ff;
                string todatee = mnthcollObj.tt;

                //******************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //*******************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string date = f.ToString("dd/MM/yyyy");
                //DateTime fromdat = Convert.ToDateTime(date);


                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //string date1 = f.ToString("dd/MM/yyyy");
                //DateTime todat = Convert.ToDateTime(date1);

                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                string Head3 = nCpyId.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                sqlStr = "SELECT  Mdate,SUM(gross) gross, SUM(Disc) Disc,SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments, SUM(amt1+CashPend-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,SUM(amt10) Receipt,SUM(amt14) as CurBAl,SUM(Bhim) as Bhim FROM " +

                " ( SELECT  Inv_Date AS Mdate,SUM(Inv_GrosAmt) AS gross,SUM(Inv_DiscAmt) As Disc, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4, 'InDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt14,case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_Netamt) else 0 end as Bhim  FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + nCpyId + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' GROUP BY Inv_Date ,Inv_PayMode " +
                " UNION " +
                "  SELECT PndC_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend,0 as amt10,0 AS amt14,case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end as Bhim FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_CpyId = " + nCpyId + " AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date ,PndC_InvPaymode   " +
                " UNION " +
                " SELECT vchr_Date AS Mdate,0 AS gross,0 As Disc,  0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10,0 AS amt14, 0 as Bhim    FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date " +
                " UNION " +
                " SELECT vchr_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, 0 AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,SUM(vchr_Receipt) as amt10,0 AS amt14 , 0 as Bhim   FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                 " A WHERE A.Mdate>= '" + fromdate.ToString("yyyy-MM-dd") + "'  AND A.Mdate <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";


                cmd = new SqlCommand(sqlStr);


                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + nCpyId + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + nCpyId + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
" SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + nCpyId + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
" UNION " +
" SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + nCpyId + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
" UNION " +
" SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
" ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                //*************************END Of OPENING COLL***************************************
                //**********************************
                double PendColPre = 0;
                if (nCpyId > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + nCpyId + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************



                dtMaster.Columns.Add("nOpeningCol", typeof(string));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));

                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;

                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MonthlyCollection.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_MonthlyCollection.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFPMonthlyClctn()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "MonthlyCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CollSmryBranchWise(branchdetails BrnchsmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchsmryObj.checkedBrnch;
            string[] checkedBrnchId = BrnchsmryObj.checkedBrnchId;


            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchsmryObj.ff;
                string todatee = BrnchsmryObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //**********************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrMst_Name;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CollectionSummeryBranchWise";
                if (nCondition != "")
                {
                    // spl = "  and BRID in (" + spl + ")";

                    cmd0.CommandText = "select BRName,BRID,sum(amt10) as cashBal,sum(amt8) as netamount, sum(amt1) as Grossamt,sum(amt2) as PendBill,sum(amt3) as PendColl,sum(amt4) as Discount,sum(amt5) as Payment ,Sum(RecAmt) As Advnc,sum(OtIncome ) as OtIncome  from  ( select    BrMst_Name as  BRName,Inv_BrID as BRID, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt10 ,sum(Inv_Netamt) as amt8,sum(Inv_GrosAmt) as amt1,sum(Inv_CurBalAmt) as amt2,0 as amt3,sum(Inv_DiscAmt) as amt4,0 as amt5, case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end AS RecAmt,0 as OtIncome  from  Invoice_Mst left join Baranches_Mst on Inv_BrID=BrMst_Key   WHERE (Inv_Status <> - 1)  AND Inv_YrId = '" + YearId + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode " +
                    " UNION " +
                    " select  BrMst_Name as  BRName,PndC_CpyId  as BRID ,0 as amt10  ,0 as amt8, 0 as amt1, 0 as amt2, sum(PndC_Amount) as amt3,0 as amt4 ,0 as amt5,0 AS RecAmt,0 as OtIncome   from dbo.PendingCollections left join  Baranches_Mst  on  PndC_CpyId=BrMst_Key WHERE (PndC_Cancld <> 1)   AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + " 'and PndC_InvPaymode='Cash' AND  PndC_CpyId in  (" + nCondition + ")  GROUP BY PndC_CpyId,BrMst_Name" +
                    " UNION " +
                    " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, sum(vchr_Payment) as amt5,0 AS RecAmt,0 as OtIncome  FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                  " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,sum(vchr_Receipt) as OtIncome FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                   " select   BrMst_Name as  BRName, BrMst_Key as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,0 as OtIncome FROM Baranches_Mst Where BrMst_Key=1 ) A    GROUP BY A.BRID,A.BRName ORDER BY A.BRName";

                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

                try
                {
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "CollStmt_Branch");
                }
                catch { }
                //********************************************************************************************************************

                if (nCondition != "")
                {
                    cmd0.CommandText = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt,Inv_BrID From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_YrId = " + YearId + " and Inv_CpyId in  (" + nCondition + ") group by  Inv_CpyId,Inv_BrID";
                }
                else
                {
                    cmd0.CommandText = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt,Inv_BrID From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                                "AND Inv_Status <> - 1 AND Inv_YrId = " + YearId + " group by  Inv_CpyId,Inv_BrID";

                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "PendSum");



                if (nCondition != "")
                {
                    cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4  from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + YearId + " and  Inv_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and  Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                      //" UNION"+
                      //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                      " UNION" +
                       " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId=" + YearId + " and vchr_CpyId in (" + nCondition + ")  GROUP BY vchr_CpyId,BrMst_Name" +
                      " union " +
                      "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'   AND vchr_YrId=" + YearId + " and vchr_CpyId in (" + nCondition + ")  GROUP BY vchr_CpyId,BrMst_Name " +
                    "  UNION SELECT BrMst_Key AS BrID,BrMst_Name As BrName,0 as amt1,0 as amt2,0 as amt3, 0 as amt4 from Baranches_Mst  GROUP BY BrMst_Key,BrMst_Name) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";





                }
                else
                {

                    //cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4   from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + cPublic.YearId + " and  Inv_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'  GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                    //    //" UNION"+
                    //    //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                    //  " UNION" +
                    //   " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'   GROUP BY vchr_CpyId,BrMst_Name" +
                    //  " union " +
                    //  "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'     GROUP BY vchr_CpyId,BrMst_Name ) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4  from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + YearId + " and  Inv_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and  Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                                         //" UNION"+
                                         //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                                         " UNION" +
                                          " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId=" + YearId + "   GROUP BY vchr_CpyId,BrMst_Name" +
                                         " union " +
                                         "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'   AND vchr_YrId=" + YearId + "   GROUP BY vchr_CpyId,BrMst_Name " +
                                       " UNION SELECT BrMst_Key AS BrID,BrMst_Name As BrName,0 as amt1,0 as amt2,0 as amt3, 0 as amt4 from Baranches_Mst  GROUP BY BrMst_Key,BrMst_Name) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";

                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "OPInvRcvAmt");

                ////**************************************************************************************************************


                if (nCondition != "")
                {
                    // cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt,StarDate  from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + cPublic.StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate )A  GROUP BY A.BrID,A.BrName,A.StarDate ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + nCondition + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                    " UNION " +
                    " SELECT BrMst_Key AS BrID,BrMst_Name as BrName,0 AS amt10,'' as StarDate FROM Baranches_Mst GROUP BY BrMst_Key,BrMst_Name  )A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";

                }
                else
                {

                    //cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt,StarDate  from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id  where  PndC_Date>='" + cPublic.StartDate.ToString("yyyy-MM-dd") + "'  PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'  GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate)A  GROUP BY A.BrID,A.BrName,A.StarDate ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + nCondition + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                                       " UNION " +
                                       " SELECT BrMst_Key AS BrID,BrMst_Name as BrName,0 AS amt10,'' as StarDate FROM Baranches_Mst GROUP BY BrMst_Key,BrMst_Name  )A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";


                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "OPPendAmt");
                //*********************************************************************************************


                if (nCondition != "")
                {
                    cmd0.CommandText = "select count(Inv_No),Inv_BrID,Inv_CpyId from Invoice_Mst where convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + fromdate.ToString("yyyy-MM-dd") + "' and [Inv_Status]!=-1 and Inv_CpyId in  (" + nCondition + ") group by  Inv_CpyId,Inv_BrID ";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "billcount");

                    cmd0.CommandText = "select Inv_BrID,isnull(sum(Cash),0) as Cash,isnull(sum(Credit),0) as Credit,isnull(sum(cardd),0) as cardd,isnull(sum(bhim),0) as bhim FROM(select Inv_BrID,isnull(sum(Inv_RcvdAmt),0) as Cash, '' as Credit ,'' as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Cash' and [Inv_Status]!=-1 and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "'and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                      " UNION " +
                    "select Inv_BrID,'' as Cash,isnull(sum(Inv_Netamt),0)as Credit,'' as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Credit' and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "' and [Inv_Status]!=-1 and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                     " UNION " +
                     "select Inv_BrID,'' as Cash, 0 as Credit,isnull(sum(Inv_Netamt),0)as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Debit/Credit' and  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "' and [Inv_Status]!=-1 and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                      " UNION " +
                     "select Inv_BrID,'' as Cash,0 as Credit,0 as cardd,isnull(sum(Inv_Netamt), 0) as bhim from Invoice_Mst where Inv_PayMode = 'BHIM/UPI Online Payment' and convert(date, Inv_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, Inv_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'  and[Inv_Status] != -1 and  Inv_CpyId  in  (" + nCondition + ") group by Inv_BrID ) A group by Inv_BrID  ";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "CASHCREDIT");


                    cmd0.CommandText = "select vchr_BrId,isnull(sum(vouchercash),0) AS vouchercash,isnull(sum(vouchercheque),0)as vouchercheque ,isnull(sum(vouchercard),0) as vouchercard FROM(select vchr_BrId,isnull(sum(vchr_Receipt),0) as vouchercash, '' as vouchercheque,'' as vouchercard  from[dbo].[Vouchers] where vchr_TransType = 'Cash Receipts' and convert(date,[vchr_Date])>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,[vchr_Date])<='" + todate.ToString("yyyy - MM - dd") + "'and   vchr_CpyId  in  (" + nCondition + ") group by vchr_BrId " +

                    " UNION " +
                    " select vchr_BrId,''vouchercash, isnull(sum(vchr_Receipt),0) as vouchercheque,'' as vouchercard  from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'and  vchr_CpyId in  (" + nCondition + ")group by vchr_BrId" +
                    " UNION " +
                    "select vchr_BrId,''vouchercash,''vouchercheque, isnull(sum(vchr_Receipt),0) as vouchercard from[dbo].[Vouchers] where vchr_TransType = 'Card Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'and  vchr_CpyId in  (" + nCondition + ") group by vchr_BrId) a group by vchr_BrId";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Voucher");

                    cmd0.CommandText = "SELECT PndC_CpyId,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                                            "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + "group by PndC_CpyId  ";

                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "prevpend");
                    cmd0.CommandText = "SELECT inv_paymode,[Inv_CpyId],[Inv_BrID],sum([Inv_CurBalAmt]) FROM Invoice_Mst  WHERE Inv_PayMode='Cash' and (Inv_Status <> - 1)  AND Inv_YrId =" + YearId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,Inv_PayMode,[Inv_CpyId] ";

                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "curbalamt");
                }


                //*********************************************************************************************

                string Head3 = "DoctrsEnvelop";
                ////****************************************************
                //cmd0.CommandText = "SELECT Vch.*,Ahmst.AhMst_pName As Account FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE vchr_Date>='" + dtpFrom.Value.ToShortDateString() + "' AND vchr_Date<='" + dtpTo.Value.ToShortDateString() + "' AND  vchr_Id=" + AccId + " AND  vchr_CpyId=" + cPublic.CompanyId + " AND vchr_YrId=" + cPublic.YearId + " AND vchr_BrId=" + cPublic.logInBranchId + "";
                //sd0 = new SqlDataAdapter(cmd0);
                ////****************************************************
                //sd0.Fill(ds0, "Voucher");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "[dbo].[Company_Mst]");
                //****************************************************
                string filepath = "";



                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");

                SqlCommand cmdPayments = new SqlCommand("select sum(vchr_Payment) as Payments  FROM dbo.Vouchers  WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") ", sqlcon);
                double VchrPayment = 0;
                try
                {
                    VchrPayment = Convert.ToDouble(cmdPayments);
                }
                catch { }
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Columns.Add("OpeningBal", typeof(double));
                dt.Columns.Add("Payments", typeof(double));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                //dt.Rows[0]["TestName"] = txtbarcode.Text.Trim();
                //dt.Rows[0]["Branch"] = cmbBranch.Text.Trim();
                dt.Rows[0]["Reporthead"] = Head3;
                dt.Rows[0]["OpeningBal"] = OpeningBal;
                dt.Rows[0]["Payments"] = VchrPayment;
                //rpt_CollectnStmnt_BranchWise
                ds0.Tables.Add(dt);
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnStmnt_BranchWise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CollectnStmnt_BranchWise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFCollSmryBrnchWise()
        {
            string fileName = "";
            //  Nfile_name += "Report_" + fdt + "_" + tdt +  "_" + "CollectionSummeryBranchWise";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CollectionSummeryBranchWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult MonthlyCollDivSmry(branchdetails objMonDivColl)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double BrmstKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = objMonDivColl.ff;
                string todatee = objMonDivColl.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //*********************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
                //******************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = objMonDivColl.BrMst_Name;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (objMonDivColl.dailyCheck == 0)
                {
                    DMCheck = 0;
                    Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyDivisionSummery";
                    cmd0.Connection = sqlcon;
                    cmd0.CommandTimeout = 0;
                    cmd0.CommandType = CommandType.StoredProcedure;
                    //****************************************************
                    cmd0.Parameters.AddWithValue("@Date", fromdate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@Date1", todate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@CpyId", BrmstKey);
                    cmd0.Parameters.AddWithValue("@YrId", YearId);
                    cmd0.CommandText = "stproc_Division";

                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                    DataSet ds0 = new DataSet();
                    sd0.Fill(ds0, "Listview");
                    //****************************************************
                    cmd0.Parameters.Clear();
                    cmd0.Connection = sqlcon;
                    cmd0.CommandType = CommandType.Text;
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    //****************************************************
                    string filepath = "";
                    string Head2 = "";

                    ReportDocument reportDocument = new ReportDocument();
                    Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");
                    DataTable dt = new DataTable();
                    // dt.Columns.Add("Product", typeof(string));
                    dt.Columns.Add("Head", typeof(string));
                    dt.Rows.Add();
                    // dt.Rows[0]["Product"] = Head2;
                    dt.Rows[0]["Head"] = Head2;
                    ds0.Tables.Add(dt);

                    sqlcon.Close();


                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Testdaily.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_Testdaily.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";


                    try
                    {


                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();

                        sqlcon.Close();
                        return Json(new { Result = "OK" });


                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    return Json(new { Result = "OK" });
                }
                else if (objMonDivColl.dailyCheck == 1)
                {
                    DMCheck = 1;
                    Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyDivisionSummery";
                    cmd0.Connection = sqlcon;
                    cmd0.CommandTimeout = 0;
                    cmd0.CommandType = CommandType.StoredProcedure;
                    //****************************************************
                    cmd0.Parameters.AddWithValue("@Date", fromdate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@Date1", todate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@CpyId", BrmstKey);
                    cmd0.Parameters.AddWithValue("@YrId", YearId);
                    cmd0.CommandText = "stproc_Division";

                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                    DataSet ds0 = new DataSet();
                    sd0.Fill(ds0, "Listview");
                    //****************************************************
                    cmd0.Parameters.Clear();
                    cmd0.Connection = sqlcon;
                    cmd0.CommandType = CommandType.Text;
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    //****************************************************
                    string filepath = "";
                    string Head2 = "";

                    ReportDocument reportDocument = new ReportDocument();
                    Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");
                    DataTable dt = new DataTable();
                    dt.Columns.Add("Head", typeof(string));
                    dt.Rows.Add();
                    dt.Rows[0]["Head"] = Head2;
                    ds0.Tables.Add(dt);

                    //********************** PREVIOUS YEAR PENDING COLLECTION ******

                    DateTime StartDate = DateTime.Now;
                    SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                    try
                    { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                    catch { }

                    double pendPrevYr = 0;
                    SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                    try
                    {
                        pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                    }
                    catch { }
                    //***************************************************************
                    //*******************Opening Collection*************************
                    double openingbalance = 0;

                    double OpeningnewPrevPend = 0;
                    double RecAmt = 0;
                    double PendAmt = 0;
                    double Payments = 0;
                    double receipts = 0;
                    string opstatus = "";
                    double OpeningColl = 0;
                    SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + YearId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                    SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                    DataTable dt1 = new DataTable();
                    sda1.Fill(dt1);
                    foreach (DataRow dr in dt1.Rows)
                    {
                        try
                        {
                            openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                        }
                        catch { }
                        opstatus = dr["OpBl_OpStatus"].ToString();
                    }

                    if (openingbalance > 0)
                    {
                        if (opstatus == "Cr")
                        {
                            openingbalance = openingbalance * -1;

                        }
                    }
                    cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
        " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
        " UNION " +
        " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + YearId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
        " UNION " +
        " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
        " ) A", sqlcon);
                    sda1 = new SqlDataAdapter(cmd1);
                    dt1 = new DataTable();
                    sda1.Fill(dt1);
                    foreach (DataRow dr1 in dt1.Rows)
                    {
                        RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                        Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                        receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                        PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                    }
                    OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                    OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                    //*************************END Of OPENING COLL***************************************
                    dt.Columns.Add("nOpeningCol", typeof(string));

                    dt.Rows[0]["nOpeningCol"] = OpeningColl;

                    dt.Columns.Add("nOpeningColNew", typeof(string));

                    dt.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                    sqlcon.Close();


                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestMonthWise.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_TestMonthWise.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }
                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;
                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                        CrExportOptions.FormatOptions = CrFormatTypeOptions;
                        reportDocument.Export();

                        sqlcon.Close();
                        return Json(new { Result = "OK" });
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";
                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                    }
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFMonthlyDivSmry()
        {
            if (DMCheck == 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyDivisionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyDivisionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }

        }
        public JsonResult MnthlyCollSmryBrnchWise(branchdetails BrnchMnthlysmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchMnthlysmryObj.checkedBrnch;
            string[] checkedBrnchId = BrnchMnthlysmryObj.checkedBrnchId;


            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchMnthlysmryObj.ff;
                string todatee = BrnchMnthlysmryObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //**************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //*****************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrMst_Name;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "MonthlyCollectionSummeryBranchWise";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;



                cmd.CommandText = "SELECT BRANCHNAME,branchid, Mdate,SUM(gross) gross, SUM(Disc) Disc,SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,SUM(amt10) Receipt,SUM(amt14) as CurBAl FROM " +

              " ( SELECT BrMst_Name AS BRANCHNAME,Inv_CpyId as branchid, Inv_Date AS Mdate,SUM(Inv_GrosAmt) AS gross,SUM(Inv_DiscAmt) As Disc, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4, 'InDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt14  FROM dbo.Invoice_Mst WITH (NOLOCK)  left join Baranches_Mst on [BrMst_Key]= Inv_CpyId WHERE (Inv_Status <> - 1) AND Inv_CpyId IN (" + nCondition + ") AND Inv_YrId = " + YearId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' GROUP BY Inv_Date ,Inv_PayMode ,Inv_CpyId,BrMst_Name" +
              " UNION " +
              "  SELECT BrMst_Name AS BRANCHNAME,PndC_CpyId as branchid,PndC_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend,0 as amt10,0 AS amt14 FROM dbo.PendingCollections WITH (NOLOCK)  left join Baranches_Mst on [BrMst_Key]= PndC_CpyId WHERE (PndC_Cancld <> 1) AND PndC_CpyId IN( " + nCondition + ") AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date ,PndC_InvPaymode,PndC_CpyId,BrMst_Name   " +
              " UNION " +
              " SELECT BrMst_Name AS BRANCHNAME,vchr_CpyId as branchid,vchr_Date AS Mdate,0 AS gross,0 As Disc,  0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10,0 AS amt14   FROM dbo.Vouchers WITH (NOLOCK) left join Baranches_Mst on [BrMst_Key]= vchr_BrId WHERE (vchr_BookId = 1) AND vchr_CpyId IN(" + nCondition + ") AND vchr_YrId = " + YearId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date,vchr_CpyId,BrMst_Name " +
              " UNION " +
              " SELECT BrMst_Name AS BRANCHNAME,vchr_CpyId as branchid,vchr_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, 0 AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,SUM(vchr_Receipt) as amt10,0 AS amt14   FROM dbo.Vouchers WITH (NOLOCK) left join Baranches_Mst on [BrMst_Key]= vchr_BrId WHERE (vchr_BookId = 1) AND vchr_CpyId IN(" + nCondition + ")  AND vchr_YrId = " + YearId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date,vchr_CpyId,BrMst_Name ) " +

               " A WHERE A.Mdate>= '" + fromdate.ToString("yyyy-MM-dd") + "'  AND A.Mdate <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate, branchid, BRANCHNAME  ORDER BY A.Mdate ";


                SqlDataAdapter adapt = new SqlDataAdapter(cmd);

                DataTable dt = new DataTable();
                adapt.Fill(ds0, "monthycol");

                //******************************************
                if (nCondition != "")
                {

                    cmd.CommandText = "select BRName,BRID,sum(amt10) as cashBal,sum(amt8) as netamount, sum(amt1) as Grossamt,sum(amt2) as PendBill,sum(amt3) as PendColl,sum(amt4) as Discount,sum(amt5) as Payment ,Sum(RecAmt) As Advnc,sum(OtIncome ) as OtIncome  from  ( select    BrMst_Name as  BRName,Inv_BrID as BRID, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt10 ,sum(Inv_Netamt) as amt8,sum(Inv_GrosAmt) as amt1,sum(Inv_CurBalAmt) as amt2,0 as amt3,sum(Inv_DiscAmt) as amt4,0 as amt5, case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end AS RecAmt,0 as OtIncome  from  Invoice_Mst left join Baranches_Mst on Inv_BrID=BrMst_Key   WHERE (Inv_Status <> - 1)  AND Inv_YrId = '" + YearId + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode " +
                    " UNION " +
                    " select  BrMst_Name as  BRName,PndC_CpyId  as BRID ,0 as amt10  ,0 as amt8, 0 as amt1, 0 as amt2, sum(PndC_Amount) as amt3,0 as amt4 ,0 as amt5,0 AS RecAmt,0 as OtIncome   from dbo.PendingCollections left join  Baranches_Mst  on  PndC_CpyId=BrMst_Key WHERE (PndC_Cancld <> 1)   AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + " 'and PndC_InvPaymode='Cash' AND  PndC_CpyId in  (" + nCondition + ")  GROUP BY PndC_CpyId,BrMst_Name" +
                    " UNION " +
                    " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, sum(vchr_Payment) as amt5,0 AS RecAmt,0 as OtIncome  FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                  " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,sum(vchr_Receipt) as OtIncome FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                   " select   BrMst_Name as  BRName, BrMst_Key as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,0 as OtIncome FROM Baranches_Mst Where BrMst_Key=1 ) A    GROUP BY A.BRID,A.BRName ORDER BY A.BRName";
                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "BRANCHESS");
                }

                else
                {
                    return Json(new { Result = "ERROR" });
                }
                //************************************************************
                DateTime StartDate = DateTime.Now;
                cmd.CommandText = "SELECT Yr_StartDate FROM YearData  WHERE Yr_Id = " + YearId + "";
                try
                { StartDate = Convert.ToDateTime(cmd.ExecuteScalar()); }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthyear");
                //*********************************************************************************************************
                double pendPrevYr = 0;

                cmd.CommandText = "SELECT PndC_CpyId,sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + CompanyId + "' AND  PndC_InvPaymode = 'Cash' group by PndC_CpyId  ";
                try
                {
                    pendPrevYr = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthpend");
                //*************************************************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                cmd.CommandText = "SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + YearId + " AND OpBl_CpyId=" + CompanyId + "";
                try
                {
                    pendPrevYr = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthbal");
                foreach (DataRow dr in dt.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }

                cmd.CommandText = " SELECT branch,SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  Inv_BrID as branch,SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' group by Inv_BrID " +
    " UNION " +
    " SELECT PndC_CpyId as branch,0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + CompanyId + " AND PndC_YrId = " + YearId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' group by  PndC_CpyId " +
    " UNION " +
    " SELECT vchr_BrId as branch,0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + CompanyId + " AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') group by vchr_BrId) " +
    "A group by branch";

                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "AMT");
                foreach (DataRow dr1 in dt.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;

                //***************************************************************

                double PendColPre = 0;
                if (CompanyId > 0)
                {
                    cmd.CommandText = "SELECT PndC_CpyId ,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId IN (" + nCondition + ") group by PndC_CpyId ";


                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "PEND");


                }
                else
                {

                    cmd.CommandText = "SELECT PndC_CpyId ,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition + " group by PndC_CpyId";

                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "PENDSUM");

                }
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");

                string filepath = "";
                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);

                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MonthlyCollectiondivision.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_MonthlyCollectiondivision.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFMnthlyCollSmryBrnchWise()
        {
            string fileName = "";
            //  Nfile_name += "Report_" + fdt + "_" + tdt + "_"  + "MonthlyCollectionSummeryBranchWise";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "MonthlyCollectionSummeryBranchWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFUsrWiseSmryClctn()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult UserWiseSmryClctn(branchdetails usrWiseSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DateTime StartDate = DateTime.Now;
                string NBillConditions = "";
                string NPendConditions = "";
                string Nfile_name = "";
                double BrmstKey = 0;
                int userKey = 0;
                double CashPaySum = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = usrWiseSmryObj.ff;
                string todatee = usrWiseSmryObj.tt;
                userKey = usrWiseSmryObj.userKey;
                SqlCommand cmd12 = new SqlCommand();
                SqlCommand cmd13 = new SqlCommand();
                SqlConnection sqlcon = new SqlConnection();
                string NVchrConditions = "";
                DateTime dtpFrom = DateTime.Now;
                DateTime dtpTo = DateTime.Now;
                double cashRecipts = 0;
                DataSet ds0 = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dtTitle = new DataTable();
                dtTitle.TableName = "dtTitle";
                dtDetails.TableName = "dtDetails";
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Sql_Query = "";
                //DateTime s = DateTime.Parse(fromdatee);
                if (fromdatee != null && todatee != null)
                {
                    string[] dateString = fromdatee.Split('/');
                    DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                    string[] dateString2 = todatee.Split('/');
                    DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                    fromdate = fromdat;
                    todate = todat;
                    fdt = fromdate.ToString("ddMMyyyy");
                    tdt = todate.ToString("ddMMyyyy");
                }
                else
                {
                    fdt = (usrWiseSmryObj.usrFrom).ToString();
                    tdt = (usrWiseSmryObj.usrTo).ToString();
                }

                string Head2 = "";
                string Head3 = "";
                string nTblOut = "";
                string nRptName = "";
                string Head1 = "";
                int Userid = 0;
                Userid = userKey;
                string Conditions = "";
                string NSmplCond = "";


                brnchName = usrWiseSmryObj.BrMst_Name;
                string nCondition = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }

                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (usrWiseSmryObj.usrCheck == 0)
                {
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    if (BrmstKey == 0)
                    {

                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }
                    else
                    {
                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }

                    try
                    {
                        CashPaySum = Convert.ToDouble(cmd12.ExecuteScalar());
                    }
                    catch
                    {
                        CashPaySum = 0;
                    }
                    if (BrmstKey == 0)
                    {

                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_YrId = " + YearId + "", sqlcon);

                    }
                    else
                    {
                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);
                    }

                    try
                    {
                        cashRecipts = Convert.ToDouble(cmd13.ExecuteScalar());
                    }
                    catch
                    {
                        cashRecipts = 0;
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    dt.Columns.Add("CashPaySum", typeof(float));
                    dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    dt.Rows[0]["cashRecipts"] = cashRecipts;
                    dt.Rows[0]["CashPaySum"] = CashPaySum;

                    ds0.Tables.Add(dt);
                    try
                    {
                        Userid = Convert.ToInt32(userKey);
                    }
                    catch { }
                    NVchrConditions = " AND  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND vchr_UsrId=" + Userid + " ";
                    Conditions = " AND  A.Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NBillConditions = " AND  Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NPendConditions = " AND  PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    //********************
                    if (BrmstKey > 0)
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                       "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                        " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";
                    }
                    else
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                                             "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                                              " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";

                    }
                    //SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    //sDa.Fill(ds0, "PendingColl");
                    cmd0 = new SqlCommand(Sql_Query);
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");


                    //cmd0.CommandText = Sql_Query;
                    //sd0 = new SqlDataAdapter(cmd0,sqlcon);

                    //sd0.Fill(ds0, "dtDetails");
                    //*******************************
                    if (BrmstKey > 0)
                    {
                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_CpyId = " + _CpyId + " AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                          " UNION " +
                                        " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                        " UNION " +
                                       " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                    }
                    else
                    {
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                         " UNION " +
                                       " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                       " UNION " +
                                      " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";

                    }
                    //sd0 = new SqlDataAdapter(cmd0);
                    //sd0.Fill(ds0, "dtPending");
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtPending");
                    if (BrmstKey > 0)
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                          " UNION " +
                                          " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";

                    }
                    else
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                         " UNION " +
                                         " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND  PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";
                    }
                    //sd0.Fill(ds0, "dtUsr");
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtUsr");
                    //**********************  
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "Company_Mst");
                    //**********************

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UsrWiseSummary.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UsrWiseSummary.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else if (usrWiseSmryObj.usrCheck == 1)
                {


                    LabNoFrom = (usrWiseSmryObj.usrFrom).ToString();
                    LabNoTo = (usrWiseSmryObj.usrTo).ToString();
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    //usrWiseObj
                    //usrFrom usrTo
                    Head2 = "BillNo FROM : " + LabNoFrom.Trim() + "  To : " + LabNoTo.Trim();
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    if (BrmstKey == 0)
                    {

                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }
                    else
                    {
                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }

                    try
                    {
                        CashPaySum = Convert.ToDouble(cmd12.ExecuteScalar());
                    }
                    catch
                    {
                        CashPaySum = 0;
                    }
                    if (BrmstKey == 0)
                    {

                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_YrId = " + YearId + "", sqlcon);

                    }
                    else
                    {
                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);
                    }

                    try
                    {
                        cashRecipts = Convert.ToDouble(cmd13.ExecuteScalar());
                    }
                    catch
                    {
                        cashRecipts = 0;
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    dt.Columns.Add("CashPaySum", typeof(float));
                    dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    dt.Rows[0]["cashRecipts"] = cashRecipts;
                    dt.Rows[0]["CashPaySum"] = CashPaySum;
                    ds0.Tables.Add(dt);
                    int LabFrom = 0;
                    int LabTo = 0;
                    try
                    {
                        LabFrom = Convert.ToInt32(usrWiseSmryObj.usrFrom);

                    }
                    catch { }
                    try
                    {
                        LabTo = Convert.ToInt32(usrWiseSmryObj.usrTo);

                    }
                    catch { }

                    Conditions = " AND A.Inv_No>=" + LabFrom + " AND A.Inv_No<='" + LabTo + "' ";
                    NBillConditions = " AND Inv_No>=" + LabFrom + " AND Inv_No<='" + LabTo + "' ";
                    NPendConditions = " AND PndC_Labno>=" + LabFrom + " AND PndC_Labno<='" + LabTo + "' ";

                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    //*************************
                    if (BrmstKey > 0)
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                       "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                        " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";
                    }
                    else
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                                             "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                                              " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";

                    }
                    cmd0 = new SqlCommand(Sql_Query);
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");
                    //*******************************
                    if (BrmstKey > 0)
                    {
                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_CpyId = " + _CpyId + " AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                          " UNION " +
                                        " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                        " UNION " +
                                       " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                    }
                    else
                    {
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                         " UNION " +
                                       " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                       " UNION " +
                                      " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";

                    }
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtPending");
                    if (BrmstKey > 0)
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                          " UNION " +
                                          " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";

                    }
                    else
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                         " UNION " +
                                         " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND  PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";
                    }
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtUsr");

                    //**********************  
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "Company_Mst");
                    //***********************
                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult UserWiseClctn(branchdetails usrWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                DateTime StartDate = DateTime.Now;
                string NBillConditions = "";
                string NPendConditions = "";
                string Nfile_name = "";
                double BrmstKey = 0;
                int userKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = usrWiseObj.ff;
                string todatee = usrWiseObj.tt;
                userKey = usrWiseObj.userKey;
                SqlConnection sqlcon = new SqlConnection();
                string NVchrConditions = "";
                DataSet ds0 = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dtTitle = new DataTable();
                dtTitle.TableName = "dtTitle";
                dtDetails.TableName = "dtDetails";
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Sql_Query = "";
                //DateTime s = DateTime.Parse(fromdatee);
                if (fromdatee != null && todatee != null)
                {
                    string[] dateString = fromdatee.Split('/');
                    DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                    string[] dateString2 = todatee.Split('/');
                    DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                    fromdate = fromdat;
                    todate = todat;
                    fdt = fromdate.ToString("ddMMyyyy");
                    tdt = todate.ToString("ddMMyyyy");
                }
                else
                {
                    fdt = (usrWiseObj.usrFrom).ToString();
                    tdt = (usrWiseObj.usrTo).ToString();
                }

                string Head2 = "";
                string Head3 = "";
                string nTblOut = "";
                string nRptName = "";
                string Head1 = "";
                int Userid = 0;
                Userid = userKey;
                string Conditions = "";
                string NSmplCond = "";


                brnchName = usrWiseObj.BrMst_Name;
                string nCondition = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }

                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (usrWiseObj.usrCheck == 0)
                {
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserDateWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserDateWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    //dt.Columns.Add("CashPaySum", typeof(float));
                    //dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    //dt.Rows[0]["cashRecipts"] = cashRecipts;
                    //dt.Rows[0]["CashPaySum"] = CashPaySum;

                    ds0.Tables.Add(dt);
                    try
                    {
                        Userid = Convert.ToInt32(userKey);
                    }
                    catch { }
                    NVchrConditions = " AND  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND vchr_UsrId=" + Userid + " ";
                    Conditions = " AND  A.Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NBillConditions = " AND  Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NPendConditions = " AND  PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    if (BrmstKey > 0)
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                                        "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                                        Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                           "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                           "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                           "WHERE  " +
                           " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                            " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    else
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                          "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                          "WHERE  " +
                          " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                          Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                                        "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                                        " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    DataTable PendingColl = new DataTable();
                    PendingColl.TableName = "PendingColl";
                    SqlCommand cmd;

                    string sqlStr = "";

                    cmd0.CommandText = "SELECT A.PndC_Key,A.PndC_InvPaymode, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,AccountHeads_Mst_3.AhMst_pName AS Insurance,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK)   LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.PndC_CpyId = B.Inv_cpyId LEFT OUTER JOIN  dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON B.Inv_InsId = AccountHeads_Mst_3.AhMst_Key WHERE  " +
                   "(A.PndC_Cancld <> 1) " + NPendConditions + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey;

                    ////************************************************************************

                    //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                    SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(ds0, "PendingColl");

                    //Anupama 29-06-2018************

                    cmd0.CommandText = "SELECT [vchr_Receipt],[vchr_Date],[vchr_TransNo],[vchr_UsrId],[AhMst_pName] FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions;

                    SqlDataAdapter DA = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    DA.Fill(ds0, "UserWiseColl");

                    //******************************END
                    SqlCommand cmd_totpend = new SqlCommand("select Isnull(SUM(PndC_Amount),0) from PendingCollections where PndC_Date >='" + fromdate.ToShortDateString() + "' AND PndC_Date <='" + todate.ToShortDateString() + "' AND PndC_UsrId =" + Userid + " and PndC_Cancld !=1 and PndC_InvPaymode='Cash' AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey + "", sqlcon);
                    SqlCommand cmd_totrecpt = new SqlCommand("SELECT Isnull(SUM(vchr_Receipt),0) FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions + "", sqlcon);
                    SqlDataAdapter adt_totpend = new SqlDataAdapter(cmd_totpend.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "Total_PendingCol");
                    adt_totpend = new SqlDataAdapter(cmd_totrecpt.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "ToTal_CasReceipt");
                    //nCondition = getCondition();
                    //if (nCondition != "")
                    nCondition = " AND A.Inv_UsrId =" + userKey + "";
                    if (BrmstKey > 0)
                    {
                        if (userKey > 0)
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                          "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                          nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff'" +
                          "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                           " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }

                    else
                    {
                        if (userKey > 0)
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);

                    sDa.Fill(dtDetails);
                    ds0.Tables.Add(dtDetails);
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(dtTitle);
                    ds0.Tables.Add(dtTitle);

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else if (usrWiseObj.usrCheck == 1)
                {


                    LabNoFrom = (usrWiseObj.usrFrom).ToString();
                    LabNoTo = (usrWiseObj.usrTo).ToString();
                    fdt = LabNoFrom;
                    tdt = LabNoTo;
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollection";
                        //Nfile_name = "Report_" + LabNoFrom + "_" + LabNoTo + "_" + "All" + "_" + "UserWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    //usrWiseObj
                    //usrFrom usrTo
                    Head2 = "BillNo FROM : " + LabNoFrom.Trim() + "  To : " + LabNoTo.Trim();
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    //dt.Columns.Add("CashPaySum", typeof(float));
                    //dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    ds0.Tables.Add(dt);
                    int LabFrom = 0;
                    int LabTo = 0;
                    try
                    {
                        LabFrom = Convert.ToInt32(usrWiseObj.usrFrom);

                    }
                    catch { }
                    try
                    {
                        LabTo = Convert.ToInt32(usrWiseObj.usrTo);

                    }
                    catch { }

                    Conditions = " AND A.Inv_No>=" + LabFrom + " AND A.Inv_No<='" + LabTo + "' ";
                    NBillConditions = " AND Inv_No>=" + LabFrom + " AND Inv_No<='" + LabTo + "' ";
                    NPendConditions = " AND PndC_Labno>=" + LabFrom + " AND PndC_Labno<='" + LabTo + "' ";

                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    if (BrmstKey > 0)
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                                        "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                                        Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                           "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                           "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                           "WHERE  " +
                           " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                            " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    else
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                          "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                          "WHERE  " +
                          " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                          Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                                        "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                                        " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    DataTable PendingColl = new DataTable();
                    PendingColl.TableName = "PendingColl";
                    SqlCommand cmd;

                    string sqlStr = "";

                    cmd0.CommandText = "SELECT A.PndC_Key,A.PndC_InvPaymode, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,AccountHeads_Mst_3.AhMst_pName AS Insurance,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK)   LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.PndC_CpyId = B.Inv_cpyId LEFT OUTER JOIN  dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON B.Inv_InsId = AccountHeads_Mst_3.AhMst_Key WHERE  " +
                   "(A.PndC_Cancld <> 1) " + NPendConditions + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey;

                    ////************************************************************************

                    //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                    SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(ds0, "PendingColl");

                    //Anupama 29-06-2018************

                    cmd0.CommandText = "SELECT [vchr_Receipt],[vchr_Date],[vchr_TransNo],[vchr_UsrId],[AhMst_pName] FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions;

                    SqlDataAdapter DA = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    DA.Fill(ds0, "UserWiseColl");

                    //******************************END                                                                                                                                                                 
                    SqlCommand cmd_totpend = new SqlCommand("select Isnull(SUM(PndC_Amount),0) from PendingCollections where PndC_Labno >='" + LabFrom.ToString() + "' AND PndC_Labno <='" + LabTo.ToString() + "' AND PndC_UsrId =" + Userid + " and PndC_Cancld !=1 and PndC_InvPaymode='Cash' AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey + "", sqlcon);
                    SqlCommand cmd_totrecpt = new SqlCommand("SELECT Isnull(SUM(vchr_Receipt),0) FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions + "", sqlcon);
                    SqlDataAdapter adt_totpend = new SqlDataAdapter(cmd_totpend.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "Total_PendingCol");
                    adt_totpend = new SqlDataAdapter(cmd_totrecpt.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "ToTal_CasReceipt");
                    //nCondition = getCondition();
                    //if (nCondition != "")
                    nCondition = " AND A.Inv_UsrId =" + userKey + "";
                    if (BrmstKey > 0)
                    {
                        if (userKey > 0)
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                          "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                          nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff'" +
                          "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                           " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }

                    else
                    {
                        if (userKey > 0)
                        {                                //LabFrom LabTo
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);

                    sDa.Fill(dtDetails);
                    ds0.Tables.Add(dtDetails);
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(dtTitle);
                    ds0.Tables.Add(dtTitle);

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFUsrBillWiseClctn()

        {
            string fileName = "";

            if (brKey > 0)
            {
                //Nfile_name = "Report_" + LabNoFrom + "_" + LabNoTo + "_" + brnchName + "_" + "UserBillWiseCollection";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public FileResult PDFUsrWiseCollection()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserDateWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserDateWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult SearchCategoryName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CATAGORY_WITH_NAME_Result> t = new List<Stproc_SEARCH_CATAGORY_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CATAGORY_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCategoryCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_CATAGORY_WITH_CODE_Result> t = new List<Stproc_SEARCH_CATAGORY_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_CATAGORY_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchStaffCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_CODE_Result> t = new List<Stproc_SEARCH_USER_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_USER_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchStaffName(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_WORD_Result> t = new List<Stproc_SEARCH_USER_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_USER_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchUsrName(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_WORD_Result> t = new List<Stproc_SEARCH_USER_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_USER_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchUsrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_CODE_Result> t = new List<Stproc_SEARCH_USER_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_USER_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDctrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_DOCTOR_WITH_CODE_Result> t = new List<Stproc_SEARCH_DOCTOR_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_DOCTOR_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDctrName(string term)
        {
            try
            {
                List<Stproc_SEARCH_DOCTOR_WITH_WORD_Result> t = new List<Stproc_SEARCH_DOCTOR_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_DOCTOR_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFPatientInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PatientWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PatientWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult PatientWiseInvoice(branchdetails patInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string sqlStr = "";
                string Head2 = "";
                SqlDataAdapter sDa = new SqlDataAdapter();
                string fromdatee = patInvObj.ff;
                string todatee = patInvObj.tt;
                //*****************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                DateTimeConverter cx = new DateTimeConverter();
                string fromdt = fromdat.ToShortDateString();
                string todt = todat.ToShortDateString();
                //DateTime fdts = Convert.ToDateTime(fromdt);
                //DateTime tdts = Convert.ToDateTime(todt);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                //string fromdat = Convert.ToDateTime(fromdatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
                //string todat = Convert.ToDateTime(todatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);

                //int nYrId = 2122;
                brnchName = patInvObj.BrMst_Name;
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                SqlCommand cmd = new SqlCommand();
                string Head3 = "";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                string Head1 = "";
                string nCondition = "";
                double BrmstKey = 0;
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";

                string BrmstName = patInvObj.BrMst_Name;
                Head1 = "PATIENT WISE INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = brnchName;
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PatientWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PatientWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                //*********************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Gender,A.Inv_Tittle,Inv_age,A.Inv_ageymd,A.Inv_phno,A.Inv_Address,A.Inv_Email,A.Inv_Comment,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                            "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_Name";
                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Gender,A.Inv_Tittle,Inv_age,A.Inv_ageymd,A.Inv_phno,A.Inv_Address,A.Inv_Email,A.Inv_Comment,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                            "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_Name";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //*********************************************************
                string Reportfilepaths = "";
                string filepath = "";
                dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PatientwiseInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PatientwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFDivWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DivWiseInvoice(branchdetails divInvObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string[] checkedDiv = divInvObj.checkedDiv;
                string[] checkedDivId = divInvObj.checkedDivId;

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = divInvObj.ff;
                string todatee = divInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DivisionId = "";
                string PayModes = "";
                sqlcon.Open();
                for (int i = 0; i < checkedDivId.Count(); i++)
                {
                    if (DivisionId == "")
                    {
                        DivisionId += (checkedDivId[i]).ToString();
                    }
                    else
                    {
                        DivisionId += "," + (checkedDivId[i]).ToString();
                    }
                }
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = divInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = divInvObj.BrMst_Name;
                string PayMode = divInvObj.Inv_PayMode;
                Head1 = "DIVISION WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails pmd in paymd)
                {
                    if (pmd.Inv_PayMode == PayMode)
                    {
                        nPaymode = pmd.Inv_PayMode;
                    }

                }
                for (int i = 0; i < paymd.Count(); i++)
                {
                    if (PayModes == "")
                    {
                        PayModes += "'" + (paymd[i].Inv_PayMode).ToString() + "'";
                    }
                    else
                    {
                        PayModes += "," + "'" + (paymd[i].Inv_PayMode).ToString() + "'";
                    }
                }
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (checkedDivId != null)
                {
                    nCondition = " AND E.Mstr_Key IN(" + DivisionId + ")";
                }



                //checkedDiv checkedDivId
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (PayMode != "<-- ALL -->")
                {
                    nCondition = nCondition + " AND Inv_PayMode='" + PayMode + "'";

                }
                else
                {
                    //string pay = paymd.All;
                    nCondition = nCondition + " AND Inv_PayMode IN(" + PayModes + ")";

                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseInvoices";
                    brKey = (int)BrmstKey;
                }

                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                                 "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                 "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                 "A.Inv_BrID, A.Inv_Date,A.Inv_paymode, A.Inv_time,A.Inv_InsId, A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                 "C.TstMst_ShortName, E.Mstr_Desc AS DivName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                                 "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                 "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                  "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                 "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>=0 LEFT OUTER JOIN " +
                                 "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DivsnId = E.Mstr_Key AND E.Mstr_Type = 'Div' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                                 "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                 "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_Status!=-1 AND A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                                                "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                                "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                                "A.Inv_BrID, A.Inv_Date, A.Inv_time,A.Inv_InsId, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                                "C.TstMst_ShortName, E.Mstr_Desc AS DivName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                                                "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                                "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                                 "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                                "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>=0 LEFT OUTER JOIN " +
                                                "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DivsnId = E.Mstr_Key AND E.Mstr_Type = 'Div' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                                                "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                                "AND  A.Inv_YrId = " + nYrId + " AND A.Inv_Status!=-1 " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //********************DIVISIOn WISe************************
                double CashPaySum = 0;

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Payment'  OR vchr_TransType='Day book') AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                CashPaySum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPaySum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPaySum = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRecipts = 0;
                }
                //*********************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashReciptsRefund = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashReciptsRefund = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashReciptsRefund = 0;
                }
                //*********************************************


                dtMaster.Columns.Add("CashPaySum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["CashPaySum"] = CashPaySum;
                dtMaster.Columns.Add("cashRecipts", typeof(double));
                //dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["cashRecipts"] = cashRecipts;

                dtMaster.Columns.Add("cashReciptsRefund", typeof(double));
                //dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["cashReciptsRefund"] = cashReciptsRefund;
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwiseStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivWiseInvoices()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + "DivisionWiseInvoice2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DivWiseInvoice2(branchdetails divInvObj2)
        {

            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                double? YearId = 0;
                double CompanyId = 0;
                YearId = nYrId;
                CompanyId = BrMst_Key;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = divInvObj2.ff;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);

                fromdate = fromdat;

                fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DivisionId = "";
                string PayModes = "";
                sqlcon.Open();

                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                //brnchName = divInvObj2.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + "DivisionWiseInvoice2";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                //********************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;


                cmd0.CommandText = "SELECT SUM(ISNULL(InvItm_rate,0)) as NetAmount,Mst.Mstr_Desc  As Division ,Mst1.Mstr_Desc As Department  FROM Invoice_Det Invdet Left join Invoice_Mst Inv On Invdet.InvItm_Invno=Inv.Inv_No AND Inv.Inv_CpyId=Invdet.InvItm_CpyId AND Inv.Inv_YrId=Invdet.InvItm_Yrid Left Join Test_Mst Tst On Invdet.InvItm_TstId=Tst.TstMst_Key Left Join Masters Mst On Tst.TstMst_DivsnId=Mst.Mstr_Key Left Join Masters Mst1 On Tst.TstMst_DeptId=Mst1.Mstr_Key WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND InvItm_YrId=" + YearId + " AND InvItm_CpyId=" + CompanyId + " AND Inv_Status<>-1 Group By Mst.Mstr_Desc,Mst1.Mstr_Desc ";
                string cb = "SELECT SUM(ISNULL(InvItm_rate,0)) as NetAmount,Mst.Mstr_Desc  As Division ,Mst1.Mstr_Desc As Department  FROM Invoice_Det Invdet Left join Invoice_Mst Inv On Invdet.InvItm_Invno=Inv.Inv_No  Left Join Test_Mst Tst On Invdet.InvItm_TstId=Tst.TstMst_Key Left Join Masters Mst On Tst.TstMst_DivsnId=Mst.Mstr_Key Left Join Masters Mst1 On Tst.TstMst_DeptId=Mst1.Mstr_Key WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND InvItm_YrId=" + YearId + " AND InvItm_CpyId=" + CompanyId + " Group By Mst.Mstr_Desc,Mst1.Mstr_Desc ";
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "Invoice_Mst");
                //****************************************************
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                filepath = "";
                int MinLabNo = 0;
                int MaxLabNO = 0;
                double RecivedAmount = 0;
                double DiscountAmt = 0;
                double PendingCollecAmount = 0;
                double Bal = 0;
                cmd0 = new SqlCommand("SELECT ISNULL(MIN(Inv_No),0) FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + " AND  Inv_Status<>-1 and  Inv_CpyId=" + CompanyId + "", sqlcon);
                MinLabNo = Convert.ToInt32(cmd0.ExecuteScalar());
                cmd0.Parameters.Clear();
                cmd0 = new SqlCommand("SELECT ISNULL(MAX(Inv_No),0) FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + " AND Inv_Status<>-1 AND Inv_CpyId=" + CompanyId + "", sqlcon);
                MaxLabNO = Convert.ToInt32(cmd0.ExecuteScalar());
                cmd0 = new SqlCommand("SELECT SUM(ISNULL(Inv_DiscAmt,0)) AS Discount ,SUM(ISNULL(Inv_Netamt,0)) AS ReceivedAmt,SUM(ISNULL(Inv_CurBalAmt,0)) AS BalanceAmt,sum (ISNULL(Inv_BalAmt,0)) AS Balance FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 AND Inv_CpyId=" + CompanyId + "", sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd0);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        RecivedAmount = Convert.ToDouble(dr["ReceivedAmt"]);
                    }
                    catch { }

                    try
                    {
                        DiscountAmt = Convert.ToDouble(dr["Discount"]);
                    }
                    catch { }
                    try
                    {
                        Bal = Convert.ToDouble(dr["Balance"]);
                    }
                    catch { }

                    RecivedAmount = RecivedAmount + Bal;



                }
                cmd0 = new SqlCommand("SELECT SUM (ISNULL(PndC_Amount,0)) AS PendSumAmt FROM PendingCollections WITH (NOLOCK)  WHERE  " +
                 "(PndC_Cancld <> 1) AND PndC_Date = '" + fromdate.ToShortDateString() + "' AND  PndC_CpyId = " + CompanyId + "", sqlcon);


                try
                {
                    PendingCollecAmount = Convert.ToDouble(cmd0.ExecuteScalar());
                }
                catch { }

                double CashBaL = 0;
                double CreditNetamt = 0;

                cmd0 = new SqlCommand("SELECT ISNULL(SUM(Inv_BalAmt),0)  AS Balance FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 and inV_paymode='CASH' AND Inv_CpyId=" + CompanyId + "", sqlcon);
                CashBaL = Convert.ToDouble(cmd0.ExecuteScalar());

                cmd0 = new SqlCommand("SELECT ISNULL(SUM(Inv_BalAmt),0)  AS NetAmt FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 and inV_paymode!='CASH' AND Inv_CpyId=" + CompanyId + "", sqlcon);
                CreditNetamt = Convert.ToDouble(cmd0.ExecuteScalar());

                Head2 = "Closing Report on : " + fromdate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Reset();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("MinLabNo", typeof(string));
                dt.Columns.Add("MaxLabNo", typeof(string));
                dt.Columns.Add("RecAmt", typeof(double));
                dt.Columns.Add("DiscAmt", typeof(double));
                dt.Columns.Add("Balance", typeof(double));
                dt.Columns.Add("PenCollAmt", typeof(double));

                dt.Columns.Add("CashBaL", typeof(double));
                dt.Columns.Add("CreditNetamt", typeof(double));


                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["MinLabNo"] = "FROM : " + MinLabNo.ToString();
                dt.Rows[0]["MaxLabNo"] = "TO : " + MaxLabNO.ToString();
                dt.Rows[0]["RecAmt"] = RecivedAmount;
                dt.Rows[0]["DiscAmt"] = DiscountAmt;
                dt.Rows[0]["Balance"] = Bal;

                dt.Rows[0]["PenCollAmt"] = PendingCollecAmount;

                dt.Rows[0]["CashBaL"] = CashBaL;
                dt.Rows[0]["CreditNetamt"] = CreditNetamt;

                ds0.Tables.Add(dt);


                //********************************************************************************************

                sqlcon.Close();

                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DiviDepWise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DiviDepWise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    TempLog = "";
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivisionWiseSmry()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DivisionWiseSmry(branchdetails divWiseSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = divWiseSmryObj.ff;
                string todatee = divWiseSmryObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = divWiseSmryObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseSummery";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseSummery";
                    brKey = (int)BrmstKey;
                }
                //*****************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "select Mstr_Desc,COUNT(Mstr_Desc),Inv_Date from" + Environment.NewLine
                      + "(" + Environment.NewLine
                      + "select distinct A.Inv_Date,InvItm_Invno,InvItm_CpyId,InvItm_YrId,M.Mstr_Desc " + Environment.NewLine
                      + "from dbo.Invoice_Det D WITH (NOLOCK) LEFT JOIN dbo.Test_Mst T ON D.InvItm_TstId = T.TstMst_Key " + Environment.NewLine
                      + "LEFT JOIN dbo.Masters M WITH (NOLOCK) ON T.TstMst_DivsnId = M.Mstr_Key AND M.Mstr_Type = 'Div'" + Environment.NewLine
                      + "LEFT JOIN dbo.Invoice_Mst A WITH (NOLOCK) ON D.InvItm_YrId = A.Inv_YrId AND D.InvItm_Invno = A.Inv_No and D.InvItm_CpyId = A.Inv_CpyId" + Environment.NewLine
                      + "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + condition + Environment.NewLine
                      + ") hj" + Environment.NewLine
                      + "group by Mstr_Desc,Inv_Date";
                }
                else
                {
                    sqlStr = "select Mstr_Desc,COUNT(Mstr_Desc),Inv_Date from" + Environment.NewLine
                      + "(" + Environment.NewLine
                      + "select distinct A.Inv_Date,InvItm_Invno,InvItm_CpyId,InvItm_YrId,M.Mstr_Desc " + Environment.NewLine
                      + "from dbo.Invoice_Det D WITH (NOLOCK) LEFT JOIN dbo.Test_Mst T ON D.InvItm_TstId = T.TstMst_Key " + Environment.NewLine
                      + "LEFT JOIN dbo.Masters M WITH (NOLOCK) ON T.TstMst_DivsnId = M.Mstr_Key AND M.Mstr_Type = 'Div'" + Environment.NewLine
                      + "LEFT JOIN dbo.Invoice_Mst A WITH (NOLOCK) ON D.InvItm_YrId = A.Inv_YrId AND D.InvItm_Invno = A.Inv_No and D.InvItm_CpyId = A.Inv_CpyId" + Environment.NewLine
                      + "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND A.Inv_YrId = " + nYrId + condition + Environment.NewLine
                      + ") hj" + Environment.NewLine
                      + "group by Mstr_Desc,Inv_Date";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //*****************************************************

                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwiseSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwiseSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    return Json(new { Result = "ERROR" });
                    //errorflag = 1;
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult UsrTrckRpt(branchdetails usrTrckObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string nUsrName = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = usrTrckObj.ff;
                string todatee = usrTrckObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Nfile_name = "";
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                nUsrName = usrTrckObj.User_Name;
                brnchName = usrTrckObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                //dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserTrack";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserTrack";
                    brKey = (int)BrmstKey;
                }
                //*****************************
                if (nUsrName != "")
                {
                    if (BrmstKey > 0)
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and [UsrTrack_CpyId]=" + BrmstKey + "  and UsrTrack_UsrName='" + nUsrName + "'";
                    }
                    else
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and UsrTrack_UsrName='" + nUsrName + "'";
                    }
                }
                else
                {
                    if (BrmstKey > 0)
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + todate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and [UsrTrack_CpyId]=" + BrmstKey;
                    }
                    else
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + todate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId;
                    }
                }

                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "UsrTrckDet");

                //*****************************

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");

                filepath = "";
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //******************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserTrackStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserTrackStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFUsrTrckRpt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserTrack";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserTrack";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public FileResult PDFBrnchWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "BranchWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "BranchWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult brnchWiseInvoice(branchdetails bnchWiseInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = bnchWiseInvObj.ff;
                string todatee = bnchWiseInvObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = bnchWiseInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "BranchWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "BranchWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                sqlStr = "SELECT     dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_IsInsrnce, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_name," + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Address, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_SmplDate, dbo.Invoice_Mst.Inv_RsltNO, dbo.Invoice_Mst.Inv_BrID, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_time, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_InsId, dbo.Invoice_Mst.Inv_AreaId, dbo.Invoice_Mst.Inv_EmailtoPatient, dbo.Invoice_Mst.Inv_Email, dbo.Invoice_Mst.Inv_EtoDr, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DrId, dbo.Invoice_Mst.Inv_OutDr, dbo.Invoice_Mst.Inv_hospId, dbo.Invoice_Mst.Inv_Schrge, dbo.Invoice_Mst.Inv_DiscId, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_CltnID, dbo.Invoice_Mst.Invl_DiscPer, dbo.Invoice_Mst.Inv_RepTime, dbo.Invoice_Mst.Inv_GrosAmt, dbo.Invoice_Mst.Inv_DiscAmt, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Inv_BalAmt, dbo.Invoice_Mst.Inv_Comment, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_CmpltdDate, dbo.Invoice_Mst.Inv_CmpltdTime, dbo.Invoice_Mst.Inv_OthCmnt, dbo.Invoice_Mst.Inv_User, dbo.Invoice_Mst.Invl_IsPending, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_Status, dbo.Invoice_Mst.Inv_CnlComnt, dbo.Invoice_Mst.Inv_Cnltmestmp, dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, " + Environment.NewLine
                                    + "dbo.Baranches_Mst.BrMst_Code, dbo.Baranches_Mst.BrMst_Name, dbo.AccountHeads_Mst.AhMst_pName AS Insurance, " + Environment.NewLine
                                    + "AccountHeads_Mst_1.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS HospName," + Environment.NewLine
                                    + "AccountHeads_Mst_4.AhMst_pName AS CollectionStaff, dbo.Masters.Mstr_Desc AS AraMst_Name, Masters_1.Mstr_Desc AS DscRsnMst_Reason, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_UsrId, dbo.Invoice_Mst.Inv_YrId, dbo.Invoice_Mst.Inv_CpyId, dbo.Invoice_Mst.Inv_Updtd, dbo.Invoice_Mst.Inv_Tittle, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_InsNo, dbo.Invoice_Mst.Inv_PayMode, dbo.Invoice_Mst.Inv_ItemDesc, dbo.Invoice_Mst.Inv_SentMail, dbo.Invoice_Mst.Inv_RptMode, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_RepThrPersonal, dbo.Invoice_Mst.Inv_RepThrCourier, dbo.Invoice_Mst.Inv_RepThrPhone, dbo.Invoice_Mst.Inv_RepThrEmail, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DocPath1, dbo.Invoice_Mst.Inv_RepThrSms, dbo.Invoice_Mst.Inv_DocPath2, dbo.Invoice_Mst.Inv_CollModeId, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DocPath3" + Environment.NewLine
                                    + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Baranches_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_BrID = dbo.Baranches_Mst.BrMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = dbo.AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_3  WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_hospId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_PntId = AccountHeads_Mst_1.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_AreaId = dbo.Masters.Mstr_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Masters AS Masters_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters_1.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                     " AND  Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + condition + " order by Inv_Date";

                SqlDataAdapter adapt = new SqlDataAdapter(sqlStr, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "InvoiceMst_View");

                ds0.Tables.Add(dTitle);
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BrachwiseInvoices.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_BrachwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDiscWiseInvoices()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DiscountWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DiscountWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DiscWiseInvoices(branchdetails MasterObj)
        {
            int Id = 0;
            string Nfile_name = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            string nCondition = "";
            string[] checkedMasters = MasterObj.checkedMasters;
            string[] checkedMstrKey = MasterObj.checkedMstrKey;
            string condition = "";
            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedMstrKey.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedMstrKey[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedMstrKey[i]).ToString();
                }
            }
            if (nCondition != "") nCondition = " AND dbo.Invoice_Mst.Inv_DiscId IN(" + nCondition + ")";
            if (l != null)
            {

                DataTable dtDetails = new DataTable();
                dtDetails.TableName = "dtDetails";
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = MasterObj.ff;
                string todatee = MasterObj.tt;
                string Head1 = "";
                Head1 = "DISCOUNT WISE INVOICES";
                //***************************
                string filepath = "";
                SqlCommand cmd = new SqlCommand();
                DataSet ds0 = new DataSet();
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string BrmstName = MasterObj.BrMst_Name;
                string sqlStr = "";
                string Head3 = "";
                string Head2 = "";
                double BrmstKey = 0;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }

                Head3 = BrmstKey.ToString();
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                //***********************************
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }

                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DiscountWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DiscountWiseInvoice";
                    brKey = (int)BrmstKey;
                }

                //SqlConnection sqlcon = new SqlConnection();
                //sqlcon = con.dbcon();
                //sqlcon.Open();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DiscountWiseInvoice";
                //********************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_age,dbo.Invoice_Mst.Inv_ageymd,dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt,  dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_Gender,dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;
                    //AND dbo.Invoice_Mst.Inv_CpyId = " + nCpyId + "

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_age,dbo.Invoice_Mst.Inv_ageymd,dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_Gender,dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;


                }
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter sDa = new SqlDataAdapter(cmd.CommandText,sqlcon);
                //sDa.Fill(dtDetails);
                SqlDataAdapter adapt = new SqlDataAdapter(sqlStr, sqlcon);

                adapt.Fill(ds0, "InvoiceMst_View");
                ds0.Tables.Add(dTitle);
                //*******************************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DiscountwiseInvoices.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DiscountwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFCancelledInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CancelledInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CancelledInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CancelledInvoice(branchdetails cncldInvObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = cncldInvObj.ff;
                string todatee = cncldInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cncldInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cncldInvObj.BrMst_Name;
                Head1 = "CANCELLED INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CancelledInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CancelledInvoices";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name,A.Inv_Gender,A.Inv_age,A.Inv_ageymd, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                             "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status = - 1 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_No";
                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                             "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status = - 1 AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_No";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);


                //*************************************************************************************************
                dsPrint.Tables.Clear();

                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CancelledInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CancelledInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctorMeeting()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "DoctorMeeting";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctorMeeting(branchdetails dctrmtngObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                string DctrName = "";
                double dctrKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                string bName = l.BrMst_Name;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = dctrmtngObj.ff;
                string todatee = dctrmtngObj.tt;
                string nTblOut = "";
                string nRptName = "";
                dctrKey = dctrmtngObj.dctrKey;
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                DctrName = dctrmtngObj.DctrName;
                //brnchName = dctrmtngObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                Nfile_name = "Report_" + fdt + "_" + tdt + "DoctorMeeting";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataSet ds0 = new DataSet();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                SqlCommand cmd0 = new SqlCommand();
                int DocPrfFlag = 0;
                //*****************************dctrKey DctrName
                if (dctrKey != 0)
                {
                    sqlStr = "select * from ProDailyReport where Pro_DoctorName ='" + DctrName.Trim() + "'  and   Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                }
                else
                {
                    DocPrfFlag = 1;
                    sqlStr = "SELECT Doctor,Drid,sum(docCount) AS docCount FROM" + Environment.NewLine
                                              + "  (select Distinct Ahmst.AhMst_pName as Doctor,Ahmst.AhMst_Key as Drid,Count(ISNULL(Ahmst.ahmst_key,0)) As docCount FROM  dbo.AccountHeads_Mst Ahmst WITH(NOLOCK)  LEFT JOIN  ProDailyReport pro WITH(NOLOCK) on Ahmst.Ahmst_key=pro.Pro_DctrId WHERE ahmst_type='Doctor' AND AhMst_IsActive=1 AND  Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY AhMst_pName,AhMst_Key" + Environment.NewLine

                                              + "  UNION " + Environment.NewLine
                                              + " SELECT Distinct Ahmst.AhMst_pName as Doctor,Ahmst.AhMst_Key as Drid,0 AS docCount FROM  dbo.Set_DrIncentives DrInc WITH(NOLOCK) LEFT JOIN dbo.AccountHeads_Mst Ahmst WITH(NOLOCK) ON DrInc.StDrIns_DrId=Ahmst.Ahmst_key WHERE AhMst_IsActive=1  AND ahmst_type='Doctor'  GROUP BY AhMst_pName,AhMst_Key)  Dotors WHERE Dotors.Doctor!=''   GROUP BY  Doctor,Drid ORDER BY Doctor";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(ds0, "DOCTOR MEETING");
                if (DocPrfFlag == 1)
                {
                    cmd0.CommandText = "select  Ahmst.AhMst_pName as Pro, Pro.Pro_Date,Pro.Pro_DctrId,Pro.Place FROM ProDailyReport pro WITH(NOLOCK) LEFT JOIN AccountHeads_Mst  Ahmst WITH(NOLOCK)  on Ahmst.Ahmst_key=pro.Pro_Id WHERE  Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' ORDER BY Pro_Date desc";

                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sDa.Fill(ds0, "DOCTOR LastMEETING");

                }
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(ds0, "Company_Mst");
                //sd0.Fill(ds0, "DOCTOR MEETING");

                //*****************************
                filepath = "";
                string reportType = "";

                Head3 = "DOCTOR MEETING";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Reporthead"] = Head3;
                ds0.Tables.Add(dt);
                //ReportDocument reportDocument = new ReportDocument();
                //Reportfilepaths = Server.MapPath("~/Reports/");
                //filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMeeting.rpt");
                //ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMeeting.xsd");
                //try
                //{
                //    reportDocument.Load(filepath);
                //    reportDocument.SetDataSource(ds0);
                //}
                //catch (Exception exe)
                //{
                //}
                ReportDocument reportDocument = new ReportDocument();

                if (DocPrfFlag == 0)
                {
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMeeting.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMeeting.xsd");
                    try
                    {
                        reportDocument.Load(filepath);
                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {
                    }
                }
                else
                {
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMetperformance.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMetperformance.xsd");
                    try
                    {
                        reportDocument.Load(filepath);
                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {
                    }
                }


                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                    return Json(new { Result = "OK" });
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDptWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DepartmentWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DepartmentWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DptWiseInvoice(branchdetails dptInvObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string[] checkedDpt = dptInvObj.checkedDpt;
                string[] checkedDptId = dptInvObj.checkedDptId;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dptInvObj.ff;
                string todatee = dptInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DepartmentId = "";
                string PayModes = "";
                sqlcon.Open();
                for (int i = 0; i < checkedDptId.Count(); i++)
                {
                    if (DepartmentId == "")
                    {
                        DepartmentId += (checkedDptId[i]).ToString();
                    }
                    else
                    {
                        DepartmentId += "," + (checkedDptId[i]).ToString();
                    }
                }
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = dptInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dptInvObj.BrMst_Name;

                Head1 = "DEPARTMENT WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (checkedDptId != null)
                {
                    nCondition = " AND E.Mstr_Key IN(" + DepartmentId + ")";
                }


                //checkedDiv checkedDivId
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }

                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DepartmentWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DepartmentWiseInvoices";
                    brKey = (int)BrmstKey;
                }

                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
              "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
              "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
              "A.Inv_BrID,A.Inv_RsltNO,A.Inv_Age,A.Inv_ageymd,A.Inv_Gender, A.Inv_Date, A.Inv_time, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
              "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
              "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
              "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
               "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
              "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
              "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
              "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
              "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                            "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                            "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                            "A.Inv_BrID, A.Inv_Date,A.Inv_RsltNO,A.Inv_Age,A.Inv_Gender,A.Inv_ageymd, A.Inv_time, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                            "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                            "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
                            "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND  A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //*************************************************************************************************

                dsPrint.Tables.Clear();

                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DepartmentStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DepartmentStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivsnWisePerfomance()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DivisionWisePerfomance";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DivsnWisePerfomance(branchdetails DivPrfmnceObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //CompanyId YearId

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = DivPrfmnceObj.ff;
                string todatee = DivPrfmnceObj.tt;
                //*******************

                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string Nfile_name = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DivisionWisePerfomance";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;



                //**************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                cmd0.CommandText = "select count(distinct InvItm_invno) as TestCount,convert(date,Inv_Date)as date,Mstr_Desc from Invoice_Mst left join Invoice_Det on Inv_No = InvItm_Invno and Inv_YrId = InvItm_YrId and Inv_CpyId = InvItm_CpyId  left join Test_Mst on InvItm_TstId = TstMst_Key left join masters on TstMst_DivsnId = Mstr_Key where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status!= -1 and   Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + "   group by Mstr_Desc,Inv_Date";



                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");

                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "Corporate Perfomance Divisionwise";


                ds0.Tables.Add(dt);

                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwisePerfomance.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwisePerfomance.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRefundStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "RefundStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult RefundStmnt(branchdetails rfndStmntObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;


                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rfndStmntObj.ff;
                string todatee = rfndStmntObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string Nfile_name = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "RefundStatement";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head1 = "REFUND STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");


                Head3 = BrMst_Key.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                //*******************************
                if (BrMst_Key > 0)
                {


                    sqlStr = " select Inv_No,Inv_name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_RefundAmt,AccountHeads_Mst.AhMst_pName from Invoice_Mst left join AccountHeads_Mst on Invoice_Mst.Inv_InsId=AccountHeads_Mst.AhMst_Key " +
                             "WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND Inv_CpyId = " + BrMst_Key + " AND Inv_YrId = " + nYrId + " AND Inv_RefundAmt>0 ";

                }
                else
                {

                    sqlStr = " select Inv_No,Inv_name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_RefundAmt,AccountHeads_Mst.AhMst_pName from Invoice_Mst left join AccountHeads_Mst on Invoice_Mst.Inv_InsId=AccountHeads_Mst.AhMst_Key " +
                              "WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                              " AND Inv_YrId = " + nYrId + " AND Inv_RefundAmt>0 ";
                }
                cmd = new SqlCommand(sqlStr);
                cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //****************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RefundStatement.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_RefundStatement.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctorsVisit()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DoctorVisit";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctorsVisit(branchdetails dctrVstObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;


                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dctrVstObj.ff;
                string todatee = dctrVstObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double PROKey = 0;
                double staff = 0;
                string ncond = "";
                double categoryid = 0;
                double catgryKey = 0;
                PROKey = dctrVstObj.PROKey;
                catgryKey = dctrVstObj.catgryKey;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string NcondDoc = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                string Nfile_name = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorVisit";

                //List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                //Head1 = "REFUND STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");


                //Head3 = BrMst_Key.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                //*******************************
                try
                {
                    categoryid = catgryKey;
                    if (categoryid > 0)
                    {
                        ncond = " AND a.AhMst_CatgryId=" + categoryid + " ";
                    }
                }
                catch { }
                try
                {
                    staff = PROKey;
                    if (staff > 0)
                    {
                        if (ncond != "")
                        {
                            ncond = ncond + " AND SetCorp_StaffId = " + staff + " ";
                        }
                        else
                        {
                            ncond = " AND SetCorp_StaffId = " + staff + " ";
                        }
                        NcondDoc = " AND Pro_Id=" + staff + "";
                    }

                }
                catch { }
                //****************************************

                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select a.ahmst_pname as doctor,ah.ahmst_pname as pro from [dbo].[SetDoctor_Staff] left join AccountHeads_Mst a on [SetCorp_CorpId]=a.AhMst_Key left join AccountHeads_Mst ah on [SetCorp_StaffId]=ah.AhMst_Key where   [SetCorp_CorpId] not in(select[Pro_DctrId] from[dbo].[ProDailyReport] where  Pro_Date >='" + fromdate.ToString("yyyy-MM-dd") + "' and Pro_Date<='" + todate.ToString("yyyy-MM-dd") + "'" + NcondDoc + ") " + ncond + " order by doctor";

                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "pro");


                //cmd.CommandText = "";
                //adapt = new SqlDataAdapter(cmd);
                //adapt.Fill(ds0, "DATE");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");


                Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy ") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();

                dt.Columns.Add("DateInterval", typeof(string));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;

                ds0.Tables.Add(dt);
                //******************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NoDctrVisit.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NoDctrVisit.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult NewPatientList(branchdetails patListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = patListObj.ff;
                string todatee = patListObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = patListObj.rowCount;
                int doctorChk = patListObj.dctrCheck;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");


                qry = "SELECT Inv_No,Inv_Name,Inv_PhNo,convert(date, Inv_date) as Inv_Date from Invoice_Mst WITH (NOLOCK) WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                  + " and ISNULL(Inv_IsNewPat,0)=1 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition + "Order by Inv_Date desc";

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dtPatnts = new DataTable();
                sda.Fill(dtPatnts);

                if (rowcount > 0)
                {
                    //grdNewPatients.Rows.Add(dtPatnts.Rows.Count);
                    //lblCount.Visible = true;
                    //lblCount.Text = "Count :" + dtPatnts.Rows.Count.ToString();
                    int i = 0;
                    foreach (DataRow dr in dtPatnts.Rows)
                    {
                        // Inv_No Inv_name Inv_phno Inv_Date
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_phno = dr["inv_phno"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy")
                        };
                        cls.Add(cs1);

                    }
                }
                else
                {

                }

                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFNewPatientListPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "NewPatientList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult NewPatientListPrint(branchdetails patListPrintObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = patListPrintObj.ff;
                string todatee = patListPrintObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = patListPrintObj.rowCount;
                int doctorChk = patListPrintObj.dctrCheck;
                string qry = "";
                string condition = "";
                string Nfile_name = "";
                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "NewPatientList";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                DataSet ds0 = new DataSet();
                //*****************************
                qry = "SELECT Inv_Name,Inv_PhNo,Inv_Date,Inv_No,Inv_PayMode,Inv_Netamt,Inv_GrosAmt,InvItm_Type,Inv_DiscAmt,Inv_OthAmt,Inv_Schrge,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Tst.TstMst_name,InvItm_rate,InvItm_Orgrate " + Environment.NewLine
                    + "FROM Invoice_Mst WITH (NOLOCK) LEFT JOIN Invoice_Det WITH (NOLOCK)ON InvItm_Invno = Inv_No AND InvItm_CpyId = Inv_CpyId AND InvItm_YrId = Inv_YrId " + Environment.NewLine
                    + "LEFT JOIN Test_Mst as Tst WITH (NOLOCK) on TstMst_Key=InvItm_TstId " + Environment.NewLine
                    + " WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                   + " and ISNULL(Inv_IsNewPat,0)=1 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "NewPatients");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyNewPatients.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_DailyNewPatients.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchCorpName(branchdetails crpWithName)
        {
            string corpName = crpWithName.AhMst_pName;
            double areaKey = crpWithName.AreaKey;
            string PayType = "";
            //if (crpWithName.PayType != null)
            //{
            //    PayType = crpWithName.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_TERM_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_TERM_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_TERM(corpName, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpCode(branchdetails crpWithCode)
        {
            double corpKey = crpWithCode.AhMst_Key;
            double areaKey = crpWithCode.AreaKey;
            //string PayType = crpWithCode.PayType;
            string PayType = "";
            //if (crpWithCode.PayType != null)
            //{
            //    PayType = crpWithCode.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_KEY_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_KEY(corpKey, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpPhno(branchdetails crpWithPhNo)
        {
            string corpPhno = crpWithPhNo.AhMst_mobile;
            double areaKey = crpWithPhNo.AreaKey;
            // string PayType = crpWithPhNo.PayType;
            string PayType = "";
            //if (crpWithPhNo.PayType != null)
            //{
            //    PayType = crpWithPhNo.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_PHN_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_PHN_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_PHN(corpPhno, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrPhno(string term)
        {
            try
            {

                List<Stproc_SEARCH_COLL_PERSON_WITH_PHNO_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_PHNO_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_PHNO(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_COLL_PERSON_WITH_CODE_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrName(string term)
        {
            try
            {
                List<Stproc_SEARCH_COLL_PERSON_WITH_WORD_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrChrgRptView(branchdetails srvcChObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = srvcChObj.ff;
                string todatee = srvcChObj.tt;
                string User_Name = srvcChObj.User_Name;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = srvcChObj.rowCount;
                double usrKey = srvcChObj.User_Key;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*************************************
                SqlCommand cmd = new SqlCommand();
                int tCollperId = 0;
                try
                {
                    tCollperId = Convert.ToInt32(usrKey);
                }
                catch { }


                if (tCollperId != 0)
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK) left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND Inv_CltnID='" + tCollperId + " 'and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";

                }
                else
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";
                }
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows.Count == 0)
                {

                }
                int curRow = 0;
                int TotSChrge = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    int tmpSchrge = 0;
                    try
                    {
                        tmpSchrge = Convert.ToInt32(dr["Inv_Schrge"].ToString());
                    }
                    catch { }
                    TotSChrge = TotSChrge + tmpSchrge;
                    collectionDetails cs1 = new collectionDetails()
                    {
                        Inv_No = dr["Inv_No"].ToString(),
                        Inv_name = dr["inv_name"].ToString(),
                        //Inv_phno = dr["inv_phno"].ToString(),
                        Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy"),
                        Inv_Schrge = dr["Inv_Schrge"].ToString(),
                        AhMst_pName = dr["AhMst_pName"].ToString(),
                        Inv_PayMode = dr["Inv_PayMode"].ToString()
                    };
                    cls.Add(cs1);
                    curRow = curRow + 1;

                }

                //************************************
                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFSrChrgRptPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "ServiceChargeStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult SrChrgRptPrint(branchdetails srvcChprntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {

                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = srvcChprntObj.ff;
                string todatee = srvcChprntObj.tt;
                string User_Name = srvcChprntObj.User_Name;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = srvcChprntObj.rowCount;
                double usrKey = srvcChprntObj.User_Key;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "ServiceChargeStatements";
                if (usrKey == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*************************************
                SqlCommand cmd = new SqlCommand();
                int tCollperId = 0;
                try
                {
                    tCollperId = Convert.ToInt32(usrKey);
                }
                catch { }

                if (tCollperId != 0)
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  Inv_CltnID='" + tCollperId + " 'and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status<>'-1' and Inv_CpyId=" + CompanyId + " and Inv_YrId=" + YearId + " order by AhMst_pName  ";

                }
                else
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";
                }
                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "scharge");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");

                string filepath = "";
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Schrg.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_Schrg.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });

            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult OldPatientList(branchdetails oldpatListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = oldpatListObj.ff;
                string todatee = oldpatListObj.tt;
                string Nfile_name = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = oldpatListObj.rowCount;
                int doctorChk = oldpatListObj.dctrCheck;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");


                qry = "SELECT Inv_No,Inv_Name,Inv_PhNo,convert(date, Inv_date) as Inv_Date from Invoice_Mst WITH (NOLOCK) WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
               + " and ISNULL(Inv_IsNewPat,0)=0 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dtPatnts = new DataTable();
                sda.Fill(dtPatnts);

                if (rowcount > 0)
                {
                    //grdNewPatients.Rows.Add(dtPatnts.Rows.Count);
                    //lblCount.Visible = true;
                    //lblCount.Text = "Count :" + dtPatnts.Rows.Count.ToString();
                    int i = 0;
                    foreach (DataRow dr in dtPatnts.Rows)
                    {
                        // Inv_No Inv_name Inv_phno Inv_Date
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_phno = dr["inv_phno"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy")
                        };
                        cls.Add(cs1);

                    }
                }
                else
                {

                }

                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult OldPatientListPrint(branchdetails oldPatListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = oldPatListObj.ff;
                string todatee = oldPatListObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = oldPatListObj.rowCount;
                int doctorChk = oldPatListObj.dctrCheck;
                string qry = "";
                string condition = "";
                string Nfile_name = "";
                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "OldPatientList";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                DataSet ds0 = new DataSet();
                //*****************************
                qry = "SELECT Inv_Name,Inv_PhNo,Inv_Date,Inv_No,Inv_PayMode,Inv_Netamt,Inv_GrosAmt,InvItm_Type,Inv_DiscAmt,Inv_OthAmt,Inv_Schrge,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Tst.TstMst_name,InvItm_rate,InvItm_Orgrate " + Environment.NewLine
                      + "FROM Invoice_Mst WITH (NOLOCK) LEFT JOIN Invoice_Det WITH (NOLOCK)ON InvItm_Invno = Inv_No AND InvItm_CpyId = Inv_CpyId AND InvItm_YrId = Inv_YrId " + Environment.NewLine
                      + "LEFT JOIN Test_Mst as Tst WITH (NOLOCK) on TstMst_Key=InvItm_TstId " + Environment.NewLine
                      + " WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                     + " and ISNULL(Inv_IsNewPat,0)=0 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "OldPatients");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyOldPatients.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_DailyOldPatients.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFOldPatientListPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "OldPatientList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult SearchAreaCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_AREA_WITH_CODE_Result> t = new List<Stproc_SEARCH_AREA_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_AREA_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchAreaName(string term)
        {
            try
            {
                List<Stproc_SEARCH_AREA_WITH_NAME_Result> t = new List<Stproc_SEARCH_AREA_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_AREA_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpCodes(string term)
        {
            try
            {

                List<Stproc_SEARCH_CORPORATE_WITH_CODE_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCoprName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CORPORATE_WITH_NAME_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult CorpInvoiceList(branchdetails corpInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpInvObj.ff;
                string todatee = corpInvObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = corpInvObj.rowCount;
                string Corp_Name = corpInvObj.Corp_Name;
                double Corp_Key = corpInvObj.Corp_Key;
                int rptCheck = corpInvObj.rptCheck;
                double BrmstKey = 0;
                string BrmstName = corpInvObj.BrMst_Name;
                brnchName = corpInvObj.BrMst_Name;
                //Head1 = "COLLECTION STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                SqlCommand cmd = new SqlCommand("Select Inv.Inv_SmplDate,Inv.Inv_ItemDisc,Inv.Inv_DiscAmt,Inv.Inv_GrosAmt,Inv.Inv_No,Inv.Inv_RsltNO,Inv.Inv_name,Inv.Inv_Netamt,AccH.AhMst_pName from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + Corp_Key + " And convert(Date,Inv_Date,0) >='" + fromdate.ToShortDateString() + "'    and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'   AND  Inv_YrId =" + YearId + " and Inv_Status!=-1  " + nCondition, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //if (dt.Rows.Count > 0)
                //{
                //    grdCorDts.Rows.Add(dt.Rows.Count);
                //}
                int SlNo = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    InvDate = Convert.ToDateTime(dr["Inv_SmplDate"]);
                    Date = InvDate.ToString("dd-MMM-yyyy");
                    try
                    {
                        Item_Disc = Convert.ToDouble(dr["Inv_ItemDisc"]);


                    }
                    catch { Item_Disc = 0; }
                    try
                    {
                        Oter_Disc = Convert.ToDouble(dr["Inv_DiscAmt"]);
                    }
                    catch { Oter_Disc = 0; }
                    try
                    {
                        Gross_Amt = Convert.ToDouble(dr["Inv_GrosAmt"]);
                    }
                    catch { Gross_Amt = 0; }
                    string Inv_No = dr["Inv_No"].ToString();
                    string Inv_name = dr["inv_name"].ToString();
                    string Inv_RsltNO = dr["Inv_RsltNO"].ToString();
                    string Inv_Date = Date;
                    string Inv_Netamt = dr["Inv_Netamt"].ToString();
                    double Inv_Gross = Gross_Amt + Item_Disc;
                    double Inv_Disc = Oter_Disc + Item_Disc;

                    try
                    {
                        if (Inv_Gross >= 0)
                        {
                            TempGrossAmt = Convert.ToDouble(Inv_Gross);
                        }
                    }
                    catch { }

                    try
                    {
                        if (Inv_Disc >= 0)
                        {
                            TemDiscAmt = Convert.ToDouble(Inv_Disc);
                        }
                    }
                    catch { }
                    try
                    {
                        if (Inv_Netamt != null)
                        {
                            TempNetAmt = Convert.ToDouble(Inv_Netamt);
                        }
                    }
                    catch { }

                    GrossAmt += TempGrossAmt;
                    DiscAmt += TemDiscAmt;
                    NetAmt += TempNetAmt;
                    collectionDetails cs1 = new collectionDetails()
                    {
                        Inv_No = dr["Inv_No"].ToString(),
                        Inv_name = dr["inv_name"].ToString(),
                        Inv_RsltNO = dr["Inv_RsltNO"].ToString(),
                        Inv_Date = Date,
                        Inv_Netamt = dr["Inv_Netamt"].ToString(),
                        Inv_Gross = Gross_Amt + Item_Disc,
                        Inv_Disc = Oter_Disc + Item_Disc,
                        TempGrossAmt = GrossAmt,
                        TemDiscAmt = DiscAmt,
                        TempNetAmt = NetAmt

                    };
                    cls.Add(cs1);

                    SlNo += 1;
                }


                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpInvoicePrint()
        {
            string fileName = "";
            //if(reportCheck==0)
            //{

            //}
            if (brKey > 0)
            {
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
        }
        public JsonResult CorpInvoicePrint(branchdetails corpInvPrntObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //checkedDiv checkedDivId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string[] checkedDpt = corpInvPrntObj.checkedDpt;
                //string[] checkedDptId = corpInvPrntObj.checkedDptId;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string fromdatee = corpInvPrntObj.ff;
                string todatee = corpInvPrntObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                int rowcount = corpInvPrntObj.rowCount;
                string Corp_Name = corpInvPrntObj.Corp_Name;
                double Corp_Key = corpInvPrntObj.Corp_Key;
                int rptCheck = corpInvPrntObj.rptCheck;
                reportCheck = corpInvPrntObj.rptCheck;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DepartmentId = "";
                string PayModes = "";
                sqlcon.Open();

                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = corpInvPrntObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateInvoice";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = corpInvPrntObj.BrMst_Name;

                Head1 = "DEPARTMENT WISE STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateInvoice";
                    brKey = (int)BrmstKey;
                }
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                //******************************
                if (Corp_Name == "")
                {
                    cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                               + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                               + "Where Inv.Inv_InsId!=0 and Inv.Inv_Status!=-1  And" + Environment.NewLine
                               + "convert(Date,Inv_date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                               + "and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'  " + Environment.NewLine
                               + " AND  Inv_YrId =" + YearId + nCondition;
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "CorporateBill");

                }
                else
                {
                    if (rptCheck == 0)
                    {


                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv Left Join AccountHeads_Mst AccH on Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + CorPorateId + " And Inv_SmplDate>='" + dtpFrom.Value.ToShortDateString() + "'  AND Inv_SmplDate<='" + dtpTo.Value.ToShortDateString() + "' AND Inv_CpyId=" + cPublic.CompanyId + " AND Inv_YrId =" + cPublic.YearId + "";
                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                        //                + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                + "Where Inv.Inv_InsId=" + CorPorateId + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                        //                + "convert(Date,Inv_SmplDate,0)>='" + dtpFrom.Value.ToShortDateString() + "' " + Environment.NewLine
                        //                + "and convert(Date,Inv_SmplDate,0)<='" + dtpTo.Value.ToShortDateString() + "'  " + Environment.NewLine
                        //                + " AND Inv_CpyId=" + cPublic.CompanyId + " AND Inv_YrId =" + cPublic.YearId + "" + Environment.NewLine
                        //                + "" + Environment.NewLine;

                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                        //                + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                + "Where Inv.Inv_InsId=" + Corp_Key + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                        //                + "convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                + "and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'  " + Environment.NewLine
                        //                + " AND  Inv_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                                       + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                       + "Where Inv.Inv_InsId=" + Corp_Key + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                                       + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                       + "and convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'  " + Environment.NewLine
                                       + " AND  Inv_YrId =" + YearId + nCondition;


                    }
                    else if (rptCheck == 1)
                    {
                        //cmd0.CommandText = "Select Inv.*,InvDet.*,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                        //                 + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                 + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                        //                 + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                        //                 + "Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                 + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                 + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                        //                 + " AND InvItm_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "Select Inv.*,InvDet.*,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                                        + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                        + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                                        + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                                        + "Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                        + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                        + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                                        + " AND InvItm_YrId =" + YearId + nCondition;



                    }
                    else
                    {
                        //cmd0.CommandText = " select GenRslt.*,Tst.TstMst_name,Tst.TstMst_ShortName from Invoice_Mst Inv LEFT JOIN  GenaralRslt_Det GenRslt ON Inv.Inv_No=GenRslt.GenRsltDet_LabNo  AND Inv.Inv_YrId=GenRslt.GenRsltDet_YrId  AND Inv.Inv_CpyId=GenRslt.GenRsltDet_CpyId LEFT JOIN Test_Mst Tst ON GenRslt.GenRsltDet_TstID=Tst.TstMst_Key  " +
                        //                  " Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                    + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                    + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                        //                    + " AND GenRsltDet_Key>0 " + nCondition + Environment.NewLine
                        //                    + "" + Environment.NewLine;
                        cmd0.CommandText = " select GenRslt.*,Tst.TstMst_name,Tst.TstMst_ShortName from Invoice_Mst Inv LEFT JOIN  GenaralRslt_Det GenRslt ON Inv.Inv_No=GenRslt.GenRsltDet_LabNo  AND Inv.Inv_YrId=GenRslt.GenRsltDet_YrId  AND Inv.Inv_CpyId=GenRslt.GenRsltDet_CpyId LEFT JOIN Test_Mst Tst ON GenRslt.GenRsltDet_TstID=Tst.TstMst_Key  " +
                                   " Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                     + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                     + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                                     + " AND GenRsltDet_Key>0 " + nCondition + Environment.NewLine
                                     + "" + Environment.NewLine;
                    }


                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "CorporateBill");
                    if (rptCheck == 2)
                    {
                        //cmd0.CommandText = "SELECT Inv.* from Invoice_mst Inv Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                   + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                   + " AND Inv_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "SELECT Inv.* from Invoice_mst Inv Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                          + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                          + " AND Inv_YrId =" + YearId + nCondition;
                        sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                        sd0.Fill(ds0, "Invoice_mst");
                    }
                }
                //****************************************************
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************

                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("CorporateName", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["CorporateName"] = Corp_Name.Trim();
                ds0.Tables.Add(dt);
                //********************************************************************************
                DataTable CorporateRate = new DataTable();
                CorporateRate.Columns.Add("LabNo", typeof(int));
                CorporateRate.Columns.Add("Gross", typeof(double));
                CorporateRate.Columns.Add("Disc", typeof(double));
                CorporateRate.Columns.Add("Netamount", typeof(double));

                double discamt = 0;
                cmd = new SqlCommand("Select Inv.Inv_SmplDate,Inv.Inv_ItemDisc,Inv.Inv_DiscAmt,Inv.Inv_GrosAmt,Inv.Inv_No,Inv.Inv_RsltNO,Inv.Inv_name,Inv.Inv_Netamt,AccH.AhMst_pName from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + Corp_Key + " And convert(Date,Inv_Date,0) >='" + fromdate.ToString("dd/MM/yyyy") + "'    and convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'   AND  Inv_YrId =" + YearId + " and Inv_Status!=-1  " + nCondition, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                //if (dt.Rows.Count > 0)
                //{
                //    grdCorDts.Rows.Add(dt.Rows.Count);
                //}
                int SlNo = 0;
                int i = 0;
                foreach (DataRow dr in dt1.Rows)
                {

                    CorporateRate.Rows.Add();
                    try
                    {
                        discamt = 0;
                        double invdiscamnt = Convert.ToDouble(dr["Inv_DiscAmt"]);
                        double invItemDisc = Convert.ToDouble(dr["Inv_ItemDisc"]);
                        double invGross = Convert.ToDouble(dr["Inv_GrosAmt"]);
                        try
                        {
                            discamt = Convert.ToDouble(invdiscamnt + invItemDisc);
                        }
                        catch { }
                        CorporateRate.Rows[i]["LabNo"] = dr["Inv_No"].ToString();
                        CorporateRate.Rows[i]["Gross"] = invGross + invItemDisc;
                        CorporateRate.Rows[i]["Disc"] = discamt;
                        CorporateRate.Rows[i]["Netamount"] = dr["Inv_Netamt"].ToString();
                    }
                    catch { }
                    i++;
                    //}
                }
                //for (int i = 0; i < grdCorDts.Rows.Count; i++)
                //{
                //    CorporateRate.Rows.Add();
                //    try
                //    {
                //        discamt = 0;
                //        try
                //        {
                //            discamt = Convert.ToDouble(grdCorDts["DiscAmt", i].Value);
                //        }
                //        catch { }
                //        CorporateRate.Rows[i]["LabNo"] = grdCorDts["LabNo", i].Value;
                //        CorporateRate.Rows[i]["Gross"] = grdCorDts["Gross", i].Value;
                //        CorporateRate.Rows[i]["Disc"] = discamt;
                //        CorporateRate.Rows[i]["Netamount"] = grdCorDts["Netmt", i].Value;
                //    }
                //    catch { }
                //}

                ds0.Tables.Add(CorporateRate);
                if (Corp_Name == "")
                {

                    //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpBills.rpt";
                    //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpBills.xsd");
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBills.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpBills.xsd");

                }
                else
                {
                    if (rptCheck == 0)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBill.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBill.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateBill.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateBill.xsd");
                    }
                    else if (rptCheck == 1)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBillDets.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBillDets.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateBillDets.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateBillDets.xsd");
                    }
                    else if (rptCheck == 2)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpResult.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\CorpResult.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpResult.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpResult.xsd");
                    }
                }
                //******************************
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";

                //Reportfilepaths = Server.MapPath("~/Reports/");
                //filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DepartmentStmnt.rpt");
                //dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DepartmentStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpCollSummary()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CorpCollSummary(branchdetails collSmryObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = collSmryObj.ff;
                string todatee = collSmryObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = collSmryObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = collSmryObj.BrMst_Name;
                Head1 = "CREDIT CARD WiSE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Count(Inv_PayMode) as CountData,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,SUM(Inv_CurBalAmt) AS Inv_CurBalAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Mst.Mstr_Desc As CustType from dbo.Invoice_Mst Inv WITH (NOLOCK) " + Environment.NewLine
                                           + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key " + Environment.NewLine
                                           + "Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                           + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                           + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                           + " AND Inv_CpyId=" + BrmstKey + " AND Inv_GrosAmt >0 and (Inv_Paymode<>'Debit/Credit' OR Inv_Paymode<>'BHIM/UPI Online Payment') AND Inv_YrId =" + nYrId + " AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mstr_Desc";

                }
                else
                {
                    sqlStr = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Count(Inv_PayMode) as CountData,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,SUM(Inv_CurBalAmt) AS Inv_CurBalAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Mst.Mstr_Desc As CustType from dbo.Invoice_Mst Inv WITH (NOLOCK) " + Environment.NewLine
                                          + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key " + Environment.NewLine
                                          + "Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                          + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                          + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                          + " AND Inv_GrosAmt >0 and (Inv_Paymode<>'Debit/Credit' OR Inv_Paymode<>'BHIM/UPI Online Payment') AND Inv_YrId =" + nYrId + "  AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mstr_Desc";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateCollectionSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CorporateCollectionSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpCollDivSummary()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionDivisionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionDivisionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CorpCollDivSummary(branchdetails collSmryDivObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = collSmryDivObj.ff;
                string todatee = collSmryDivObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = collSmryDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = collSmryDivObj.BrMst_Name;
                //Head1 = "CREDIT CARD WiSE COLLECTION";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionDivisionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionDivisionSummary";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                // cmd0.CommandType = CommandType.StoredProcedure;
                //****************************************************
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Sum(invdt.InvItm_rate) as invitemrate,sum(invdt.InvItm_Orgrate) as orginlrate,Mst.Mstr_Desc As CustType,mst1.Mstr_Desc as Division from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key LEFT JOIN Invoice_Det invdt on Inv.Inv_No=invdt.InvItm_Invno and inv.Inv_YrId=invdt.InvItm_YrId and inv.Inv_CpyId=invdt.InvItm_CpyId left join Test_Mst tst on invdt.InvItm_TstId=tst.TstMst_Key   left join Masters Mst1 on tst.TstMst_DivsnId=Mst1.Mstr_Key " + Environment.NewLine
                          + " Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                       + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                       + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                       + " AND Inv_CpyId=" + BrmstKey + " AND Inv_GrosAmt >0 and Inv_Paymode<>'Debit/Credit' AND Inv_YrId =" + YearId + " AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mst1.Mstr_Desc,Mst.Mstr_Desc";

                }
                else
                {
                    cmd0.CommandText = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Sum(invdt.InvItm_rate) as invitemrate,sum(invdt.InvItm_Orgrate) as orginlrate,Mst.Mstr_Desc As CustType,mst1.Mstr_Desc as Division from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key LEFT JOIN Invoice_Det invdt on Inv.Inv_No=invdt.InvItm_Invno and inv.Inv_YrId=invdt.InvItm_YrId and inv.Inv_CpyId=invdt.InvItm_CpyId left join Test_Mst tst on invdt.InvItm_TstId=tst.TstMst_Key   left join Masters Mst1 on tst.TstMst_DivsnId=Mst1.Mstr_Key " + Environment.NewLine
                         + " Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                      + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                      + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                      + " AND Inv_GrosAmt >0 and Inv_Paymode<>'Debit/Credit' AND Inv_YrId =" + YearId + "  AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mst.Mstr_Desc,Mst1.Mstr_Desc";

                }
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "CorporateDetailed");
                //***************************************************

                //****************************************************
                cmd0.Parameters.Clear();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy hh:mm tt") + "  To : " + todate.ToString("dd/MM/yyyy hh:mm tt");
                DataTable dt = new DataTable();
                dt.TableName = "HeadMaster";
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Head1", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Head1"] = "Corporate Collection Divion Wise";
                ds0.Tables.Add(dt);


                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateCollectiondivision.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateCollectiondivision.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult CorpOutShow(branchdetails corpOutShowObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpOutShowObj.ff;
                string todatee = corpOutShowObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string User_Name = corpOutShowObj.User_Name;
                double User_Key = corpOutShowObj.User_Key;
                int uptoCheck = corpOutShowObj.uptoCheck;
                int avdClctdBillCheck = corpOutShowObj.avdClctdBillCheck;
                string Condtn = "";
                int Flagset = 0;
                int nStaffId = 0;
                int Crdays = 0;
                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                if (uptoCheck == 0)
                {
                    Condtn = " vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                    Flagset = 1;
                }
                else
                {
                    Condtn = "  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND  vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                }
                DateTime CurDate = DateTime.Now;
                SqlCommand cmdOpen = new SqlCommand("Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "", sqlcon);
                SqlDataAdapter sdaopen = new SqlDataAdapter(cmdOpen);
                DataTable dtOpen = new DataTable();
                sdaopen.Fill(dtOpen);
                SqlCommand cmd = new SqlCommand();

                if (nStaffId == 0)
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }
                else
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM SetCorp_Staff Stf LEFT JOIN  Vouchers Vch ON Stf.SetCorp_CorpId=Vch.vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND SetCorp_StaffId=" + nStaffId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);

                int TempRow = 0;

                double Payments = 0;
                double Receipts = 0;
                double Bal = 0;
                DataRow[] drs;
                int AccId = 0;

                int Corpcrlimit = 0;
                string OpnStatus = "";
                double OpnAmt = 0;
                double AvdCollAvdMat = 0;

                string corporate = "";
                double billed = 0;
                double collected = 0;
                double balance = 0;
                double debit = 0;
                double credit = 0;
                //****************************************
                foreach (DataRow dr in dt.Rows)
                {
                    OpnAmt = 0;
                    try
                    {
                        AccId = Convert.ToInt32(dr["vchr_Id"]);
                    }
                    catch { }
                    //grdCorDts[0, TempRow].Value = TempRow + 1;slno
                    //grdCorDts["Corporate", TempRow].Value = dr["Corpoarte"];corporate
                    corporate = dr["Corpoarte"].ToString();
                    //******************************************************
                    drs = dtOpen.Select("OpBl_AccId='" + AccId.ToString().Trim() + "'");

                    if (drs.Length > 0)
                    {
                        OpnStatus = drs[0][3].ToString();
                        try
                        {
                            OpnAmt = Convert.ToDouble(drs[0][2]);
                        }
                        catch { }

                    }
                    //*******************************************************
                    try
                    {
                        Payments = Convert.ToDouble(dr["Payment"]);

                    }
                    catch { Payments = 0; }
                    try
                    {
                        Receipts = Convert.ToDouble(dr["Receipts"]);

                    }

                    catch { Receipts = 0; }
                    if (OpnAmt > 0)
                    {
                        if (OpnStatus.ToUpper() == "DR")
                        {
                            Receipts = Receipts + OpnAmt;
                        }
                        else if (OpnStatus.ToUpper() == "CR")
                        {
                            Payments = Payments + OpnAmt;
                        }
                    }

                    if (avdClctdBillCheck == 0 && Corpcrlimit > 0 && nStaffId == 0)
                    {
                        AvdCollAvdMat = 0;
                        cmd1 = new SqlCommand("select sum(BlWsCol_AlloAmt) from BillWiseCollection LEFT JOIN Invoice_Mst ON  BlWsCol_CorpId=Inv_InsId AND BlWsCol_YearId=Inv_YrId AND BlWsCol_CompanyId=Inv_CpyId AND  BlWsCol_InvNo=Inv_No where BlWsCol_CorpId=" + AccId + " AND BlWsCol_YearId=" + YearId + " AND BlWsCol_CompanyId=" + CompanyId + " AND Inv_Date>'" + todate.AddDays(Crdays).ToString("yyyy-MM-dd") + "'", sqlcon);
                        try { AvdCollAvdMat = Convert.ToDouble(cmd1.ExecuteScalar()); } catch { }
                        if (AvdCollAvdMat > 0)
                        {
                            Receipts = Receipts - AvdCollAvdMat;
                        }
                    }
                    Bal = Receipts - Payments;
                    //grdCorDts["Billed", TempRow].Value = Math.Round(Payments, 2);billed
                    billed = Math.Round(Payments, 2);
                    //grdCorDts["Collected", TempRow].Value = Math.Round(Receipts, 2);collected
                    collected = Math.Round(Receipts, 2);
                    //grdCorDts["Balance", TempRow].Value = Math.Round(Bal, 2);balance
                    balance = Math.Round(Bal, 2);
                    if (Bal > 0)
                    {
                        //grdCorDts["CrCredit", TempRow].Value = 0;credit
                        credit = 0;
                        debit = Math.Round(Bal, 2);
                        //grdCorDts["CrDebit", TempRow].Value = Math.Round(Bal, 2);debit
                    }
                    else if (Bal < 0)
                    {
                        credit = Math.Round(Bal, 2) * -1;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = Math.Round(Bal, 2) * -1;credit
                        //grdCorDts["CrDebit", TempRow].Value = 0;debit
                    }
                    else
                    {
                        credit = 0;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = "0";credit
                        //grdCorDts["CrDebit", TempRow].Value = "0";debit
                    }
                    collectionDetails cs = new collectionDetails()
                    {
                        corporate = corporate,
                        billed = billed,
                        collected = collected,
                        balance = balance,
                        debit = debit,
                        credit = credit
                    };
                    cls.Add(cs);

                    //TempRow += 1;
                }

                //****************************************
                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpOutPrint()
        {
            if (uptoCheck == 0)
            {
                string fileName = "";
                fileName += "Report_" + tdt + "_" + "CorporateOutstanding";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");


            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }

        }
        public JsonResult CorpOutPrint(branchdetails corpOutPrntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int TempRow = 0;
                string Nfile_name = "";
                double Payments = 0;
                double Receipts = 0;
                double Bal = 0;
                DataRow[] drs;
                int AccId = 0;

                int Corpcrlimit = 0;
                string OpnStatus = "";
                double OpnAmt = 0;
                double AvdCollAvdMat = 0;

                string corporate = "";
                double billed = 0;
                double collected = 0;
                double balance = 0;
                double debit = 0;
                double credit = 0;
                int Flagset = 0;
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpOutPrntObj.ff;
                string todatee = corpOutPrntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string User_Name = "";
                if (corpOutPrntObj.User_Name != "")
                {
                    User_Name = corpOutPrntObj.User_Name;

                }
                double User_Key = corpOutPrntObj.User_Key;
                int rowCount = corpOutPrntObj.rowCount;
                uptoCheck = corpOutPrntObj.uptoCheck;
                int avdClctdBillCheck = corpOutPrntObj.avdClctdBillCheck;
                int nStaffId = 0;
                string Condtn = "";

                //"Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                int Crdays = 0;
                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                if (uptoCheck == 0)
                {
                    Condtn = " vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                    Nfile_name = "Report_" + tdt + "_" + "CorporateOutstanding";
                    uptoCheck = 0;
                    Flagset = 1;
                }
                else
                {
                    uptoCheck = 1;
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                    Condtn = "  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND  vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                }
                DateTime CurDate = DateTime.Now;
                SqlCommand cmdOpen = new SqlCommand("Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "", sqlcon);
                SqlDataAdapter sdaopen = new SqlDataAdapter(cmdOpen);
                DataTable dtOpen = new DataTable();
                sdaopen.Fill(dtOpen);
                SqlCommand cmd = new SqlCommand();

                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                //**************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                //cmd0.CommandType = CommandType.StoredProcedure;
                //****************************************************
                cmd0.CommandText = "Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "";
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "OpeningBal");
                //****************************************************
                cmd0.Parameters.Clear();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");

                if (nStaffId == 0)
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }
                else
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM SetCorp_Staff Stf LEFT JOIN  Vouchers Vch ON Stf.SetCorp_CorpId=Vch.vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND SetCorp_StaffId=" + nStaffId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //****************************************************
                foreach (DataRow dr in dt.Rows)
                {
                    OpnAmt = 0;
                    try
                    {
                        AccId = Convert.ToInt32(dr["vchr_Id"]);
                    }
                    catch { }
                    //grdCorDts[0, TempRow].Value = TempRow + 1;slno
                    //grdCorDts["Corporate", TempRow].Value = dr["Corpoarte"];corporate
                    corporate = dr["Corpoarte"].ToString();
                    //******************************************************
                    drs = dtOpen.Select("OpBl_AccId='" + AccId.ToString().Trim() + "'");

                    if (drs.Length > 0)
                    {
                        OpnStatus = drs[0][3].ToString();
                        try
                        {
                            OpnAmt = Convert.ToDouble(drs[0][2]);
                        }
                        catch { }

                    }
                    //*******************************************************
                    try
                    {
                        Payments = Convert.ToDouble(dr["Payment"]);

                    }
                    catch { Payments = 0; }
                    try
                    {
                        Receipts = Convert.ToDouble(dr["Receipts"]);

                    }

                    catch { Receipts = 0; }
                    if (OpnAmt > 0)
                    {
                        if (OpnStatus.ToUpper() == "DR")
                        {
                            Receipts = Receipts + OpnAmt;
                        }
                        else if (OpnStatus.ToUpper() == "CR")
                        {
                            Payments = Payments + OpnAmt;
                        }
                    }

                    if (avdClctdBillCheck == 0 && Corpcrlimit > 0 && nStaffId == 0)
                    {
                        AvdCollAvdMat = 0;
                        cmd1 = new SqlCommand("select sum(BlWsCol_AlloAmt) from BillWiseCollection LEFT JOIN Invoice_Mst ON  BlWsCol_CorpId=Inv_InsId AND BlWsCol_YearId=Inv_YrId AND BlWsCol_CompanyId=Inv_CpyId AND  BlWsCol_InvNo=Inv_No where BlWsCol_CorpId=" + AccId + " AND BlWsCol_YearId=" + YearId + " AND BlWsCol_CompanyId=" + CompanyId + " AND Inv_Date>'" + todate.AddDays(Crdays).ToString("yyyy-MM-dd") + "'", sqlcon);
                        try { AvdCollAvdMat = Convert.ToDouble(cmd1.ExecuteScalar()); } catch { }
                        if (AvdCollAvdMat > 0)
                        {
                            Receipts = Receipts - AvdCollAvdMat;
                        }
                    }
                    Bal = Receipts - Payments;
                    //grdCorDts["Billed", TempRow].Value = Math.Round(Payments, 2);billed
                    billed = Math.Round(Payments, 2);
                    //grdCorDts["Collected", TempRow].Value = Math.Round(Receipts, 2);collected
                    collected = Math.Round(Receipts, 2);
                    //grdCorDts["Balance", TempRow].Value = Math.Round(Bal, 2);balance
                    balance = Math.Round(Bal, 2);
                    if (Bal > 0)
                    {
                        //grdCorDts["CrCredit", TempRow].Value = 0;credit
                        credit = 0;
                        debit = Math.Round(Bal, 2);
                        //grdCorDts["CrDebit", TempRow].Value = Math.Round(Bal, 2);debit
                    }
                    else if (Bal < 0)
                    {
                        credit = Math.Round(Bal, 2) * -1;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = Math.Round(Bal, 2) * -1;credit
                        //grdCorDts["CrDebit", TempRow].Value = 0;debit
                    }
                    else
                    {
                        credit = 0;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = "0";credit
                        //grdCorDts["CrDebit", TempRow].Value = "0";debit
                    }
                    collectionDetails cs = new collectionDetails()
                    {
                        corporate = corporate,
                        billed = billed,
                        collected = collected,
                        balance = balance,
                        debit = debit,
                        credit = credit
                    };
                    cls.Add(cs);

                    //TempRow += 1;
                }

                //*****************************************************
                DataTable CorpDetails = new DataTable();
                CorpDetails.Columns.Add("CorpName", typeof(string));
                CorpDetails.Columns.Add("Billed", typeof(double));
                CorpDetails.Columns.Add("Collected", typeof(double));
                CorpDetails.Columns.Add("Balance", typeof(double));
                CorpDetails.Columns.Add("Debit", typeof(double));
                CorpDetails.Columns.Add("Credit", typeof(double));
                int i = 0;
                foreach (collectionDetails cd in cls)
                {
                    if (i < rowCount)
                    {
                        CorpDetails.Rows.Add();
                        CorpDetails.Rows[i]["CorpName"] = cd.corporate;
                        CorpDetails.Rows[i]["Billed"] = cd.billed;
                        CorpDetails.Rows[i]["Collected"] = cd.collected;
                        CorpDetails.Rows[i]["Balance"] = cd.balance;
                        CorpDetails.Rows[i]["Debit"] = cd.debit;
                        CorpDetails.Rows[i]["Credit"] = cd.credit;
                        i++;
                    }

                }
                ds0.Tables.Add(CorpDetails);
                DataTable DtDetails = new DataTable();
                DtDetails.Columns.Add("DateInterval", typeof(string));
                DtDetails.Columns.Add("Head", typeof(string));
                DtDetails.Columns.Add("StaffWse", typeof(string));
                DtDetails.Rows.Add();
                if (Flagset == 0)
                {
                    DtDetails.Rows[0]["DateInterval"] = fromdate.ToString("dd-MMM-yyyy") + " to :" + todate.ToString("dd-MMM-yyyy");
                }
                else
                {
                    DtDetails.Rows[0]["DateInterval"] = " Up to :" + todate.ToString("dd-MMM-yyyy");
                }
                DtDetails.Rows[0]["Head"] = "CORPORATE OUTSTANDING";
                DtDetails.Rows[0]["StaffWse"] = User_Name;
                ds0.Tables.Add(DtDetails);

                //**************************************************************

                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpOutstdng.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpOutstdng.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpDivPerfmnce()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDivisionPerfomance";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDivPerfmnce(branchdetails corDivPmncObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                double CompanyId = l.BrMst_Key;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = corDivPmncObj.ff;
                string todatee = corDivPmncObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                //brnchName = collSmryDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "CorporateDivisionPerfomance";
                //*************************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                cmd0.CommandText = "select count(distinct InvItm_invno) as TestCount,convert(date,Inv_Date)as date,Ahmst_Pname,Mstr_Desc,Inv_PayMode from Invoice_Mst left join Invoice_Det on Inv_No = InvItm_Invno and Inv_YrId = InvItm_YrId and Inv_CpyId = InvItm_CpyId left join AccountHeads_Mst on Inv_InsId = AhMst_Key left join Test_Mst on InvItm_TstId = TstMst_Key left join masters on TstMst_DivsnId = Mstr_Key where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status!= -1 and Inv_InsId>0 and Inv_PayMode!='Debit/Credit'  AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + "   group by AhMst_pName,Mstr_Desc,Inv_Date,Inv_PayMode";


                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");

                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "Corporate Perfomance Divisionwise";


                ds0.Tables.Add(dt);

                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";

                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporatePerformanceDivisionwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporatePerformanceDivisionwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpTstPrfmnce()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
        }
        public JsonResult CorpTstPrfmnce(branchdetails CorpTstPrfmnceObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                Smry_Chk = 0;
                Smry_Chk = CorpTstPrfmnceObj.Smry_Chk;
                string fromdatee = CorpTstPrfmnceObj.ff;
                string todatee = CorpTstPrfmnceObj.tt;
                string AhMst_pName = "";
                //double AhMst_Key = 0;
                string nRptName = "";
                string nRptXSDName = "";
                AhMst_pName = CorpTstPrfmnceObj.AhMst_pName;
                AhMst_Key = CorpTstPrfmnceObj.AhMst_Key;
                //**********************


                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = CorpTstPrfmnceObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = CorpTstPrfmnceObj.BrMst_Name;
                Head1 = "Corporate wise Test Perfomance";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (Smry_Chk == 1)
                {
                    nRptName = "rpt_CorporateWiseTestPerformance.rpt";
                    nRptXSDName = "rpt_CorporateWiseTestPerformance.xsd";
                }
                else
                {
                    nRptName = "rpt_CorporateWiseTestPerformance2.rpt";
                    nRptXSDName = "rpt_CorporateWiseTestPerformance2.xsd";
                }
                // nRptName = "rpt_CorporateWiseTestPerformance.rpt";
                Head1 = "Corporate wise Test Perfomance";
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (AhMst_Key > 0)
                {
                    nCondition = nCondition + " AND AhMst_Key=" + AhMst_Key + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {

                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {


                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key  left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key  " +
                             "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1    " + nCondition + " group by TstMst_Key,TstMst_name,Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date ORDER BY TstMst_name";

                }
                else
                {

                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " +
                                           "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                           " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1   " + nCondition + " group by TstMst_Key,TstMst_name,Mst1.Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date  ORDER BY TstMst_name";

                }
                cmd = new SqlCommand(sqlStr);
                cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //*************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), nRptName);
                dsPrint.WriteXmlSchema(Reportfilepaths + nRptXSDName);
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFBillWiseStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BillWiseCollectionStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        [HttpPost]
        public JsonResult BillWiseStmnt(branchdetails billWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";

                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = billWiseObj.ff;
                string todatee = billWiseObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BillWiseCollectionStatement";
                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(billWiseObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(billWiseObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = billWiseObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";

                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND BlWsCol_CorpId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "";
                }
                cond = "select BlWsCol_CorpId,BlWsCol_VchrKey,BlWsCol_InvNo,BlWsCol_UserInfo,BlWsCol_Date,BlWsCol_AlloAmt,vchr_ChqDate,vchr_ChqNo,vchr_Narration,vchr_TransType,vchr_Receipt,Corp.AhMst_pName,vchr_BookId,Vouchers.vchr_Receipt,Vouchers.vchr_TransNo,Invoice_Mst.Inv_name,Invoice_Mst.Inv_Netamt,Invoice_Mst.Inv_Date,Invoice_Mst.Inv_GrosAmt,Invoice_Mst.Inv_DiscAmt,Invoice_Mst.Inv_ItemDisc,Invoice_Mst.Inv_CurBalAmt,bank.ahmst_pname as bank,Area.Mstr_Desc as AreaName,Corp.AhMst_PayType,Corp.AhMst_AreaID " + Environment.NewLine
                    + "from BillWiseCollection left join AccountHeads_Mst as Corp on Corp.AhMst_Key=BlWsCol_CorpId left join Vouchers on vchr_Key=BlWsCol_VchrKey AND vchr_YrId=BlWsCol_YearId AND vchr_CpyId=BlWsCol_CompanyId  left join Invoice_Mst on Inv_No=BlWsCol_InvNo AND Inv_YrId=BlWsCol_YearId AND Inv_CpyId =BlWsCol_CompanyId  " + Environment.NewLine
                    + "left join AccountHeads_Mst as bank on bank.AhMst_Key=vchr_BookId LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where BlWsCol_Date >='" + frmdate + "' and BlWsCol_Date <='" + toDate + "'     AND (Vchr_TransType='Cash Receipts' OR  Vchr_TransType='Cheque Receive') and BlWsCol_CompanyId='" + cmpid + "' " + condtnCorp + condtnArea + condtnPayMode;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "BillWise Collection");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BillWiseStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_BillWiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFBillWiseDue()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BillWiseDueStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult BillWiseDue(branchdetails billWiseDueObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = billWiseDueObj.ff;
                string todatee = billWiseDueObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BillWiseDueStatement";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(billWiseDueObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(billWiseDueObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = billWiseDueObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";

                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "";
                }

                if (avoidYrIdRpt == 1)
                {
                    nCondtnYrId = "";
                }
                else
                {
                    nCondtnYrId = "and Inv_YrId=" + yrid;
                }



                cond = "select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Corp.AhMst_pName,Inv_Netamt,Inv_GrosAmt,Inv_YrId,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Area.Mstr_Desc as AreaName,Corp.AhMst_PayType,Corp.AhMst_AreaID " + Environment.NewLine
                    + "from Invoice_Mst left join AccountHeads_Mst as Corp on Corp.AhMst_Key=Inv_InsId " + Environment.NewLine
                    + "LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_CpyId='" + cmpid + "' AND Inv_CurBalAmt!=0 AND Inv_Status!='-1' AND Inv_PayMode='Credit' " + condtnCorp + condtnArea + condtnPayMode + nCondtnYrId;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "BillWise Due");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BillWiseDueStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_BillWiseDueStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpWisePendColln()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateWisePendingCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpWisePendColln(branchdetails corpPendObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //YearId CompanyId
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string filepath = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpPendObj.ff;
                string todatee = corpPendObj.tt;
                int bCorpId = 0;
                string CorpName = "";
                string nQuery = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateWisePendingCollection";
                try
                {
                    bCorpId = Convert.ToInt32(corpPendObj.AhMst_Key);
                }
                catch { }
                try
                {
                    CorpName = (corpPendObj.AhMst_pName).ToString();
                }
                catch { }
                //******************************* 
                SqlCommand cmd0 = new SqlCommand();

                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);

                DataSet ds0 = new DataSet();
                if (bCorpId > 0)
                {
                    cmd0.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                                "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                                "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                                "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                                "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                                "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                                "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                                "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                                "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + CompanyId + " AND B.Inv_YrId=" + YearId + " AND B.Inv_InsId=" + bCorpId;

                }
                else
                {
                    cmd0.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                               "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                               "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                               "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                               "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                               "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                               "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                               "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                               "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + CompanyId + " AND B.Inv_YrId=" + YearId + " AND B.Inv_InsId>0";
                }

                sd0.Fill(ds0, "dtInvTestDet");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");

                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpPendCollStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpPendCollStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFAreaWiseSummary()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "AreaWiseSummary";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult AreaWiseSummary(branchdetails areaWsSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //YearId CompanyId
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string filepath = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = areaWsSmryObj.ff;
                string todatee = areaWsSmryObj.tt;
                int bCorpId = 0;
                string CorpName = "";
                string nQuery = "";
                string AreaName = "";
                int bCorpAreaId = 0;
                AreaName = areaWsSmryObj.AreaName;
                int dailyCheck = areaWsSmryObj.dailyCheck;
                //try
                //{
                //    bCorpMode = areaWsSmryObj.PayType.ToString();
                //}
                //catch { }
                //try
                //{
                //    bCorpAreaId = Convert.ToInt32(areaWsSmryObj.AreaKey);
                //}
                //catch { }
                string ncondtion = "";
                string nMode = "";
                int nAreaid = 0;
                try
                {
                    nAreaid = Convert.ToInt32(areaWsSmryObj.AreaKey);
                }
                catch { }
                if (areaWsSmryObj.PayType != null)
                {
                    nMode = areaWsSmryObj.PayType.ToString();
                }


                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "AreaWiseSummary";
                ncondtion = "INV_DATE>='" + fromdate.ToString("yyyy-MM-dd")/*.ToString() */+ "' AND INV_DATE<='" + todate.ToString("yyyy-MM-dd")/*.ToString()*/ + "'   AND Inv_Status!='-1' and Inv_InsId>0 AND Inv_Paymode!='Debit/Credit'";
                if (nAreaid > 0)
                {
                    ncondtion = ncondtion + " AND AhMst_AreaID =" + nAreaid;
                }

                if (nMode != "")
                {
                    ncondtion = ncondtion + " AND AhMst_PayType ='" + nMode + "'";
                }
                //******************************* 
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                if (dailyCheck == 0)
                {
                    cmd0.CommandText = "SELECT Mstr_Desc as Area,Inv_Date ,Sum(Inv_GrosAmt) AS Inv_GrosAmt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_CurBalAmt) as Inv_CurBalAmt, SUM(Inv_CurRcvdAmt) as Inv_CurRcvdAmt, count(Inv_NO) as totalData, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_DiscAmt) as Inv_DiscAmt, SUM(Inv_ItemDisc) as Inv_ItemDisc FROM Invoice_Mst inv lEFT JOIN AccountHeads_Mst Ahmst On inv.Inv_InsId = Ahmst.AhMst_key LEFT JOIN MASTERS mst On Ahmst.AhMst_AreaID=mst.Mstr_Key WHERE " + ncondtion + " AND Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " GROUP BY Mstr_Desc,Inv_Date";
                }
                else
                {
                    cmd0.CommandText = "SELECT Mstr_Desc as Area ,Sum(Inv_GrosAmt) AS Inv_GrosAmt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_CurBalAmt) as Inv_CurBalAmt, SUM(Inv_CurRcvdAmt) as Inv_CurRcvdAmt, count(Inv_NO) as totalData, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_DiscAmt) as Inv_DiscAmt, SUM(Inv_ItemDisc) as Inv_ItemDisc FROM Invoice_Mst inv lEFT JOIN AccountHeads_Mst Ahmst On inv.Inv_InsId = Ahmst.AhMst_key LEFT JOIN MASTERS mst On Ahmst.AhMst_AreaID=mst.Mstr_Key WHERE " + ncondtion + " AND Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " GROUP BY Mstr_Desc";
                }
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "InvoiceView");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);

                sd0.Fill(ds0, "companyMst");

                DataTable DtDetails = new DataTable();
                DtDetails.TableName = "Headings";
                DtDetails.Columns.Add("DateInterval", typeof(string));
                DtDetails.Columns.Add("Head", typeof(string));
                DtDetails.Columns.Add("Area", typeof(string));
                DtDetails.Rows.Add();
                DtDetails.Rows[0]["DateInterval"] = fromdate.ToString("dd-MMM-yyyy") + " to :" + todate.ToString("dd-MMM-yyyy");
                DtDetails.Rows[0]["Area"] = AreaName + " " + nMode;
                ds0.Tables.Add(DtDetails);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                if (dailyCheck == 0)
                {
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AreaDailySummary.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_AreaDailySummary.xsd");
                }
                else
                {
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AreaSummary.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_AreaSummary.xsd");
                }

                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpBillMnthlySmry()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillMonthlySummary";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpBillMnthlySmry(branchdetails corpBillMnthlySmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpBillMnthlySmryObj.ff;
                string todatee = corpBillMnthlySmryObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillMonthlySummary";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpBillMnthlySmryObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpBillMnthlySmryObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = corpBillMnthlySmryObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }



                cond = "select Inv_InsId,Corp.AhMst_pName,Inv_Date,Inv_No,Inv_Netamt,Inv_GrosAmt,Inv_ItemDisc,Inv_DiscAmt,Inv_CurBalAmt,Corp.AhMst_AreaID,Area.Mstr_Desc as Area " + Environment.NewLine
                   + "from Invoice_Mst left join AccountHeads_Mst as Corp on Corp.AhMst_Key=Inv_InsId " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND Inv_PayMode!='Debit/Credit' AND Inv_Status!='-1' " + condtnCorp + condtnArea + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillSummary");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);


                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillMonthSummary.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillMonthSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpMnthDetStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateMonthlyDetailedStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpMnthDetStmnt(branchdetails CorpMnthDetStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpMnthDetStmntObj.ff;
                string todatee = CorpMnthDetStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateMonthlyDetailedStatements";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(CorpMnthDetStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpMnthDetStmntObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = CorpMnthDetStmntObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv.Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv.Inv_InsId!=0";
                }
                if (yrid == 1)
                {
                    nCondtnYrId = "";

                }
                else
                {
                    nCondtnYrId = "AND Inv_YrId=" + yrid + "";
                }

                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName " + Environment.NewLine
                   + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                   + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                   + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                   + "where Inv.Inv_Status!=-1 AND Invl_IsPending=1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_CpyId='" + cmpid + "' AND Inv_PayMode!='Debit/Credit' " + condtnCorp + condtnArea + condtnPayMode + nCondtnYrId;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillDet");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);


                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpDetailStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpDetailStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpDctrStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDoctorStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDctrStmnt(branchdetails CorpDctrStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string DctrName = "";
                double dctrKey = 0;
                dctrKey = CorpDctrStmntObj.dctrKey;
                DctrName = CorpDctrStmntObj.DctrName;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string condtnDoctr = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpDctrStmntObj.ff;
                string todatee = CorpDctrStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateDoctorStatement";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(CorpDctrStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpDctrStmntObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = CorpDctrStmntObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }

                if (dctrKey != 0)
                {
                    condtnDoctr = "AND Inv_DrId='" + dctrKey + "'";
                }
                else
                {
                    condtnDoctr = "";
                }
                if (yrid == 1)
                {
                    nCondtnYrId = "";

                }
                else
                {
                    nCondtnYrId = "AND Inv_YrId=" + yrid + "";
                }

                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName,Inv_DrId,Doc.AhMst_pName as Doctor " + Environment.NewLine
                  + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                  + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                  + "Left Join AccountHeads_Mst Doc WITH (NOLOCK) ON Inv.Inv_DrId=Doc.AhMst_Key" + Environment.NewLine
                  + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                  + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                  + "where Inv.Inv_Status!=-1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND InvItm_YrId ='" + yrid + "' AND Inv_PayMode!='Debit/Credit' and Inv_DrId!=0 " + condtnArea + condtnCorp + condtnDoctr + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorptDoctr");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorprateDoctrStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorprateDoctrStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFcorpAgntRpt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentReports";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult corpAgntRpt(branchdetails corpAgntRpts)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpAgntRpts.ff;
                string todatee = corpAgntRpts.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentReports";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpAgntRpts.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpAgntRpts.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = corpAgntRpts.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }
                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_age,Inv_ageymd,Inv_InsId,Inv_Status,Inv_DrId,Inv_OutDr,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName,Doc.AhMst_pName as Doctor " + Environment.NewLine
                   + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                   + "Left Join AccountHeads_Mst Doc WITH (NOLOCK) ON Inv.Inv_DrId=Doc.AhMst_Key" + Environment.NewLine
                   + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                   + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                   + "where Inv.Inv_Status!=-1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND InvItm_YrId ='" + yrid + "' AND Inv_PayMode!='Debit/Credit' " + condtnCorp + condtnArea + condtnPayMode;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "CorpBillDet");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporatesBillDetails.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorporatesBillDetails.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchDptCorpName(branchdetails crpWithName)
        {
            string corpName = crpWithName.AhMst_pName;
            double areaKey = crpWithName.AreaKey;
            string PayType = "";
            if (crpWithName.PayType != null)
            {
                PayType = crpWithName.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_TERM_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_TERM_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_TERM(corpName, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDptCorpCode(branchdetails crpWithCode)
        {
            double corpKey = crpWithCode.AhMst_Key;
            double areaKey = crpWithCode.AreaKey;
            //string PayType = crpWithCode.PayType;
            string PayType = "";
            if (crpWithCode.PayType != null)
            {
                PayType = crpWithCode.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_KEY_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_KEY(corpKey, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDptCorpPhno(branchdetails crpWithPhNo)
        {
            string corpPhno = crpWithPhNo.AhMst_mobile;
            double areaKey = crpWithPhNo.AreaKey;
            // string PayType = crpWithPhNo.PayType;
            string PayType = "";
            if (crpWithPhNo.PayType != null)
            {
                PayType = crpWithPhNo.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_PHN_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_PHN_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_PHN(corpPhno, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpDptStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDepartmentStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDptStmnt(branchdetails CorpDptStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpDptStmntObj.ff;
                string todatee = CorpDptStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                string nCondition = "";
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateDepartmentStatement";
                string[] dptClctnObj = CorpDptStmntObj.dptClctnObj;
                string[] dptClctnKeyObj = CorpDptStmntObj.dptClctnKeyObj;
                for (int i = 0; i < dptClctnKeyObj.Count(); i++)
                {
                    if (nCondition == "")
                    {
                        nCondition += (dptClctnKeyObj[i]).ToString();
                    }
                    else
                    {
                        nCondition += "," + (dptClctnKeyObj[i]).ToString();
                    }
                }
                //******************************* 

                //string nCondition;
                int corpId = 0;
                int AreaId = 0;

                try
                {
                    corpId = Convert.ToInt32(CorpDptStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    AreaId = Convert.ToInt32(CorpDptStmntObj.AreaKey);
                }
                catch { }
                if (nCondition != "") nCondition = " AND E.Mstr_Key IN(" + nCondition + ")";

                if (corpId > 0)
                {
                    if (nCondition != "")
                    {
                        nCondition = nCondition + " AND Inv_InsId=" + corpId + "";
                    }
                    else
                    {
                        nCondition = " AND Inv_InsId=" + corpId + "";
                    }
                }

                if (AreaId > 0)
                {
                    if (nCondition != "")
                    {
                        nCondition = nCondition + " AND Inv_AreaId=" + AreaId + "";
                    }
                    else
                    {
                        nCondition = " AND Inv_AreaId=" + AreaId + "";
                    }
                }

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate,Ar.Mstr_desc as Area, " +
                                     "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                     "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                     "A.Inv_BrID, A.Inv_Date, A.Inv_time,A.Inv_ItemDisc,A.Inv_name,A.Inv_InsId,A.Inv_DrId,A.Inv_GrosAmt,A.Inv_PayMode,A.Inv_DiscAmt,A.Inv_Netamt,A.Inv_RcvdAmt,A.Inv_BalAmt,A.Inv_CurBalAmt,A.Inv_CurRcvdAmt,Inv_ItemDesc,B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                     "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor,Ah.AhMst_pName " +
                                     "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                     "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                      "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                     "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
                                     "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key LEFT JOIN Masters Ar ON AccountHeads_Mst_3.AhMst_AreaID =Ar.Mstr_key " +
                                     " WHERE Inv_PayMode!='Debit/Credit' AND Inv_InsId>0 AND Inv_Status!=-1 and A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                     "AND A.Inv_CpyId = " + CompanyId + " AND A.Inv_YrId = " + YearId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "dept");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();


                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorDepartmentwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorDepartmentwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchTstWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchTstWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpTstPrfmncAreaWise()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateTestPerfomanceAreaWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpTstPrfmncAreaWise(branchdetails CorpTstAreaWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bDoctr = 0;
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string tstName = "";
                double tstKey = 0;
                tstKey = CorpTstAreaWiseObj.TestKey;
                tstName = CorpTstAreaWiseObj.TestName;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string condtnDoctr = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpTstAreaWiseObj.ff;
                string todatee = CorpTstAreaWiseObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateTestPerfomanceAreaWise";
                string PayType = "";
                if (CorpTstAreaWiseObj.PayType != null)
                {
                    PayType = CorpTstAreaWiseObj.PayType;
                }

                //*******************************
                try
                {
                    bDoctr = Convert.ToInt32(CorpTstAreaWiseObj.TestKey);
                }
                catch { }
                try
                {
                    bCorpId = Convert.ToInt32(CorpTstAreaWiseObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpTstAreaWiseObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = PayType;
                }
                catch { }
                //try
                //{
                //    frmdate = fromdate.ToString("yyyy-MM-dd");
                //}
                //catch { }
                //try
                //{
                //    toDate = todate.ToString("yyyy-MM-dd");
                //}
                //catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Accnt.AhMst_AreaID='" + CorpTstAreaWiseObj.AreaKey + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Accnt.AhMst_PayType='" + CorpTstAreaWiseObj.PayType + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + CorpTstAreaWiseObj.AhMst_Key + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }

                if (bDoctr != 0)
                {
                    condtnDoctr = "AND invdet.InvItm_TstId='" + CorpTstAreaWiseObj.TestKey + "'";
                }
                else
                {
                    condtnDoctr = "";
                }
                //******************************* 
                cond = "SELECT Inv_No,Inv_Date,Inv_Name,Inv_NetAmt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc from Invoice_Mst inv" + Environment.NewLine
    + "left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key" + Environment.NewLine
    + "left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key" + Environment.NewLine
    + "left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " + Environment.NewLine
    + "left join Masters Mst2 on Accnt.AhMst_AreaId=Mst2.Mstr_Key" + Environment.NewLine
    + "WHERE convert(date,inv.Inv_Date) >= '" + frmdate + "' AND convert(date,inv.Inv_Date) <= '" + toDate + "' " + Environment.NewLine
    + " AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit'  " + condtnArea + condtnCorp + condtnPayMode + condtnDoctr + " ORDER BY TstMst_name";


                //cond = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc from Invoice_Mst inv" + Environment.NewLine
                //    + "left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key" + Environment.NewLine
                //    + "left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key" + Environment.NewLine                    
                //    + "left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " + Environment.NewLine
                //    + "left join Masters Mst2 on Accnt.AhMst_AreaId=Mst2.Mstr_Key" + Environment.NewLine
                //    + "WHERE convert(date,inv.Inv_Date) >= '" + frmdate + "' AND convert(date,inv.Inv_Date) <= '" + toDate + "' " + Environment.NewLine
                //    + " AND inv.Inv_YrId = " + cPublic.YearId + " AND inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit'  " + condtnArea+condtnCorp+condtnPayMode +condtnDoctr+ " group by TstMst_Key,TstMst_name,mst1.Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc  ORDER BY TstMst_name";




                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpTestPerfm");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpTestPerfrmceArea.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpTestPerfrmceArea.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpBillDet()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillDetailed";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpBillDet(branchdetails corpBillDetRpts)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                int CorPorateId = 0;
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                int billDetChk = 0;
                billDetChk = corpBillDetRpts.billDetCheck;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpBillDetRpts.ff;
                string todatee = corpBillDetRpts.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillDetailed";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpBillDetRpts.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpBillDetRpts.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = (corpBillDetRpts.PayType).ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }
                try
                {
                    CorPorateId = Convert.ToInt32(bCorpId);
                }
                catch { }
                //******************************* 
                cond = "Select Inv.*,InvDet.*,AccH.AhMst_AreaID,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                                             + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                             + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                                             + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                                             + "left join Masters as Area on Area.Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                                             + "Where Inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit' And convert(Date,Inv_Date,0)>='" + frmdate + "' " + Environment.NewLine
                                             + " AND convert(Date,Inv_Date,0)<='" + toDate + "'" + Environment.NewLine

                                             + " AND Inv_YrId =" + YearId + " AND Inv_CpyId=" + CompanyId + "" + Environment.NewLine
                                             + " AND InvItm_YrId =" + YearId + condtnCorp + condtnArea + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillSummary");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                if (billDetChk == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillDetAreaTwo.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillDetAreaTwo.xsd");
                }
                else
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillDetArea.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillDetArea.xsd");
                }


                //******************************* 



                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchAgentWithName(string term)
        {
            try
            {
                List<Stproc_SEARCH_AGENT_WITH_NAME_Result> t = new List<Stproc_SEARCH_AGENT_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_AGENT_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchAgentWithKey(string term)
        {
            try
            {
                List<Stproc_SEARCH_AGENT_WITH_KEY_Result> t = new List<Stproc_SEARCH_AGENT_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_AGENT_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpWithAgntName(branchdetails crpWithagntName)
        {
            double agntKey = 0;
            string corpTerm = "";
            try
            {

                if (crpWithagntName.AgntKey != 0)
                {
                    agntKey = crpWithagntName.AgntKey;
                }
                //agntKey = crpWithagntName.AgntKey;
                corpTerm = crpWithagntName.AhMst_pName;
                List<Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME(corpTerm, agntKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpWithAgntKey(branchdetails crpWithagntKey)
        {
            double agntKey = 0;
            double corpKey = 0;
            try
            {

                if (crpWithagntKey.AgntKey != 0)
                {
                    agntKey = crpWithagntKey.AgntKey;
                }
                //agntKey = crpWithagntName.AgntKey;
                corpKey = crpWithagntKey.AhMst_Key;
                List<Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY(corpKey, agntKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpAgntStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpAgntStmnt(branchdetails agntCorpObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = agntCorpObj.ff;
                string todatee = agntCorpObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentStatements";
                try
                {
                    bAgentId = Convert.ToInt32(agntCorpObj.AgntKey);
                }
                catch { }
                //if (bAgentId == 0)
                //{
                //    MessageBox.Show("Please Select Agent!", cPublic.ProjectName);
                //    txtAgent.Focus();
                //    return;
                //}

                try
                {
                    bCorpId = Convert.ToInt32(agntCorpObj.AhMst_Key);
                }
                catch { }
                if (bCorpId != 0)
                {
                    condCorp = "AND SetCorp_CorpId='" + bCorpId + "'";
                }
                else
                {
                    condCorp = "";
                }

                //******************************* 
                cond = "SELECT Inv_No,Inv_Name,Inv_Netamt,Inv_Date,Inv_RcvdAmt,Inv_DiscAmt,Inv_GrosAmt,Inv_ItemDisc,Inv_InsId,SetCorp_StaffId,Inv_BalAmt,Inv_CurBalAmt,Inv_PayMode,Corp.AhMst_pName as CorpName,Agent.Ahmst_pName as AgentName FROM INVOICE_MST WITH(NOLOCK) " + Environment.NewLine
                    + "LEFT JOIN SetCorp_Staff WITH(NOLOCK)ON SetCorp_CorpId = Inv_InsId " + Environment.NewLine
                    + "LEFT JOIN AccountHeads_Mst AS Corp WITH(NOLOCK) ON Corp.AhMst_Key = SetCorp_CorpId" + Environment.NewLine
                    + "LEFT JOIN AccountHeads_Mst AS Agent WITH(NOLOCK) ON Agent.AhMst_Key = SetCorp_StaffId" + Environment.NewLine
                    + "WHERE Inv_PayMode !='Debit/Credit' and Inv_Status != -1 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + " " + Environment.NewLine
                    + "AND convert(date,Inv_Date) >='" + fromdate + "' AND convert(date,Inv_Date) <='" + todate + "' AND SetCorp_StaffId ='" + bAgentId + "'" + condCorp;

                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = cond;
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "AgentCorpDet");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AgentCorpStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_AgentCorpStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult agentCorpStmntView(branchdetails corpagntStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {

                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************************************
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";

                //*********************************************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpagntStmntObj.ff;
                string todatee = corpagntStmntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = corpagntStmntObj.AhMst_pName;
                double Corp_Key = corpagntStmntObj.AhMst_Key;
                double AgntKey = corpagntStmntObj.AgntKey;
                //******************
                try
                {
                    bAgentId = Convert.ToInt32(AgntKey);
                }
                catch { }


                try
                {
                    bCorpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (bCorpId != 0)
                {
                    condCorp = "AND SetCorp_CorpId='" + bCorpId + "'";
                }
                else
                {
                    condCorp = "";
                }

                cond = "SELECT Inv_No,Inv_Name,Inv_Netamt,Inv_RcvdAmt,Inv_Date,Inv_DiscAmt,Inv_GrosAmt,Inv_ItemDisc,Inv_InsId,SetCorp_StaffId,Inv_BalAmt,Inv_CurBalAmt,Inv_PayMode,Corp.AhMst_pName as CorpName,Agent.Ahmst_pName as AgentName FROM INVOICE_MST WITH(NOLOCK) " + Environment.NewLine
                        + "LEFT JOIN SetCorp_Staff WITH(NOLOCK)ON SetCorp_CorpId = Inv_InsId " + Environment.NewLine
                        + "LEFT JOIN AccountHeads_Mst AS Corp WITH(NOLOCK) ON Corp.AhMst_Key = SetCorp_CorpId" + Environment.NewLine
                        + "LEFT JOIN AccountHeads_Mst AS Agent WITH(NOLOCK) ON Agent.AhMst_Key = SetCorp_StaffId" + Environment.NewLine
                        + "WHERE Inv_PayMode !='Debit/Credit' and Inv_Status != -1 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + " " + Environment.NewLine
                        + "AND convert(date,Inv_Date) >='" + fromdate + "' AND convert(date,Inv_Date) <='" + todate + "' AND SetCorp_StaffId ='" + bAgentId + "'" + condCorp + "ORDER BY Inv_No ";

                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = cond;
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                int curRow = 0;
                if (dt.Rows.Count > 0)
                {
                    //grdCorporate.Rows.Add(dt.Rows.Count);
                    foreach (DataRow dr in dt.Rows)
                    {
                        double netamt = 0;
                        double curBal = 0;
                        double curRcvd = 0;
                        try
                        {
                            netamt = Convert.ToDouble(dr["Inv_Netamt"].ToString());
                        }
                        catch { }
                        try
                        {
                            curBal = -(Convert.ToDouble(dr["Inv_CurBalAmt"].ToString()));
                        }
                        catch { }

                        curRcvd = netamt - curBal;
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy"),
                            Inv_Netamt = dr["Inv_Netamt"].ToString(),
                            AhMst_pName = dr["CorpName"].ToString(),
                            Inv_CurRcvd = curRcvd.ToString(),
                            Inv_CurBalAmt = dr["Inv_CurBalAmt"].ToString()

                        };
                        cls.Add(cs1);
                        curRow = curRow + 1;
                    }
                }
                //*********************
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult CrdtLmtStmntView(branchdetails crLmtStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double CrLimit = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************************************
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";

                //*********************************************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = crLmtStmntObj.ff;
                string todatee = crLmtStmntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = crLmtStmntObj.AhMst_pName;
                double Corp_Key = crLmtStmntObj.AhMst_Key;
                //**************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "select AhMst_pName,AhMst_Key,AhMst_CRDays FROM AccountHeads_Mst WHERE AhMst_Type='AccHd' and AhMst_IsActive=1 and AhMst_Key='" + Corp_Key + "'";
                SqlDataAdapter sda = new SqlDataAdapter(cmd0);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    //grdCorporate.Rows.Add(dt.Rows.Count);
                    foreach (DataRow dr in dt1.Rows)
                    {
                        try
                        {
                            CrLimit = Convert.ToDouble(dr["AhMst_CRDays"].ToString());
                        }
                        catch { }
                    }
                }
                //**************************************************
                int corpId = 0;
                string nCondtion = "";
                try
                {
                    corpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (corpId > 0)
                {
                    nCondtion = "and Inv_InsId=" + corpId;
                }
                else
                {
                    nCondtion = "";
                }

                if ((corpId > 0) && (CrLimit == 0))
                {
                    //MessageBox.Show("Credit Limit Not Found!", cPublic.ProjectName);
                    //txtCorporate.Focus();
                    //return;
                    string errMsg = "Credit Limit Not Found!";
                    return Json(new { Result = "OK", Record = errMsg });
                }

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select [Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode FROM [dbo].[Invoice_Mst] WITH (NOLOCK) LEFT JOIN [dbo].[AccountHeads_Mst] WITH (NOLOCK) ON Inv_InsId=AhMst_Key WHERE Inv_PayMode!='Debit/Credit' and Inv_Status!=-1 and Invl_isPending=1 and convert(Date,Inv_Date)>='" + fromdate + "'and  convert(Date,Inv_Date) <='" + todate + "' and [Inv_YrId]=" + YearId + " and [Inv_CpyId]=" + CompanyId + " and AhMst_CRDays>0" + nCondtion + "  order by corp,Inv_Date,Inv_No";
                sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows.Count == 0)
                {
                    return Json(new
                    {
                        Result = "ERROR"

                    });
                }

                DateTime _invDate;
                int CrDays = 0;
                int CrCount = 0;
                int grdSlno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    _invDate = DateTime.Now;
                    CrDays = 0;
                    CrCount = 0;
                    double CurBal = 0;
                    double curRcvd = 0;
                    double netAmount = 0;

                    try
                    {
                        CrDays = Convert.ToInt32(dr["AhMst_CRDays"]);
                    }
                    catch { }
                    try
                    {
                        _invDate = Convert.ToDateTime(dr["Inv_Date"]);
                    }
                    catch { }

                    CrCount = Convert.ToInt32((DateTime.Now - _invDate).TotalDays);

                    if (CrCount > CrDays)
                    {
                        try
                        {
                            netAmount = Convert.ToDouble(dr["Inv_Netamt"]);
                        }
                        catch { }
                        try
                        {
                            CurBal = -(Convert.ToDouble(dr["Inv_CurBalAmt"]));
                        }
                        catch { }
                        curRcvd = netAmount - CurBal;
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_Date = _invDate.ToString("dd-MM-yyyy"),
                            Inv_Netamt = dr["Inv_Netamt"].ToString(),
                            AhMst_pName = dr["corp"].ToString(),
                            Inv_RcvdAmt = curRcvd.ToString(),
                            Inv_CurBalAmt = dr["Inv_CurBalAmt"].ToString(),
                            CrDayLimit = dr["AhMst_CRDays"].ToString()

                        };
                        cls.Add(cs1);
                        grdSlno = grdSlno + 1;
                    }
                }

                //*********************
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult CrdtLmtStmnt(branchdetails crLmtStmntPrntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = crLmtStmntPrntObj.ff;
                string todatee = crLmtStmntPrntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = crLmtStmntPrntObj.AhMst_pName;
                double Corp_Key = crLmtStmntPrntObj.AhMst_Key;
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CreditLimitStatement";
                //**********************************************************
                int corpId = 0;
                string nCondtion = "";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select [Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode FROM [dbo].[Invoice_Mst] WITH (NOLOCK) LEFT JOIN [dbo].[AccountHeads_Mst] WITH (NOLOCK) ON Inv_InsId=AhMst_Key WHERE Inv_PayMode!='Debit/Credit' and Inv_Status!=-1 and Invl_isPending=1 and convert(Date,Inv_Date)>='" + fromdate + "'and  convert(Date,Inv_Date) <='" + todate + "' and [Inv_YrId]=" + YearId + " and [Inv_CpyId]=" + CompanyId + " and AhMst_CRDays>0" + nCondtion + "  order by corp,Inv_Date,Inv_No";
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //if (dt1.Rows.Count > 0)
                //{
                if (dt.Rows.Count == 0)
                {
                    // string errMsg = "Credit Limit Not Found!";
                    //return Json(new { Result = "OK", Record = errMsg });
                    return Json(new { Result = "ERROR" });
                }

                try
                {
                    corpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (corpId > 0)
                {
                    nCondtion = "and Inv_InsId=" + corpId;
                }
                else
                {
                    nCondtion = "";
                }
                DataTable corpLimit = new DataTable();
                corpLimit.TableName = "CorpLimit";
                corpLimit.Columns.Add("InvDate", typeof(DateTime));
                corpLimit.Columns.Add("InvName", typeof(string));
                corpLimit.Columns.Add("Corporate", typeof(string));
                corpLimit.Columns.Add("CorpId", typeof(int));
                corpLimit.Columns.Add("Paymode", typeof(string));
                corpLimit.Columns.Add("InvNo", typeof(int));
                corpLimit.Columns.Add("NetAmt", typeof(double));
                corpLimit.Columns.Add("DiscAmt", typeof(double));
                corpLimit.Columns.Add("GrosAmt", typeof(double));
                corpLimit.Columns.Add("CurRcvd", typeof(double));
                corpLimit.Columns.Add("CurBal", typeof(double));
                corpLimit.Columns.Add("ExceedDays", typeof(int));
                corpLimit.Columns.Add("CrDays", typeof(int));

                DateTime nInvDate = DateTime.Now;
                string nName = "";
                string nCorpNam = "";
                int nInsId = 0;
                string nPaymde = "";
                int nInvNo = 0;
                double nNetamt = 0;
                double nDisc = 0;
                double nGros = 0;
                double nCurRcvd = 0;
                double nCurBal = 0;
                int nExcdDays = 0;
                int nCrDay = 0;
                int CrCount = 0;

                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                int i = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    nInvDate = DateTime.Now;
                    CrCount = 0;
                    nName = "";
                    double curRcvd = 0;
                    nCorpNam = "";
                    nInsId = 0;
                    nPaymde = "";
                    nInvNo = 0;
                    nNetamt = 0;
                    nDisc = 0;
                    nGros = 0;
                    nCurRcvd = 0;
                    nCurBal = 0;
                    nExcdDays = 0;
                    nCrDay = 0;

                    corpLimit.Rows.Add();
                    try
                    {
                        nInvDate = Convert.ToDateTime(dr["Inv_Date"]);
                    }
                    catch { }

                    CrCount = Convert.ToInt32((DateTime.Now - nInvDate).TotalDays);
                    try
                    {
                        //dr["invDate"].ToString()
                        nInvDate = Convert.ToDateTime(dr["invDate"].ToString());
                    }
                    catch { }
                    //dr["invDate"].ToString()
                    nName = dr["Inv_name"].ToString();
                    nCorpNam = dr["AhMst_pName"].ToString();

                    try
                    {
                        nInsId = Convert.ToInt32(dr["Inv_InsId"].ToString());
                    }
                    catch { }
                    nPaymde = dr["Inv_PayMode"].ToString();
                    try
                    {
                        nInvNo = Convert.ToInt32(dr["Inv_No"].ToString());
                    }
                    catch { }

                    try
                    {
                        nNetamt = Convert.ToDouble(dr["Inv_Netamt"].ToString());
                    }
                    catch { }
                    try
                    {
                        nGros = Convert.ToDouble(dr["Inv_GrosAmt"].ToString());
                    }
                    catch { }
                    try
                    {
                        nDisc = Convert.ToDouble(dr["Inv_DiscAmt"].ToString());
                    }
                    catch { }
                    //[Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],
                    //[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode
                    try
                    {
                        nCurBal = Convert.ToDouble(dr["Inv_CurBalAmt"].ToString());
                    }
                    catch { }
                    curRcvd = nNetamt - nCurBal;
                    try
                    {
                        nCurRcvd = Convert.ToDouble(curRcvd);
                    }
                    catch { }

                    try
                    {
                        nExcdDays = Convert.ToInt32(CrCount);
                    }
                    catch { }
                    try
                    {
                        nCrDay = Convert.ToInt32(dr["AhMst_CRDays"].ToString());
                    }
                    catch { }

                    // To Report Fields
                    corpLimit.Rows[i]["InvDate"] = nInvDate;
                    corpLimit.Rows[i]["InvName"] = nName;
                    corpLimit.Rows[i]["Corporate"] = nCorpNam;
                    corpLimit.Rows[i]["CorpId"] = nInsId;
                    corpLimit.Rows[i]["Paymode"] = nPaymde;
                    corpLimit.Rows[i]["InvNo"] = nInvNo;
                    corpLimit.Rows[i]["NetAmt"] = nNetamt;
                    corpLimit.Rows[i]["DiscAmt"] = nDisc;
                    corpLimit.Rows[i]["GrosAmt"] = nGros;
                    corpLimit.Rows[i]["CurRcvd"] = nCurRcvd;
                    corpLimit.Rows[i]["CurBal"] = nCurBal;
                    corpLimit.Rows[i]["ExceedDays"] = nExcdDays;
                    corpLimit.Rows[i]["CrDays"] = nCrDay;
                    i++;

                }


                ds.Tables.Add(corpLimit);


                cmd.Connection = sqlcon;
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt1 = new DataTable();
                dt1.Columns.Add("DateFrom", typeof(string));
                dt1.Columns.Add("DateTo", typeof(string));
                dt1.Rows.Add();
                dt1.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt1.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //**********************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditLimitStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CreditLimitStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFPendngRegister()
        {
            if (brKey > 0)
            {
                if (usrKey > 0)
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegister";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
                else
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegisterAllUsr";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }

            }
            else
            {
                if (usrKey > 0)
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegister";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
                else
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegisterAllUsr";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
            }
        }
        public JsonResult PendngRegister(branchdetails pndRegObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = pndRegObj.ff;
                string todatee = pndRegObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double AhMst_Key = 0;
                brnchName = pndRegObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";usrdtls
                List<branchdetails> u = Session["usrdtls"] as List<branchdetails>;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = pndRegObj.BrMst_Name;
                string UsrName = pndRegObj.User_Name;

                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                string nTblOut = "";
                string nRptName = "";
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                foreach (branchdetails usrs in u)
                {
                    if (usrs.AhMst_pName == UsrName)
                    {
                        AhMst_Key = usrs.AhMst_Key;
                    }

                }
                nTblOut = "PendingReg";
                //nRptName = "rpt_PendingRegister.rpt";
                Head1 = "PENDING REGISTER";
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (AhMst_Key > 0)
                {
                    nCondition = nCondition + " AND Inv_UsrId=" + AhMst_Key + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                //if (BrmstKey > 0)
                //{
                //    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                //}
                if (BrmstKey > 0)
                {
                    if (AhMst_Key > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegister";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegisterAllUsr";
                        brKey = 0;
                    }

                }
                else
                {
                    if (AhMst_Key > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegister";
                        brKey = 0;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegisterAllUsr";
                        brKey = 0;
                    }

                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,BrMst_Name " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key LEFT JOIN Baranches_Mst On Inv_BrId=BrMst_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,BrMst_Name " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key LEFT JOIN Baranches_Mst On Inv_BrId=BrMst_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PendingRegister.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PendingRegister.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult pndReg2View(branchdetails pndReg2Obj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = pndReg2Obj.ff;
                string todatee = pndReg2Obj.tt;
                string Usr_Name = "";
                double Usr_EmpId = 0;
                Usr_Name = pndReg2Obj.User_Name;
                Usr_EmpId = pndReg2Obj.Usr_EmpId;
                string nCondition = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = pndReg2Obj.rowCount;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                string YearTemp = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*****************************************************************************************
                DateTime dateto = todate;
                DateTime datefrom = fromdate;
                DateTime dtp_from = new DateTime();
                dtp_from = fromdate;
                String days = (dateto - datefrom).TotalDays.ToString();
                double y = Convert.ToDouble(days);
                int a = 0;
                a = Convert.ToInt32(Math.Round(y)) + 1;
                int tmprow = 0;
                for (int i = 1; i <= a; i++)
                {

                    SqlCommand sqlcmd01 = new SqlCommand();
                    SqlCommand sqlcmd02 = new SqlCommand();
                    sqlcmd01.Connection = sqlcon;
                    sqlcmd01.CommandType = CommandType.Text;
                    sqlcmd02.Connection = sqlcon;
                    sqlcmd02.CommandType = CommandType.Text;

                    // sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance FROM Invoice_Mst WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt";
                    if (Usr_EmpId >= 0)
                    {
                        if (Usr_EmpId >= 0)
                        {
                            nCondition = nCondition + " AND Inv_CltnID=" + Usr_EmpId + "";
                        }
                    }

                    if (Usr_EmpId == 0)
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";

                    }

                    else
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "'  AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                        //  sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + cmbxUser.SelectedValue + "'  AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                    }
                    SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd01);
                    DataSet ds0 = new DataSet();
                    DataTable dt = new DataTable();
                    sd0.Fill(dt);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            try
                            {
                                DateTemp = Convert.ToDateTime(dr["InvDate"]);
                            }
                            catch { }
                            YearTemp = DateTemp.ToString("dd-MMM-yyyy");

                            collectionDetails cs1 = new collectionDetails()
                            {
                                Inv_Date = YearTemp,
                                Inv_User = dr["Inv_User"].ToString(),
                                Inv_No = dr["labno"].ToString(),
                                Inv_name = dr["InvName"].ToString(),
                                Inv_Netamt = dr["NetAmt"].ToString(),
                                balance = Convert.ToDouble(dr["Balance"]),
                                ReceivedAmt = dr["Received"].ToString(),
                                Inv_RcvdAmt = dr["Inv_RcvdAmt"].ToString(),
                                PendCollAmt = dr["PendCollAmt"].ToString()
                            };
                            cls.Add(cs1);
                            //************************************************************************
                            tmprow += 1;
                        }
                    }
                    dtp_from = dtp_from.AddDays(+1);
                }
                return Json(new { Result = "OK", Record = cls });
                ////************************************
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFPendngRegPrint()
        {

            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult PendngRegPrint(branchdetails pndReg2PrntObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                DataTable DailyColl = new DataTable();
                DailyColl.TableName = "Collection Pending";
                DailyColl.Columns.Add("InvDate", typeof(DateTime));
                DailyColl.Columns.Add("User", typeof(string));
                DailyColl.Columns.Add("LabNo", typeof(int));
                DailyColl.Columns.Add("InvName", typeof(string));
                DailyColl.Columns.Add("NetAmount", typeof(float));
                DailyColl.Columns.Add("Inv_RcvdAmt", typeof(float));
                DailyColl.Columns.Add("PendCollAmt", typeof(float));
                DailyColl.Columns.Add("ReceivedAmt", typeof(float));
                DailyColl.Columns.Add("BalanceAmt", typeof(float));
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Nfile_name = "";
                string fromdatee = pndReg2PrntObj.ff;
                string todatee = pndReg2PrntObj.tt;
                string Usr_Name = "";
                double Usr_EmpId = 0;
                Usr_Name = pndReg2PrntObj.User_Name;
                Usr_EmpId = pndReg2PrntObj.Usr_EmpId;
                string nCondition = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = pndReg2PrntObj.rowCount;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                string YearTemp = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*****************************************************************************************
                DateTime dateto = todate;
                DateTime datefrom = fromdate;
                DateTime dtp_from = new DateTime();
                dtp_from = fromdate;
                String days = (dateto - datefrom).TotalDays.ToString();
                double y = Convert.ToDouble(days);
                int a = 0;
                a = Convert.ToInt32(Math.Round(y)) + 1;
                int tmprow = 0;
                for (int i = 1; i <= a; i++)
                {

                    SqlCommand sqlcmd01 = new SqlCommand();
                    SqlCommand sqlcmd02 = new SqlCommand();
                    sqlcmd01.Connection = sqlcon;
                    sqlcmd01.CommandType = CommandType.Text;
                    sqlcmd02.Connection = sqlcon;
                    sqlcmd02.CommandType = CommandType.Text;
                    DailyColl.Rows.Add();
                    // sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance FROM Invoice_Mst WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt";
                    // "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2"
                    if (Usr_EmpId >= 0)
                    {
                        nCondition = nCondition + " AND Inv_CltnID=" + Usr_EmpId + "";
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
                        usrKey = (int)Usr_EmpId;
                        usrName = Usr_Name;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
                        usrKey = 0;
                        usrName = "";
                    }

                    if (Usr_EmpId == 0)
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";

                    }

                    else
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "'  AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                        //  sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + cmbxUser.SelectedValue + "'  AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                    }
                    SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd01);
                    DataSet ds0 = new DataSet();
                    DataTable dt1 = new DataTable();
                    sd0.Fill(dt1);


                    if (dt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt1.Rows)
                        {
                            try
                            {
                                DateTemp = Convert.ToDateTime(dr["InvDate"]);
                            }
                            catch { }
                            YearTemp = DateTemp.ToString("dd-MMM-yyyy");

                            collectionDetails cs1 = new collectionDetails()
                            {
                                Inv_Date = YearTemp,
                                Inv_User = dr["Inv_User"].ToString(),
                                Inv_No = dr["labno"].ToString(),
                                Inv_name = dr["InvName"].ToString(),
                                Inv_Netamt = dr["NetAmt"].ToString(),
                                balance = Convert.ToDouble(dr["Balance"]),
                                ReceivedAmt = dr["Received"].ToString(),
                                Inv_RcvdAmt = dr["Inv_RcvdAmt"].ToString(),
                                PendCollAmt = dr["PendCollAmt"].ToString()
                            };
                            cls.Add(cs1);
                            //************************************************************************
                            tmprow += 1;
                        }
                    }
                    dtp_from = dtp_from.AddDays(+1);
                }
                int nDtRow = 0;
                DailyColl.Rows.Clear();
                foreach (collectionDetails item in cls)
                {
                    DateTime InvDate = DateTime.Now;
                    string User = "";
                    int LabNo = 0;
                    string name = "";
                    double Netamt = 0;
                    double invRcvd = 0;
                    double pendng = 0;
                    double Recvdamt = 0;
                    double Balance = 0;


                    DailyColl.Rows.Add();
                    //*******************************************************
                    try
                    {
                        InvDate = Convert.ToDateTime(item.Inv_Date);

                    }
                    catch { }
                    try
                    {
                        User = item.Inv_User;

                    }
                    catch { }
                    try
                    {
                        LabNo = Convert.ToInt32(item.Inv_No);

                    }
                    catch { }
                    try
                    {
                        name = item.Inv_name;

                    }
                    catch { }
                    try
                    {
                        Netamt = Convert.ToDouble(item.Inv_Netamt);
                    }
                    catch { }
                    try
                    {
                        invRcvd = Convert.ToDouble(item.Inv_RcvdAmt);
                    }
                    catch { }
                    try
                    {
                        pendng = Convert.ToDouble(item.PendCollAmt);

                    }
                    catch { }
                    try
                    {
                        Recvdamt = Convert.ToDouble(item.ReceivedAmt);

                    }
                    catch { }
                    try
                    {
                        Balance = Convert.ToDouble(item.balance);

                    }
                    catch { }

                    //*************************************************************
                    DailyColl.Rows[nDtRow]["InvDate"] = InvDate;
                    DailyColl.Rows[nDtRow]["User"] = User;
                    DailyColl.Rows[nDtRow]["LabNo"] = LabNo;
                    DailyColl.Rows[nDtRow]["InvName"] = name;
                    DailyColl.Rows[nDtRow]["NetAmount"] = Netamt;
                    DailyColl.Rows[nDtRow]["Inv_RcvdAmt"] = invRcvd;
                    DailyColl.Rows[nDtRow]["PendCollAmt"] = pendng;
                    DailyColl.Rows[nDtRow]["ReceivedAmt"] = Recvdamt;
                    DailyColl.Rows[nDtRow]["BalanceAmt"] = Balance;

                    nDtRow += 1;
                }
                string head1 = "";
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataSet ds1 = new DataSet();
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sda = new SqlDataAdapter(cmd0);
                sda.Fill(ds1, "Company_Mst");
                ds1.Tables.Add(DailyColl);
                string filepath = "";
                ReportDocument reportDocument = new ReportDocument();
                head1 = "FROM  " + fromdate.ToString("dd/MM/yyy") + "  To  " + todate.ToString("dd/MM/yyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = head1;
                ds1.Tables.Add(dt);
                //************************************************************************************************
                reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Pendgregstr.rpt");
                ds1.WriteXmlSchema(Reportfilepaths + "rpt_Pendgregstr.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds1);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error--" + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFPndClctnReg()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingCollectionRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingCollectionRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult PndClctnReg(branchdetails crCardWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = crCardWiseObj.ff;
                string todatee = crCardWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string nTblOut = "";
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = crCardWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";
                nTblOut = "PendingColtn";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = crCardWiseObj.BrMst_Name;
                Head1 = "PENDING COLLECTION REGISTER";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingCollectionRegister";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingCollectionRegister";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                            "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                            "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                            "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                            "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                            "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                            "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                            "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                            "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                           "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                           "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                           "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                           "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                           "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                           "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate   " +
                           "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                           "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + nCondition;

                }


                //         //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, DA.Common.myConnectionVM);
                //sDa.Fill(dtDetails);
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PendingCollectionReg.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PendingCollectionReg.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult srchDocWithname(string term)
        {

            try
            {
                List<Stproc_SEARCH_DOCTR_WITH_NAME_Result> t = new List<Stproc_SEARCH_DOCTR_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_DOCTR_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult srchDocWithKey(string term)
        {

            try
            {
                List<Stproc_SRCH_DCTR_WITH_KEY_Result> t = new List<Stproc_SRCH_DCTR_WITH_KEY_Result>();
                t = db.Stproc_SRCH_DCTR_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult srchDocWithCode(string term)
        {

            try
            {
                List<Stproc_SRCH_DCTR_WITH_KEY_Result> t = new List<Stproc_SRCH_DCTR_WITH_KEY_Result>();
                t = db.Stproc_SRCH_DCTR_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFDoctorWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DoctorWiseColln(branchdetails dcWsClcnObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int AhMst_Key = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string AhMst_DrCode = "";
                string AhMst_pName = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                double BrMstKey = 0;

                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;

                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                string sCondition = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd0 = new SqlCommand();
                SqlCommand cmd1 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                BrMstKey = dcWsClcnObj.BrMstKey;
                string fromdatee = dcWsClcnObj.ff;
                string todatee = dcWsClcnObj.tt;
                string BrmstName = "";
                if (dcWsClcnObj.BrMst_Name != null)
                {
                    BrmstName = dcWsClcnObj.BrMst_Name;
                }
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorWiseCollection";

                try
                {
                    AhMst_Key = Convert.ToInt32(dcWsClcnObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    AhMst_DrCode = dcWsClcnObj.AhMst_DrCode;
                }
                catch { }
                try
                {
                    AhMst_pName = (dcWsClcnObj.AhMst_pName).ToString();
                }
                catch { }
                if (BrMstKey > 0)
                {

                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrMstKey;

                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                    brKey = 0;

                }
                //*******************BrMstKey*********************************
                if (AhMst_Key > 0)
                {
                    sCondition = "AhMst_Type='Doctor' AND  AhMst_IsActive=1 AND Ahmst_Key in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + AhMst_Key + ") ";
                }
                else
                {
                    sCondition = "AhMst_Type='Doctor' AND  AhMst_IsActive=1";
                }
                if (BrMstKey > 0)
                {

                    cmd0.CommandText = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt,A.Inv_CpyId," +
                           "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,c.AhMst_pName AS corporate,BrMst_Name,A.Inv_BrId " +
                           "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                          " left join dbo.AccountHeads_Mst c WITH(NOLOCK) ON A.Inv_InsId = c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and A.Inv_YrId = " + YearId + "" +
                          "LEFT JOIN dbo.Baranches_Mst WITH(NOLOCK) ON A.Inv_BrId=BrMst_Key " +
                           "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND A.Inv_Status <> - 1 AND A.Inv_BrId = " + BrMstKey + " AND A.Inv_YrId = " + YearId + " AND Inv_DrId=" + AhMst_Key + " ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";


                    cmd1.CommandText = "SELECT InvDet.*,c.AHMST_PNAME AS CORPORATE FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN AccountHeads_Mst C ON Inv_InsId = c.AhMst_Key  " +
                                       " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_BrId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;





                }
                else
                {

                    cmd0.CommandText = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt,A.Inv_CpyId," +
                                    "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,c.AHMST_PNAME AS CORPORATE,[BrMst_Name],A.Inv_BrId " +
                                    "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                                    "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' LEFT JOIN dbo.AccountHeads_Mst C ON Inv_InsId =c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and A.Inv_YrId = " + YearId + "" +
                                    "LEFT JOIN dbo.Baranches_Mst WITH(NOLOCK)ON A.Inv_BrId = BrMst_Key " +
                                    "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                      "AND A.Inv_Status <> - 1  AND A.Inv_YrId = " + YearId + " AND Inv_DrId=" + AhMst_Key + " ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";


                    cmd1.CommandText = "SELECT InvDet.*,c.AHMST_PNAME AS CORPORATE FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN dbo.AccountHeads_Mst C ON Inv.Inv_InsId =c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and Inv.Inv_YrId = " + YearId + "  " +
                                   " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;



                }
                sd0.Fill(ds0, "dtDetails");
                if (BrMstKey > 0)
                {

                    cmd0.CommandText = "SELECT InvDet.*,Tst.TstMst_name FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN  Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key" +
                                       " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;



                }
                else
                {
                    cmd0.CommandText = "SELECT InvDet.*,Tst.TstMst_name FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN  Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key " +
                                   " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;
                }
                sd0.Fill(ds0, "dtInvTestDet");
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");


                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Columns.Add("CheqIssue", typeof(float));
                dt.Columns.Add("CheqRec", typeof(float));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = BrmstName.Trim();
                dt.Rows[0]["Reporthead"] = "";

                dt.Rows[0]["CheqIssue"] = 0;
                dt.Rows[0]["CheqRec"] = 0;


                ds0.Tables.Add(dt);
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DrwiseInvoices2.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DrwiseInvoices2.xsd");
                //******************************* 
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFDoctorPerfomance()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DoctorPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DoctorPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DoctorPerfomance(branchdetails dcPfmncObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dcPfmncObj.ff;
                string todatee = dcPfmncObj.tt;
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double AhMst_Key = 0;
                brnchName = dcPfmncObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";usrdtls
                List<branchdetails> u = Session["usrdtls"] as List<branchdetails>;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dcPfmncObj.BrMst_Name;
                string UsrName = dcPfmncObj.User_Name;
                BrmstKey = dcPfmncObj.BrMst_Key;
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                string nTblOut = "";
                string nRptName = "";
                nTblOut = "PendingReg";
                //nRptName = "rpt_PendingRegister.rpt";
                Head1 = "DOCTORS PERFORMANCE";
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DoctorPerfomance";
                    brKey = (int)BrmstKey;
                }

                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DoctorPerfomance";
                    brKey = 0;
                }


                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    if (ProUserId > 0)
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                         "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND dbo.Invoice_Mst.Inv_DrId!=0 AND dbo.Invoice_Mst.Inv_DrId in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + ProUserId + ") AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;

                    }
                    else
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                                "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                "AND dbo.Invoice_Mst.Inv_DrId!=0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;
                    }
                }
                else
                {
                    if (BincDta == 0)
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                              "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                              "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                              "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                              "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                              "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                              "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                              "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                              "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                              "AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;
                    }
                    else
                    {
                        if (ProUserId > 0)
                        {
                            sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode FROM CARE011112.dbo.Invoice_Mst WITH (NOLOCK)LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE011112.dbo.Masters WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                + " AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + Environment.NewLine
                          + " UNION " + Environment.NewLine
                              + " SELECT Inv_No, Inv_Date, Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS Insurance, Inv_PntInvId, Inv_PntId, Inv_GrosAmt, Inv_InsNo, Inv_OutDr, Inv_DrId, Inv_User, Inv_time, Inv_DiscAmt, Inv_OthAmt, Inv_Netamt, Inv_RcvdAmt, Inv_CurRcvdAmt, Inv_CurBalAmt, Inv_BalAmt, Inv_PayMode FROM CARE021112.dbo.Invoice_Mst WITH(NOLOCK)  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE021112.dbo.Masters WITH(NOLOCK) ON Inv_DiscId = Masters.Mstr_Key WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                               + " AND Inv_DrId!=0 AND Inv_DrId in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + ProUserId + ") AND Inv_Status!=-1 AND  Inv_YrId = " + nYrId + " ORDER BY DrName";
                        }
                        else
                        {
                            sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode FROM CARE011112.dbo.Invoice_Mst WITH (NOLOCK)LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE011112.dbo.Masters WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                 + " AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + Environment.NewLine
                           + " UNION " + Environment.NewLine
                               + " SELECT Inv_No, Inv_Date, Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS Insurance, Inv_PntInvId, Inv_PntId, Inv_GrosAmt, Inv_InsNo, Inv_OutDr, Inv_DrId, Inv_User, Inv_time, Inv_DiscAmt, Inv_OthAmt, Inv_Netamt, Inv_RcvdAmt, Inv_CurRcvdAmt, Inv_CurBalAmt, Inv_BalAmt, Inv_PayMode FROM CARE021112.dbo.Invoice_Mst WITH(NOLOCK)  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE021112.dbo.Masters WITH(NOLOCK) ON Inv_DiscId = Masters.Mstr_Key WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                + " AND Inv_DrId!=0  AND Inv_Status!=-1 AND  Inv_YrId = " + nYrId + " ORDER BY DrName";
                        }

                    }
                }
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, DA.Common.myConnectionVM);
                //sDa.Fill(dtDetails);
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dsPrint, "InvoiceMst_View");
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DrPerformance.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DrPerformance.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctrSplzdList()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DoctorSpecializedList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctrSplzdList(branchdetails DrSplzdObj)
        {
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedSplzd = DrSplzdObj.checkedSplzd;
            string[] checkedSplzdId = DrSplzdObj.checkedSplzdId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedSplzdId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedSplzdId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedSplzdId[i]).ToString();
                }
            }
            if (nCondition != "")
            {
                nCondition = " AND Ahmst.AhMst_SplID IN(" + nCondition + ")";
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = DrSplzdObj.ff;
                string todatee = DrSplzdObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorSpecializedList";
                //****************************************************
                sqlStr = "select Ahmst.*,Mst.Mstr_Desc from AccountHeads_Mst Ahmst LEFT JOIN Masters Mst ON Ahmst.AhMst_SplID=Mstr_Key WHERE AhMst_Type='DOCTOR'   " + nCondition;

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                Head1 = "Doctor Specialised List";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                Head3 = BrMst_Name;
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //****************************************************

                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorSpecilized.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DoctorSpecilized.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public JsonResult SrchHospWithName(string term)
        {

            try
            {
                List<Stproc_SEARCH_HOSP_WITH_NAME_Result> t = new List<Stproc_SEARCH_HOSP_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_HOSP_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchHospWithKey(string term)
        {

            try
            {
                List<Stproc_SEARCH_HOSP_WITH_KEY_Result> t = new List<Stproc_SEARCH_HOSP_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_HOSP_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFHospWiseDocList()
        {
            string hospName = "";
            hospName = HospitalName;
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + hospName + "_" + "HospitalWiseDoctorList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult HospWiseDocList(branchdetails HosWiseDocObj)
        {
            int Id = 0;
            string Nfile_name = "";
            string nCondition = "";
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string fromdatee = HosWiseDocObj.ff;
                //string todatee = HosWiseDocObj.tt;
                //string[] dateString = fromdatee.Split('/');
                //DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string[] dateString2 = todatee.Split('/');
                //DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                //todate = todat;
                //fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                HospitalName = HosWiseDocObj.AhMst_pName;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                Nfile_name += "Report_" + HospitalName + "_" + "HospitalWiseDoctorList";
                //****************************************************
                int Docid = 0;
                try
                {
                    Docid = Convert.ToInt32(HosWiseDocObj.AhMst_Key);
                }
                catch { }
                if (Docid != 0)
                {
                    //cmd0.CommandText = "select AccountHeads_Mst.[AhMst_Key], AccountHeads_Mst.[AhMst_pName],AccountHeads_Mst.[AhMst_mobile],AccountHeads_Mst.[AhMst_Address] ,ah.[AhMst_pName] as Hospital  from AccountHeads_Mst left join AccountHeads_Mst ah on AccountHeads_Mst.[AhMst_HosId]=ah.[AhMst_Key] where   AccountHeads_Mst.[AhMst_HosId]=" + Docid + " and AccountHeads_Mst.[AhMst_IsActive]=1";
                    cmd0.CommandText = "select [dbo].[AccountHeads_Mst].[AhMst_Key],[dbo].[AccountHeads_Mst].[AhMst_mobile],[dbo].[AccountHeads_Mst].[AhMst_Address] ,[dbo].[AccountHeads_Mst].[AhMst_pName],[dbo].[AccountHeads_Mst].AhMst_HosId ,ah.[AhMst_pName]as Hosp,mst.Mstr_Desc As Specialized,[dbo].[AccountHeads_Mst].AhMst_Email,[dbo].[AccountHeads_Mst].AhMst_DefltAddress,[dbo].[AccountHeads_Mst].AhMst_HospAddress  from [dbo].[AccountHeads_Mst]  left join [dbo].[AccountHeads_Mst] ah on ah.[AhMst_Key]=[dbo].[AccountHeads_Mst].AhMst_HosId LEFT JOIN Masters mst On [dbo].[AccountHeads_Mst].AhMst_SplID=mst.Mstr_Key where [dbo].[AccountHeads_Mst].[AhMst_Type]='Doctor' and  [dbo].[AccountHeads_Mst].[AhMst_IsActive]=1 and  [dbo].[AccountHeads_Mst].[AhMst_HosId]=" + Docid + "";
                }
                else
                {
                    cmd0.CommandText = "select [dbo].[AccountHeads_Mst].[AhMst_Key],[dbo].[AccountHeads_Mst].[AhMst_mobile],[dbo].[AccountHeads_Mst].[AhMst_Address] ,[dbo].[AccountHeads_Mst].[AhMst_pName],[dbo].[AccountHeads_Mst].AhMst_HosId ,ah.[AhMst_pName]as Hosp,mst.Mstr_Desc As Specialized,[dbo].[AccountHeads_Mst].AhMst_Email,[dbo].[AccountHeads_Mst].AhMst_DefltAddress,[dbo].[AccountHeads_Mst].AhMst_HospAddress   from [dbo].[AccountHeads_Mst]  left join [dbo].[AccountHeads_Mst] ah on ah.[AhMst_Key]=[dbo].[AccountHeads_Mst].AhMst_HosId LEFT JOIN Masters mst On [dbo].[AccountHeads_Mst].AhMst_SplID=mst.Mstr_Key where [dbo].[AccountHeads_Mst].[AhMst_Type]='Doctor' and  [dbo].[AccountHeads_Mst].[AhMst_IsActive]=1 and  [dbo].[AccountHeads_Mst].[AhMst_HosId]!=" + Docid + "";

                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Hospital");
                Head3 = "HOSPITAL WISE DOCTORS LIST";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Columns.Add("CheqIssue", typeof(float));
                dt.Columns.Add("CheqRec", typeof(float));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = "";
                dt.Rows[0]["Reporthead"] = Head3;

                dt.Rows[0]["CheqIssue"] = 0;
                dt.Rows[0]["CheqRec"] = 0;


                ds0.Tables.Add(dt);
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorHospital.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorHospital.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFDoctrEnvelop()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + "DoctorsEnvelop";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        [HttpPost]
        public JsonResult DoctrsEnvelop(branchdetails DrEnvlpObj)
        {
            int Id = 0;
            string Nfile_name = "";
            string spl = "";
            string nCondition = "";
            string[] checkedDrId = DrEnvlpObj.checkedDctrId;
            string[] checkedDrName = DrEnvlpObj.checkedDctr;

            string[] checkedDrSplzd = DrEnvlpObj.checkedSplzd;
            string[] checkedDrSplzdId = DrEnvlpObj.checkedSplzdId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedDrId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedDrId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedDrId[i]).ToString();
                }
            }
            for (int i = 0; i < checkedDrSplzdId.Count(); i++)
            {
                if (spl == "")
                {
                    spl += (checkedDrSplzdId[i]).ToString();
                }
                else
                {
                    spl += "," + (checkedDrSplzdId[i]).ToString();
                }
            }
            //if (nCondition != "")
            //{
            //    nCondition = " AND Ahmst.AhMst_SplID IN(" + nCondition + ")";
            //}
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string fromdatee = DrSplzdObj.ff;
                //string todatee = DrSplzdObj.tt;
                //string[] dateString = fromdatee.Split('/');
                //DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string[] dateString2 = todatee.Split('/');
                //DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                //todate = todat;
                //fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                SqlCommand cmd0 = new SqlCommand();
                DateTime NowDate = DateTime.Now;
                string datestring = NowDate.ToString("ddmmyyyyy");
                fdt = datestring;
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + "DoctorsEnvelop";
                //****************************************************
                if (nCondition != "")
                {
                    nCondition = "  and AhMst_Key in (" + nCondition + ")";

                    cmd0.CommandText = "select ah.AhMst_pName,ah.AhMst_Ismale,ah.AhMst_drEdDet,ah.AhMst_Phno,ah.AhMst_mobile,ah.AhMst_Email,ah.AhMst_Address,ah.AhMst_Key,ah.AhMst_SplID,mst.Mstr_Desc, mst.Mstr_Key    from [dbo].[AccountHeads_Mst] ah left join Masters mst on ah.AhMst_SplID = mst.Mstr_Key where  AhMst_Type = 'Doctor' and   AhMst_IsActive=1 " + nCondition + " order by AhMst_SplID,AhMst_pName ";
                    // cmd0.CommandText = "select ah.AhMst_pName,ah.AhMst_Ismale,ah.AhMst_drEdDet,ah.AhMst_Phno,ah.AhMst_mobile,ah.AhMst_Email,Case WHEN Ah.AhMst_DefltAddress='1' then ah.AhMst_HospAddress else   ah.AhMst_Address END as AhMst_Address ,ah.AhMst_Key,ah.AhMst_SplID,mst.Mstr_Desc, mst.Mstr_Key    from [dbo].[AccountHeads_Mst] ah left join Masters mst on ah.AhMst_SplID = mst.Mstr_Key where  AhMst_Type = 'Doctor' and   AhMst_IsActive=1 " + spl + " order by AhMst_SplID,AhMst_pName ";
                }
                //****************************************************
                SqlDataAdapter sd0 = new SqlDataAdapter();
                ds0 = new DataSet();
                try
                {
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sd0.Fill(ds0, "DoctrsEnvelop");
                }
                catch { }
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "[dbo]_[Company_Mst]");

                Head3 = "DoctrsEnvelop";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = "";
                dt.Rows[0]["Reporthead"] = Head3;

                //rpt_CollectnStmnt_BranchWise
                ds0.Tables.Add(dt);
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctrsEnvelop.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctrsEnvelop.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFOutDrWiseClctn()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "OutDoctorWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "OutDoctorWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult OutDrWiseClctn(branchdetails outDrWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = outDrWiseObj.ff;
                string todatee = outDrWiseObj.tt;
                //*******************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = outDrWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = outDrWiseObj.BrMst_Name;
                Head1 = "OUT DOCTOR WISE INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "OutDoctorWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "OutDoctorWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************BrMst_Key nYrId************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,A.Inv_OutDr AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,A.Inv_BrId,BrMst_Name " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor'   " +
                            "LEFT JOIN Baranches_Mst ON A.Inv_BrId=BrMst_Key " +
                            "WHERE  ISNULL(A.Inv_DrId,0)=0 AND Inv_OutDr!='' AND A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_CpyId = " + BrMst_Key + " AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_UsrId";


                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,A.Inv_OutDr AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,A.Inv_BrId,BrMst_Name " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "LEFT JOIN Baranches_Mst ON A.Inv_BrId=BrMst_Key " +
                             "WHERE  ISNULL(A.Inv_DrId,0)=0 AND Inv_OutDr!='' AND A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status <> - 1  AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_UsrId";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_OutDrwiseInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_OutDrwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SrchBnchWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_BRNCH_WITH_NAME_Result> t = new List<Stproc_SEARCH_BRNCH_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_BRNCH_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchBnchWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_BRNCH_WITH_KEY_Result> t = new List<Stproc_SEARCH_BRNCH_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_BRNCH_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchTSTWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchTSTWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFNoDctrPatTst()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "NoDoctorPatientTest";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "NoDoctorPatientTest";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult NoDctrPatTst(branchdetails NoDrPatTstObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = NoDrPatTstObj.ff;
                string todatee = NoDrPatTstObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = NoDrPatTstObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string TestName = NoDrPatTstObj.TstMst_name;
                double TestKey = NoDrPatTstObj.TstMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = NoDrPatTstObj.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                BrmstKey = NoDrPatTstObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);


                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "NoDoctorPatientTest";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "NoDoctorPatientTest";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                //TestName TestKey brnchName BrmstKey


                if (TestName == "" && brnchName.Trim() != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 and Inv_BrID=" + BrmstKey + " group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }

                if (brnchName.Trim() == "" && TestName.Trim() == "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }
                if (brnchName.Trim() == "" && TestName != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE invdet.InvItm_TstId='" + TestKey + "' and inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }
                else if (TestName.Trim() != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE invdet.InvItm_TstId='" + TestKey + "' and inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 and Inv_BrID=" + BrmstKey + " group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }

                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "PatientDR");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);

                //**************************************Daily Collection Statement***********************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NodrPtnttest.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NodrPtnttest.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SearchLabWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_LAB_WITH_NAME_Result> t = new List<Stproc_SEARCH_LAB_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_LAB_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchLabWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_LAB_WITH_KEY_Result> t = new List<Stproc_SEARCH_LAB_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_LAB_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFReferalLabStmnt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReferalLab";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReferalLab";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult ReferalLabStmnt(branchdetails rfrlLabObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rfrlLabObj.ff;
                string todatee = rfrlLabObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rfrlLabObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string LabName = rfrlLabObj.AhMst_pName;
                double LabKey = rfrlLabObj.AhMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rfrlLabObj.BrMst_Name;
                Head1 = "REFERAL LAB STATEMENTS";
                Head1 = Head1 + "(Refered Date)";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rfrlLabObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReferalLab";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReferalLab";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                string RefId = "";
                try
                {
                    RefId = Convert.ToString(LabName.Trim());
                }
                catch { }
                nCondition = " AND  Convert(date,Inv_Date) >='" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "'";
                if (BrmstKey > 0)
                {

                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (RefId != "")
                {
                    nCondition = nCondition + " AND RefLb_RefLabName='" + RefId + "'";
                }
                SqlCommand sqlcmd01 = new SqlCommand();
                sqlcmd01.Connection = sqlcon;
                sqlcmd01.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                try
                {
                    sqlStr = "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab WITH (NOLOCK) Left Join CARE011112.dbo.Invoice_Mst Inv WITH (NOLOCK) on RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN CARE011112.DBO.Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join CARE011112.dbo.AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key   Left Join CARE011112.dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key  where  RefLb_YrId=" + YearId + " AND  Inv_Status<>-1 AND RefLb_CpyId=1 " + nCondition;
                    sqlStr = sqlStr + " UNION ";
                    sqlStr = sqlStr + "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab  WITH (NOLOCK) Left Join CARE021112.dbo.Invoice_Mst Inv WITH (NOLOCK) on  RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN CARE021112.DBO.Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join CARE021112.dbo.AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key  Left Join CARE021112.dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key where RefLb_YrId=" + YearId + "  AND  Inv_Status<>-1  AND RefLb_CpyId>1  " + nCondition;
                    sqlcmd01.CommandText = sqlStr;
                    sd0 = new SqlDataAdapter(sqlcmd01.CommandText, sqlcon);
                    sd0.Fill(ds0, "dtDetails");
                }
                catch
                {
                    sqlStr = "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab WITH (NOLOCK) Left Join Invoice_Mst Inv WITH (NOLOCK) on RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key   Left Join dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key  where  RefLb_YrId=" + YearId + " AND  Inv_Status<>-1  " + nCondition;
                    sqlcmd01.CommandText = sqlStr;
                    sd0 = new SqlDataAdapter(sqlcmd01.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");
                }
                ////****************************************************
                sqlcmd01.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(sqlcmd01);
                sd0.Fill(ds0, "[dbo].[Company_Mst]");
                //****************************************************
                DataTable dt = new DataTable();
                dt.Reset();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Head"] = Head1;
                ds0.Tables.Add(dt);
                //*************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RefLab.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_RefLab.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRemoveAuthStmnt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "RemoveAuthorizationStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "RemoveAuthorizationStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RemoveAuthStmnt(branchdetails rmveAuthObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rmveAuthObj.ff;
                string todatee = rmveAuthObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rmveAuthObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rmveAuthObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "REMOVE AUTHORIZATION STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rmveAuthObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "RemoveAuthorizationStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "RemoveAuthorizationStatement";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT RemAt.*,Inv.Inv_name FROM Remove_Authorization RemAt LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RemAt.RemAut_InvNo =inv.Inv_No AND RemAt.RemAut_CpyId =inv.Inv_CpyId " +
                             " WHERE RemAut_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND RemAut_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            " AND RemAut_CpyId = " + BrmstKey + " AND RemAut_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT RemAt.*,Inv.Inv_name FROM Remove_Authorization RemAt LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RemAt.RemAut_InvNo =inv.Inv_No" +
                           " WHERE RemAut_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND RemAut_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "  AND RemAut_YrId = " + nYrId;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RemAuthorize.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_RemAuthorize.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRptDispStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatchingStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatchingStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RptDispStmnts(branchdetails rptDispObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rptDispObj.ff;
                string todatee = rptDispObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rptDispObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rptDispObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "REPORT DISPATCHING STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rptDispObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatchingStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatchingStatement";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No AND  RptDis.RptDis_CpyId =Inv.Inv_CPYID AND RptDis.RptDis_YrId =Inv.Inv_YrId " +
                             " WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            " AND RptDis_CpyId = " + BrmstKey + " AND RptDis_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No AND RptDis.RptDis_CpyId =Inv.Inv_CPYID AND RptDis.RptDis_YrId =Inv.Inv_YrId" +
                                                " WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                               "  AND RptDis_YrId = " + nYrId;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_ReptDispatching.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_ReptDispatching.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFSmpleCollWiseInv()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "SampleCollectionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "SampleCollectionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult SmpleCollWiseInv(branchdetails cmplCollObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = cmplCollObj.ff;
                string todatee = cmplCollObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cmplCollObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cmplCollObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = cmplCollObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "SampleCollectionWise";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "SampleCollectionWise";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            " AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance,AccountHeads_Mst_4.AhMst_pName AS CollBy, " +
                            " dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            " dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            " dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            " dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_PayMode,[dbo].[Invoice_Det].[InvItm_Type],InvItm_rate,InvItm_Orgrate, [dbo].[Invoice_Det].[InvItm_TstId],dbo.Test_Mst.TstMst_name " +
                            " FROM dbo.Invoice_Mst  WITH (NOLOCK) LEFT OUTER JOIN " +
                            " [dbo].[Invoice_Det] on [dbo].[Invoice_Mst] .[Inv_No] =[dbo].[Invoice_Det] .InvItm_Invno AND  [dbo].[Invoice_Mst] .[Inv_CPYID] =[dbo].[Invoice_Det] .InvItm_CpyId AND  [dbo].[Invoice_Mst] .[Inv_YRID] =[dbo].[Invoice_Det] .InvItm_YrId left outer  join  " +
                            " [dbo].[Test_Mst] on [dbo].[Invoice_Det].[InvItm_TstId]= [dbo].[Test_Mst].TstMst_Key LEFT OUTER JOIN  " +
                            " dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                             " dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN " +
                            "  dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +

                             "WHERE dbo.Invoice_Mst.Inv_CltnID>0 AND  dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;
                }
                else
                {

                    sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            " AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance,AccountHeads_Mst_4.AhMst_pName AS CollBy, " +
                            " dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            " dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            " dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            " dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_PayMode,[dbo].[Invoice_Det].[InvItm_Type],InvItm_rate,InvItm_Orgrate, [dbo].[Invoice_Det].[InvItm_TstId],dbo.Test_Mst.TstMst_name " +
                            " FROM dbo.Invoice_Mst  WITH (NOLOCK) LEFT OUTER JOIN " +
                            " [dbo].[Invoice_Det] on [dbo].[Invoice_Mst] .[Inv_No] =[dbo].[Invoice_Det] .InvItm_Invno AND  [dbo].[Invoice_Mst] .[Inv_CPYID] =[dbo].[Invoice_Det] .InvItm_CpyId AND  [dbo].[Invoice_Mst] .[Inv_YRID] =[dbo].[Invoice_Det] .InvItm_YrId left outer  join  " +
                            " [dbo].[Test_Mst] on [dbo].[Invoice_Det].[InvItm_TstId]= [dbo].[Test_Mst].TstMst_Key LEFT OUTER JOIN  " +
                            " dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                             " dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN " +
                            "  dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +

                             "WHERE dbo.Invoice_Mst.Inv_CltnID>0 AND  dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //**************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_SampleCollectionWise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_SampleCollectionWise.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRptDisp2()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatching2";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatching2";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RptDisp2(branchdetails RptDisp2Obj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = RptDisp2Obj.ff;
                string todatee = RptDisp2Obj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = RptDisp2Obj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = RptDisp2Obj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = RptDisp2Obj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatching2";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatching2";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************

                if (BrmstKey > 0)
                {


                    sqlStr = " SELECT BrMst_Name,Inv_name,Inv_No,Inv_User,Inv_OthCmnt, Inv_Date ,Inv_PrintCount,ISNULL(Inv_SentMail, '') as Inv_SentMail from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID WHERE (ISNULL(Inv_SentMail, '')!= '' or Inv_PrintCount> 0 ) and Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + "  AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId;
                }
                else
                {
                    sqlStr = " SELECT BrMst_Name,Inv_name,Inv_No,Inv_User,Inv_OthCmnt, Inv_Date, Inv_PrintCount,ISNULL(Inv_SentMail, '') as Inv_SentMail from Invoice_Mst  left join Baranches_Mst on BrMst_Key=Inv_BrID WHERE (ISNULL(Inv_SentMail, '')!= '' or Inv_PrintCount> 0) and Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + " AND Inv_YrId = " + YearId;
                    /*"SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No" +
                                            " WHERE Inv_Date >= '" + dtpFrom.Value.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + dtpFrom.Value.ToString("yyyy-MM-dd") + "' " +
                                           "  AND RptDis_YrId = " + cPublic.YearId;*/

                }
                cmd = new SqlCommand(sqlStr, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "reportdispatched");


                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();


                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds.Tables.Add(dt);

                Head3 = "branchtype" + BrmstName;
                DataTable dtt = new DataTable();
                dtt.Reset();


                dtt.Columns.Add("branchtype", typeof(string));
                dtt.Rows.Add();
                dtt.Rows[0]["branchtype"] = Head3;
                ds.Tables.Add(dtt);

                //**************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_ReptDispatching2.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_ReptDispatching2.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTimeOverStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TimeOverStatements";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TimeOverStatements";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TimeOverStmnts(branchdetails timeOvrObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = timeOvrObj.ff;
                string todatee = timeOvrObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = timeOvrObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                int AvoidFinished = timeOvrObj.avoidFinishd;
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = timeOvrObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = timeOvrObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TimeOverStatements";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TimeOverStatements";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************
                string cond = "";
                if (BrmstKey > 0 && AvoidFinished == 1)
                {
                    cond = "SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                       + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                       + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                       + " WHERE (Inv_Status != -1 and Inv_Status != 1) and convert(Date, Inv_Date)>= '" + fromdate.ToString("") + "'and  convert(Date, Inv_Date) <= '" + todate + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + "";
                }
                else if (AvoidFinished == 1)
                {
                    cond = "SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                       + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                       + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                       + " WHERE (Inv_Status != -1 and Inv_Status != 1) and convert(Date, Inv_Date)>= '" + fromdate + "'and  convert(Date, Inv_Date) <= '" + todate + "' and[Inv_YrId] = " + YearId + "";
                }
                if (BrmstKey > 0 && AvoidFinished == 0)
                {
                    cond = " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,datediff(second, FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm tt'),FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId  WHERE (Inv_Status != -1 AND Inv_Status = 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + " AND isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')), 0) > 0" + Environment.NewLine
                     + "union" + Environment.NewLine
                     + " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover, Inv_CmpltdTime, Inv_Status, BrMst_Name, AhMst_pName, Inv_CpyId from Invoice_Mst WITH(NOLOCK)LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId WHERE(Inv_Status != -1 AND Inv_Status != 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + " AND isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')), 0) > 0";
                    //cond = "SELECT Inv_No, Inv_Date, Inv_name,datediff(second,FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm'),FORMAT(Inv_CmpltdDate,'yyyy-MM-dd hh:mm')),Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                    //                     + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                    //                     + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                    //                     + " WHERE Inv_Status != -1 and convert(Date, Inv_Date)>= '" + dtpfromdate.Value + "'and  convert(Date, Inv_Date) <= '" + dtptodate.Value + "' and[Inv_YrId] = " + cPublic.YearId + " and[Inv_CpyId] = " + BrId + " AND datediff(second,FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm'),FORMAT(Inv_CmpltdDate,'yyyy-MM-dd hh:mm'))>0";
                }
                else if (AvoidFinished == 0)
                {
                    cond = cond = " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate, datediff(second, FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm tt'),FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId  WHERE (Inv_Status != -1 AND Inv_Status = 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and [Inv_YrId] = " + YearId + " and isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')), 0) > 0" + Environment.NewLine
                     + "union" + Environment.NewLine
                     + " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate, datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')) as timeover, Inv_CmpltdTime, Inv_Status, BrMst_Name, AhMst_pName, Inv_CpyId from Invoice_Mst WITH(NOLOCK)LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId WHERE(Inv_Status != -1 AND Inv_Status != 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and [Inv_YrId] = " + YearId + " and  isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')), 0) > 0";

                    //"SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                    //     + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                    //     + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                    //     + " WHERE Inv_Status != -1 and convert(Date, Inv_Date)>= '" + dtpfromdate.Value + "'and  convert(Date, Inv_Date) <= '" + dtptodate.Value + "' and[Inv_YrId] = " + cPublic.YearId + "";
                }


                cmd.CommandText = cond;
                cmd.Connection = sqlcon;

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "TimeOverDet");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //**************************************************************************AvoidFinished BrmstKey
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                if (BrmstKey > 0 && AvoidFinished == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmnt.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmnt.xsd");
                }
                else if (AvoidFinished == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmnt.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmnt.xsd");
                }
                else if (BrmstKey > 0 && AvoidFinished == 0)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmntfinished.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmntfinished.xsd");
                }
                else if (AvoidFinished == 0)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmntfinished.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmntfinished.xsd");
                }

                //*********************************************************************************
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFAuthDetails()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult AuthDetails(branchdetails authDlsObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = authDlsObj.ff;
                string todatee = authDlsObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
                //************************************************************************************************
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT inv_name as name,TstMst_name as testname,GenRsltDet_LabNo as labno,Inv_Date as date,GenRsltDet_UsrFirLeAut As USERINFO, GenRsltDet_UsrSecLeAut As SecUserInfo, GenRsltDet_GrpId As TestId FROM GenaralRslt_Det Gen WITH (NOLOCK)LEFT JOIN   Invoice_Mst A WITH(NOLOCK) ON Gen.GenRsltDet_LabNo = A.Inv_No AND Gen.GenRsltDet_YrId = A.Inv_YrId AND Gen.GenRsltDet_CpyId = A.Inv_CpyId LEFT JOIN Test_Mst Tst WITH(NOLOCK) ON Tst.TstMst_Key = Gen.GenRsltDet_GrpId  WHERE  Inv_Status <> -1 AND Inv_YrId = " + YearId + " AND Inv_CpyId = " + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +

                                 " UNION  SELECT inv_name as name,TstMst_name as testname,Cul_LabNo as labno,Inv_Date as date,Cul_UsrFirLeAut As USERINFO,Cul_UsrSecLeAut As SecUserInfo,Cul_Testid As TestId FROM CultureRslt_Mst Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.Cul_LabNo=A.Inv_No AND Gen.Cul_YrId=A.Inv_YrId AND Gen.Cul_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.Cul_Testid  WHERE  Inv_Status<>-1  AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "'" +
                                 " UNION  SELECT inv_name as name,TstMst_name as testname,SmnRslt_LabNo as labno,Inv_Date as date,SmnRslt_UsrFirLeAut As USERINFO,SmnRslt_UsrSecLeAut As SecUserInfo,SmnRslt_Tstid As TestId FROM Semen_Rslt Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.SmnRslt_LabNo=A.Inv_No AND Gen.SmnRslt_YrId=A.Inv_YrId AND Gen.SmnRslt_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.SmnRslt_Tstid WHERE  Inv_Status<>-1  AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + " AND Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                 " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust1_LabNo as labno,Inv_Date as date,RsltCust1_UsrFirLeAut As USERINFO,RsltCust1_UsrSecLeAut As SecUserInfo,RsltCust1_TstId As TestId FROM Result_Customize1 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust1_LabNo=A.Inv_No AND Gen.RsltCust1_YrId=A.Inv_YrId AND Gen.RsltCust1_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust1_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust2_LabNo as labno,Inv_Date as date,RsltCust2_UsrFirLeAut As USERINFO,RsltCust2_UsrSecLeAut As SecUserInfo,RsltCust2_TstId As TestId FROM Result_Customize2 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust2_LabNo=A.Inv_No AND Gen.RsltCust2_YrId=A.Inv_YrId AND Gen.RsltCust2_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust2_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust4_LabNo as labno,Inv_Date as date,RsltCust4_UsrFirLeAut As USERINFO,RsltCust4_UsrSecLeAut As SecUserInfo,RsltCust4_TstId As TestId FROM Result_Customize4 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust4_LabNo=A.Inv_No AND Gen.RsltCust4_YrId=A.Inv_YrId AND Gen.RsltCust4_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust4_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION SELECT inv_name as name,TstMst_name as testname,GenRsltDet_LabNo as labno,Inv_Date as date,GenRsltDet_UsrFirLeAut As USERINFO,GenRsltDet_UsrSecLeAut As SecUserInfo,GenRsltDet_GrpId As TestId FROM GenaralRslt_DetFD Gen WITH (NOLOCK) LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.GenRsltDet_LabNo=A.Inv_No AND Gen.GenRsltDet_YrId=A.Inv_YrId AND Gen.GenRsltDet_CpyId=A.Inv_CpyId LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.GenRsltDet_GrpId  WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust3_LabNo as labno,Inv_Date as date,RsltCust3_UsrFirLeAut As USERINFO,RsltCust3_UsrSecLeAut As SecUserInfo,RsltCust3_TstId As TestId FROM Result_Customize3 Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust3_LabNo=A.Inv_No AND Gen.RsltCust3_YrId=A.Inv_YrId AND Gen.RsltCust3_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust3_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "authourization");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_authourizationstmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_authourizationstmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SearchCust2TstName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCust2TstCode(string term)
        {
            try
            {
                List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCust2RsltRegister()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "Customize2ResultRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "Customize2ResultRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult Cust2RsltRegister(branchdetails cust2RegObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = cust2RegObj.ff;
                string todatee = cust2RegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cust2RegObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string TestName = cust2RegObj.TstMst_name;
                double TestKey = cust2RegObj.TstMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cust2RegObj.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                BrmstKey = cust2RegObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);


                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "Customize2ResultRegister";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "Customize2ResultRegister";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                //TestName TestKey brnchName BrmstKey
                int testid = 0;
                string cust2RsltDesc = "";
                string Ncondions = "";
                try
                {
                    testid = Convert.ToInt32(TestKey);
                }
                catch { }
                //check
                cust2RsltDesc = this.db.Customize2_RsltDescMst.Where(cust => cust.Cust2Rslt_TstId == testid).Select(cst => cst.Cust2Rslt_Desc).FirstOrDefault();
                // cust2RsltDesc = cPublic.getData("Customize2_RsltDescMst", "Cust2Rslt_Desc", "WHERE Cust2Rslt_TstId=" + testid);

                if (cust2RsltDesc == "")//check
                {
                    TempData["AlertMessage"] = "Invalid Patient Details!";
                    return Json(new { Result = "ERROR", Record = TempData["AlertMessage"] });
                }


                int _CmpyId = 0;
                try
                {

                    if (BrmstKey > 0)
                    {
                        try
                        {
                            _CmpyId = Convert.ToInt32(BrmstKey);
                        }
                        catch { }
                    }
                    else
                    {
                        _CmpyId = 0;
                    }
                }
                catch { }

                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;

                if (_CmpyId > 0)
                {
                    Ncondions = " AND Inv_BrID=" + _CmpyId + "";
                }

                cmd.CommandText = "select [BrMst_Name],[Inv_PayMode],[Inv_No],Inv_ageymd,inv_date,[Inv_SmplDate],[Inv_Rcvddate],RsltCust2_LabNo,RsltCust2_Report,[Inv_InsId],RsltCust2_TstId," + Environment.NewLine
                    + "RsltCust2_CpyId,[Inv_name],ahmst_pname as corportae,[Inv_age], [Inv_Gender],TstMst_Name" + Environment.NewLine
                    + " from [dbo].[Result_Customize2] WITH (NOLOCK) " + Environment.NewLine
                     + "left join [dbo].[Invoice_Mst] WITH (NOLOCK)  on RsltCust2_LabNo =[Inv_No] and RsltCust2_YrId=inv_yrid and RsltCust2_CpyId=[Inv_CpyId] " + Environment.NewLine
                     + "left join [dbo].[Invoice_Det] WITH (NOLOCK) on InvItm_Invno =[Inv_No] and InvItm_YrId=inv_yrid and InvItm_CpyId=[Inv_CpyId] and InvItm_TstId=RsltCust2_TstId " + Environment.NewLine
                    + " left join Test_Mst WITH (NOLOCK)  on TstMst_Key=RsltCust2_TstId  " + Environment.NewLine
                     + " left join AccountHeads_Mst WITH (NOLOCK)  on [AhMst_Key] =[Inv_InsId]  " + Environment.NewLine
                    + " left join [dbo].[Baranches_Mst] on [BrMst_Key]=[Inv_BrID] " + Environment.NewLine
                    + " where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                    + " AND Inv_Status != -1 and inv_yrid=" + YearId + " and RsltCust2_TstId=" + testid + " and RsltCust2_Description='" + cust2RsltDesc + "'" + Ncondions;

                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "Customize2ResultDetails");

                //*****************************

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //**************************************Daily Collection Statement***********************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Cust2RsltStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_Cust2RsltStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult TstWiseResultReg(branchdetails tstRsltRegObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = tstRsltRegObj.ff;
                string todatee = tstRsltRegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                DataSet ds0 = new DataSet();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
                //************************************************************************************************


                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_authourizationstmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_authourizationstmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFNonBarcodedTest()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "NonBarcodedTests";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult NonBarcodedTest(branchdetails tstRsltRegObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = tstRsltRegObj.ff;
                string todatee = tstRsltRegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "NonBarcodedTests";
                //************************************************************************************************
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select inv_no,inv_name,[TstMst_name],[InvItm_SmplId] from invoice_mst left join invoice_det on inv_no=[InvItm_Invno] and inv_yrid=[InvItm_YrId] and inv_cpyid=[InvItm_CpyId] left join[dbo].[Test_Mst] on[TstMst_Key]=[InvItm_TstId] where Inv_Status != -1 and inv_yrid =" + YearId + " and [InvItm_SmplId]='' AND   Inv_date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND   Inv_date<='" + todate.ToString("yyyy-MM-dd") + "' and inv_cpyid = " + CompanyId + "";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "Nonbarcodedata");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);

                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NonBarcodeTest.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NonBarcodeTest.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult IPOPpatView(branchdetails ipopViewObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int ipop_num = 0;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //int IPOPNum=
                ipop_num = ipopViewObj.IPOP_num;
                //*********************************
                SqlCommand cmd = new SqlCommand("SELECT INV_NO,INV_DATE,Inv_name,Inv_phno,Inv_Email,Inv_age,Inv_Gender,Inv_ageymd,Ahmst_pname as Doctor FROM INVOICE_MST Inv LEFT JOIN AccountHeads_Mst Ahmst ON Inv_DrId=Ahmst.Ahmst_Key WHERE INV_YRID=" + YearId + " AND INV_CPYID=" + CompanyId + " AND Inv_RsltNO='" + ipop_num + "' AND Inv_Status!=-1", sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                DataTable dtsub = new DataTable();
                string labsub = "";
                string ngender = "";
                List<testDetails> test = new List<testDetails>();
                collectionDetails cls = new collectionDetails();
                int TempRw = 0;
                DateTime TempDate = DateTime.Now;
                string nResult = "";
                sda.Fill(dt);
                //grdIOPReslt.Rows.Clear();
                //if (dt.Rows.Count > 0)
                //{
                //    grdIOPReslt.RowCount = dt.Rows.Count;
                //}
                //else if (txtIPOP.Text.Trim() != "")
                //{
                //    txtIPOP.Text = "";
                //    MessageBox.Show("No record Found", cPublic.ProjectName);
                //    txtIPOP.Focus();
                //}
                string PatName = "";
                string PatAge = "";
                string PatGndr = "";
                string PatEmail = "";
                string PatPhNo = "";
                string InvDate = "";
                string InvDoctor = "";
                string LabNumber = "";
                string TstReslt = "";
                foreach (DataRow dr in dt.Rows)
                {
                    TempDate = DateTime.Now;
                    nResult = "";

                    //FILL PERSONAL DETAILS IN HEADER
                    PatName = dr["Inv_name"].ToString();
                    PatAge = dr["Inv_age"].ToString() + " " + dr["Inv_ageymd"].ToString();
                    ngender = dr["Inv_Gender"].ToString();
                    if (ngender == "M")
                    {
                        PatGndr = "Male";
                    }
                    else
                    {
                        PatGndr = "Female";
                    }
                    PatEmail = dr["Inv_Email"].ToString();
                    PatPhNo = dr["Inv_phno"].ToString();
                    cls = new collectionDetails()
                    {
                        Inv_name = PatName,
                        Pat_Age = PatAge,
                        //Inv_phno = dr["inv_phno"].ToString(),
                        Inv_Gender = ngender,
                        Inv_Email = PatEmail,
                        Inv_phno = PatPhNo
                    };

                    //DATAGRID FILL

                    try { TempDate = Convert.ToDateTime(dr["INV_DATE"]); } catch { }
                    InvDate = TempDate.ToString("dd-MM-yyyy");
                    InvDoctor = dr["Doctor"].ToString();
                    LabNumber = dr["INV_NO"].ToString();
                    labsub = dr["INV_NO"].ToString();
                    dtsub.Reset();
                    cmd = new SqlCommand("SELECT GenRsltDet_Result,TstMst_name as Test,TstMst_ShortName as TestShort FROM GenaralRslt_Det LEFT JOIN Test_Mst testmst on GenRsltDet_TstID=testmst.TstMst_Key WHERE GenRsltDet_LabNo=" + labsub + " AND GenRsltDet_YrId=" + YearId + " AND GenRsltDet_CpyId=" + CompanyId, sqlcon);
                    sda = new SqlDataAdapter(cmd);
                    sda.Fill(dtsub);

                    // TEST RESULT FETCH

                    foreach (DataRow drsub in dtsub.Rows)
                    {
                        if (nResult == "")
                        {
                            nResult = drsub["TestShort"].ToString() + "-" + drsub["GenRsltDet_Result"].ToString();
                        }
                        else
                        {
                            nResult = nResult + " |  " + drsub["TestShort"].ToString() + "-" + drsub["GenRsltDet_Result"].ToString();
                        }
                    }
                    TstReslt = nResult;

                    testDetails td = new testDetails()
                    {
                        Inv_Dates = InvDate,
                        Doctor = InvDoctor,
                        Lab_No = LabNumber,
                        Test_Result = TstReslt

                    };
                    test.Add(td);
                    TempRw += 1;
                    cls.testdtls = test;


                }
                //foreach (DataRow dr in dt.Rows)
                //{
                //    int tmpSchrge = 0;
                //    try
                //    {
                //        tmpSchrge = Convert.ToInt32(dr["Inv_Schrge"].ToString());
                //    }
                //    catch { }
                //    TotSChrge = TotSChrge + tmpSchrge;
                //    collectionDetails cs1 = new collectionDetails()
                //    {
                //        Inv_No = dr["Inv_No"].ToString(),
                //        Inv_name = dr["inv_name"].ToString(),
                //        //Inv_phno = dr["inv_phno"].ToString(),
                //        Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy"),
                //        Inv_Schrge = dr["Inv_Schrge"].ToString(),
                //        AhMst_pName = dr["AhMst_pName"].ToString(),
                //        Inv_PayMode = dr["Inv_PayMode"].ToString()
                //    };
                //    cls.Add(cs1);
                //    curRow = curRow + 1;

                //}

                //************************************
                //branchdetails dateDls = new branchdetails()
                //{
                //    fromdate = fromdat,
                //    todate = todat
                //};
                //Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchTestWithName(string term)
        {
            try
            {
                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchTestWithKey(string term)
        {
            try
            {
                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFTestWiseInvoice()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestWiseInvoice(branchdetails tstWiseInvObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double TstId = 0;
                string TstName = "";
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                TstId = tstWiseInvObj.TstMst_Key;
                TstName = tstWiseInvObj.TstMst_name;
                string fromdatee = tstWiseInvObj.ff;
                string todatee = tstWiseInvObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds0 = new DataSet();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstWiseInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstWiseInvObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                //Head1 = "REMOVE AUTHORIZATION STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = tstWiseInvObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued,A.Inv_Nationality,A.Inv_SRFno,A.Inv_Passport, " +
                         "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                         "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_Aadhaar,A.Inv_Dob,A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                         "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                         "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                         "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                         "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                         "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                         "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                         "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                         "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                         "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_CpyId = A.Inv_CpyId and   " +
                         "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                         "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND A.Inv_CpyId = " + BrmstKey + " AND  B.InvItm_TstId=" + TstId + " AND A.Inv_YrId = " + YearId + " ";


                }
                else
                {
                    cmd0.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                       "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                       "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                       "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                       "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                       "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                       "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                       "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                       "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                       "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                       "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                       "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                       "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                       "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                       "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                       "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                       "AND  B.InvItm_TstId=" + TstId + " AND A.Inv_YrId = " + YearId + " ";

                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "dtDetails");
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "select inv_no,inv_cpyid,inv_yrid,Inv_Schrge,Count([InvItm_TstId]) as tstcount from [dbo].[Invoice_Mst] left join  Invoice_Det on [Inv_No]=[InvItm_Invno]and[Inv_YrId] =[InvItm_YrId] and[Inv_CpyId] =[InvItm_CpyId]  and InvItm_rate>0 where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  and Inv_YrId = " + YearId + "  and Inv_CpyId = " + BrmstKey + " and Inv_Status != -1 and inv_no in(SELECT Inv_No from dbo.Invoice_Mst WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <=  '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " )group by inv_no,inv_cpyid,inv_yrid,Inv_Schrge";
                }
                else
                {
                    cmd0.CommandText = "select inv_no,inv_cpyid,inv_yrid,Inv_Schrge,Count([InvItm_TstId]) as tstcount from [dbo].[Invoice_Mst] left join  Invoice_Det on [Inv_No]=[InvItm_Invno]and[Inv_YrId] =[InvItm_YrId] and[Inv_CpyId] =[InvItm_CpyId]  and InvItm_rate>0 where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  and Inv_YrId = " + YearId + "  and Inv_Status != -1 and inv_no in(SELECT Inv_No from dbo.Invoice_Mst WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <=  '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " )group by inv_no,inv_cpyid,inv_yrid,Inv_Schrge";
                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "dttest");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = TstName.Trim();
                dt.Rows[0]["Branch"] = brnchName.Trim();
                dt.Rows[0]["Reporthead"] = Head3;
                ds0.Tables.Add(dt);
                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestwiseStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_TestwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTestPerfomance()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestPerfomance(branchdetails tstPrfmncObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = tstPrfmncObj.ff;
                string todatee = tstPrfmncObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable InvItmDetails_View = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                InvItmDetails_View.TableName = "InvItmDetails_View";
                dtDetails.TableName = "dtDetails";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstPrfmncObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstPrfmncObj.BrMst_Name;
                Head1 = "TEST PERFORMANCE";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomance";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomance";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {

                    if (TstPrfrmView == 0)
                    {

                        sqlStr = "SELECT COUNT(Tst.TstMst_Key) as TestCount,Tst.TstMst_Key,Tst.TstMst_name from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId =Tst.TstMst_Key  " +
                                 "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                 "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name ORDER BY TstMst_name";
                    }
                    else
                    {
                        sqlStr = "SELECT SUM(TestCount) AS TestCount,TstMst_Key as TstMst_Key,TstMst_name as TstMst_name from (SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name,0 AS ntype  " +
"from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status != -1 AND TstMst_TypeId = -2 group by TstMst_Key, TstMst_name" +
" UNION " +
" SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name ,1 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + "" +
" AND inv.Inv_Status != -1 AND TstMst_TypeId != -2  group by TstMst_Key,TstMst_name" +
"  union " +
" SELECT COUNT(TstGR.TstMst_Key) as TestCount, TstGR.TstMst_Key as TstMst_Key, TstGR.TstMst_name as TstMst_name,2 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  left join dbo.Set_GroupTest SMtst WITH(NOLOCK) ON Tst.TstMst_Key = SMtst.StGrpTst_GrpId LEFT JOIN Test_Mst TstGR ON TstGR.TstMst_Key = SMtst.[StGrpTst_TstCode]  WHERE  " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId =" + nYrId + " AND inv.Inv_Status != -1 and  TsT.[TstMst_TypeId] = -2 group by TstGR.TstMst_Key,TstGR.TstMst_name)a group by TestCount, TstMst_Key, TstMst_name";


                    }


                }
                else
                {
                    if (TstPrfrmView == 0)
                    {
                        sqlStr = "SELECT COUNT(Tst.TstMst_Key) as TestCount,Tst.TstMst_Key,Tst.TstMst_name from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId =Tst.TstMst_Key  " +
                                               "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name ORDER BY TstMst_name";

                    }
                    else
                    {
                        sqlStr = "SELECT SUM(TestCount) AS TestCount,TstMst_Key as TstMst_Key,TstMst_name as TstMst_name from (SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name,0 AS ntype  " +
"from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status != -1 AND TstMst_TypeId = -2 group by TstMst_Key, TstMst_name" +
" UNION " +
" SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name ,1 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId = " + nYrId + "" +
" AND inv.Inv_Status != -1 AND TstMst_TypeId != -2  group by TstMst_Key,TstMst_name" +
"  union " +
" SELECT COUNT(TstGR.TstMst_Key) as TestCount, TstGR.TstMst_Key as TstMst_Key, TstGR.TstMst_name as TstMst_name,2 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  left join dbo.Set_GroupTest SMtst WITH(NOLOCK) ON Tst.TstMst_Key = SMtst.StGrpTst_GrpId LEFT JOIN Test_Mst TstGR ON TstGR.TstMst_Key = SMtst.[StGrpTst_TstCode]  WHERE  " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId =" + nYrId + " AND inv.Inv_Status != -1 and  TsT.[TstMst_TypeId] = -2 group by TstGR.TstMst_Key,TstGR.TstMst_name)a group by TestCount, TstMst_Key, TstMst_name";

                    }

                }
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //adapt.Fill(dsPrint, "InvItmDetails_View");
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestPerformance.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_TestPerformance.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTestPerfomanceDivWise()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomanceDivisionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomanceDivisionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestPerfomanceDivWise(branchdetails tstPrfmncDivObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = tstPrfmncDivObj.ff;
                string todatee = tstPrfmncDivObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable InvItmDetails_View = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                InvItmDetails_View.TableName = "InvItmDetails_View";
                dtDetails.TableName = "dtDetails";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstPrfmncDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstPrfmncDivObj.BrMst_Name;
                Head1 = "TEST PERFORMANCE";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomanceDivisionWise";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomanceDivisionWise";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key " +
                            "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name,Mstr_Desc ORDER BY TstMst_name";

                }
                else
                {
                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key  " +
                                          "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                          " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name,mst.Mstr_Desc  ORDER BY TstMst_name";

                }
                cmd = new SqlCommand(sqlStr);
                //cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //adapt.Fill(dsPrint, "InvItmDetails_View");
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestPerformanceDiv.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_TestPerformanceDiv.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFMultplTstWiseInvce()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MultipleTestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "MultipleTestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult MultplTstWiseInvce(branchdetails multTstInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";
            string BrmstName = "";
            double BrmstKey = 0;
            string nCondition = "";
            string Condition = "";
            string sqlStr = "";
            string[] TestClctnObj = multTstInvObj.TestClctnObj;
            string[] TestKeyObj = multTstInvObj.TestKeyObj;
            BrmstName = multTstInvObj.BrMst_Name;
            BrmstKey = multTstInvObj.BrMst_Key;
            for (int i = 0; i < TestKeyObj.Count(); i++)
            {
                if (Condition == "")
                {
                    Condition += (TestKeyObj[i]).ToString();
                }
                else
                {
                    Condition += "," + (TestKeyObj[i]).ToString();
                }
            }
            if (l != null)
            {
                if (Condition != "")
                {
                    nCondition = " and TstMst_Key in(" + Condition + ")";
                }
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = multTstInvObj.ff;
                string todatee = multTstInvObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                DataSet dsPrint = new DataSet();
                DataTable dTitle = new DataTable();
                DataTable dtDetails = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrmstName;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Head1 = "TEST WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MultipleTestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "MultipleTestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "MultipleTestWiseInvoices";

                //****************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                             "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                             "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                             "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                             "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                             "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                             "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                             "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                             "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                             "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                             "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                             "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                             "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " + nCondition;
                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                            "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                            "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                            "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                            "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                            "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                            "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                            "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                            "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                            "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                            "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                            "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND  A.Inv_YrId = " + YearId + " " + nCondition;

                }
                cmd0 = new SqlCommand(sqlStr);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //****************************************************
                string filepath = "";
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MulTestwiseStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_MulTestwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    CrystalDecisions.Shared.DiskFileDestinationOptions CrDiskFileDestinationOptions = new CrystalDecisions.Shared.DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }

        //public ActionResult HomePage()
        //{

        //    return View();

        //}
        public JsonResult Getlookuptreeview()
        {
            var treeview = db.Masters.Select(x => new { x.Mstr_Type }).Distinct().OrderBy(x => x.Mstr_Type);
            //var treeview = from c in db.Masters 
            //                select c;

            return Json(treeview, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Getdatalookup(string row)

        {
            var lookup = from c in db.Masters
                         where c.Mstr_Type.Contains(row)
                         select c;
            return Json(lookup, JsonRequestBehavior.AllowGet);
        }



        //***********SAVE-LOOKUP-ENTRY*************************
        public JsonResult SAVELOOKUPENTRY(accountledgercs lookup)
        {
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            sqlcon.Open();
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            float valuelokkup = 0;
            string namelookup = "";
            string codelookup = "";

            //detaillookup ??; 
            string detaillookup = "";
            //DBNull detaillookup= ?? "";
            int masterkey = 0;
            string mastertype = "";
            try
            {
                valuelokkup = lookup.valueslookup;
                namelookup = lookup.namelookup;
                codelookup = lookup.codelookup;
                detaillookup = lookup.detailslookup ?? "";
                masterkey = lookup.masterkeylookup;
                mastertype = lookup.mastertype;
            }
            catch (Exception)
            {

            }
            Master mastertable = new Master();
            var masterskey = (from ad in db.Masters
                              select ad.Mstr_Key).Max();
            mastertable.Mstr_Key = masterskey + 1;
            mastertable.Mstr_Desc = lookup.namelookup;
            mastertable.Mstr_Code = lookup.codelookup;
            mastertable.Mstr_Details = lookup.detailslookup ?? "";
            mastertable.Mstr_Value = lookup.valueslookup;
            mastertable.Mstr_Type = lookup.mastertype;
            db.Masters.Add(mastertable);
            db.SaveChanges();
            sqlcon.Close();
            try
            {

            }




            catch (Exception exe)
            {
                var x = exe.InnerException;
                var y = exe.Message;

            }
            return Json(JsonRequestBehavior.AllowGet);

        }
        //*************END-SAVE-LOOKUP*********************************

        public JsonResult UPDATELOOKUPENTRY(accountledgercs lookup)
        {
            float valuelokkup = 0;
            string namelookup = "";
            string codelookup = "";
            string detaillookup;
            int masterkey = 0;
            string mastertype = "";
            try
            {
                valuelokkup = lookup.valueslookup;
                namelookup = lookup.namelookup;
                codelookup = lookup.codelookup;
                detaillookup = lookup.detailslookup;
                masterkey = lookup.masterkeylookup;
                mastertype = lookup.mastertype;
            }
            catch (Exception e)
            {

            }

            var updatelookupentry = (from c in db.Masters
                                     where c.Mstr_Key == lookup.masterkeylookup
                                     select c).FirstOrDefault();

            if (updatelookupentry != null)
            {
                updatelookupentry.Mstr_Code = lookup.codelookup;
                updatelookupentry.Mstr_Desc = lookup.namelookup;
                updatelookupentry.Mstr_Details = lookup.detailslookup;
                updatelookupentry.Mstr_Value = lookup.valueslookup;
                updatelookupentry.Mstr_Type = lookup.mastertype;
                db.SaveChanges();

            }
            return Json(true);
        }
       //********************END-SAVE-LOOKUP-ENTRY******************



//************************DELETE-LOOKUP-ENTRY************************
        public JsonResult DELETELOOKUPENTRY(accountledgercs lookup)
        {
            float valuelokkup = 0;
            string namelookup = "";
            string codelookup = "";
            string detaillookup;
            int masterkey = 0;
            string mastertype = "";
            try
            {
                valuelokkup = lookup.valueslookup;
                namelookup = lookup.namelookup;
                codelookup = lookup.codelookup;

                detaillookup = lookup.detailslookup;
                masterkey = lookup.masterkeylookup;
                mastertype = lookup.mastertype;
            }
            catch (Exception e)
            {

            }

            var deletelookupentry = (from c in db.Masters
                                     where c.Mstr_Key == lookup.masterkeylookup
                                     select c).FirstOrDefault();

            if (deletelookupentry != null)
            {
                db.Masters.Remove(deletelookupentry);

                db.SaveChanges();

            }
            return Json(true);
        }
       //*****************DELETE-LOOKUP-ENTRY**********************

    }
}