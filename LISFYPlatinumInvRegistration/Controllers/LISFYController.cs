using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using LISFYPlatinumInvRegistration.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Web.Mvc;

namespace LISFYPlatinumInvRegistration.Controllers
{
    public class LISFYController : Controller
    {
        connection con = new connection();
        CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
        branchdetails br = new branchdetails();
        //*****************************************
        string fordate = "";
        double PendsumNew = 0;
        public static int TstPrfrmView = 0;
        double PrependCash = 0;
        double PrePendCrd = 0;
        double Adnvce = 0;
        double Cashpend = 0;
        double TotalCash = 0;
        double TotalCard = 0;

        double ccardcoll = 0;
        double CreditPend = 0;

        double cashbalance = 0;
        double TotalPendingOn = 0;

        double npayments = 0;
        double NetCashBal = 0;
        double NetAmt = 0;
        double Creditamt = 0;

        double nBhim = 0;
        double nDiscamt = 0;
        double ngross = 0;
        //*********************
        double PendsumNew1 = 0;
        double PrependCash1 = 0;
        double PrePendCrd1 = 0;
        double Adnvce1 = 0;
        double Cashpend1 = 0;
        double TotalCash1 = 0;
        double TotalCard1 = 0;

        double ccardcoll1 = 0;
        double CreditPend1 = 0;

        double cashbalance1 = 0;
        double TotalPendingOn1 = 0;

        double npayments1 = 0;
        double NetCashBal1 = 0;
        double NetAmt1 = 0;
        double Creditamt1 = 0;
        double nBhim1 = 0;
        double nDiscamt1 = 0;
        double ngross1 = 0;
        //**************************************

        //*****************************************int Smry_Chk
        public static int BincDta = 0;
        public static int ProUserId = 0;
        public static int avoidYrIdRpt = 0;
        public static string HospitalName { get; set; }
        public int Month { get; }
        public int Monthcheck { get; }
        public string LabNoFrom = "";
        public string LabNoTo = "";
        public int Yearcheck { get; }
        public static int Smry_Chk { get; set; }
        public static int reportCheck { get; set; }
        public static DateTime StartDate = DateTime.Now;
        public static string brnchName { get; set; }
        public static string fdt { get; set; }
        public static string tdt { get; set; }
        public static string usrName { get; set; }
        public static double AhMst_Key { get; set; }
        public static int uptoCheck { get; set; }
        public static int DMCheck { get; set; }
        public static int brKey { get; set; }
        public static int usrKey { get; set; }
        public static DateTime fromdate { get; set; }
        public static DateTime todate { get; set; }
        public static string Nfile_name { get; set; }

        public static string FirmName { get; set; }
        public static string FirmAdd1 { get; set; }
        public static string FirmAdd2 { get; set; }
        public static string FirmAdd3 { get; set; }
        public static string PhoneNo { get; set; }
        public static string MailId { get; set; }
        public static string TinNo { get; set; }
        public static string CstNo { get; set; }
        public static string Br_Name { get; set; }
        //**************************************
        //        var vps = db.VehicleProperties.Where(a => a.EngineId == id).ToList();
        //foreach (var vp in vps)
        //    db.VehicleProperties.Remove(vp);
        //db.SaveChanges();
      
        public ActionResult Login()
        {
            logindetails ld = new logindetails();
            List<yeardetails> y = new List<yeardetails>();
            y = db.Database.SqlQuery<yeardetails>("Stproc_GET_YEAR_DETAILS").ToList();
            ViewBag.LoginImage = "LOGOMG.svg";
            //ViewBag.LoginImage = "LOGOMG.jpg";
            ViewBag.Brnchdls = db.Stproc_GET_BRNCH_DETAILS().ToList();
            ViewBag.list = y;
            return View();


        }
        public static string Encrypt(string input, string key)
        {
            byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }
        [HttpPost]
        public JsonResult Login(logindetails login)
        {
            try
            {
                //BrMst_Key BrMst_Name  Yr_Id UserName Password Yr_FYear
                if (login.Usr_Name != null && login.Usr_pwd != null)
                {

                    SqlCommand cmd = new SqlCommand();

                    //int LabCorp_Id = login.LabCorp_Id;
                    string UserName = (login.Usr_Name).Trim();
                    string Password = login.Usr_pwd;
                    string En_password = Encrypt(Password.Trim(), "sblw-3hn8-sqoy19");
                    int YrId = (int)login.Yr_Id;
                    //var loginobjects = db.Stproc_CHECK_LOGIN_DETAILS(UserName, En_password).ToList();
                    var loginobject = db.Users.Where(usr => usr.Usr_Name == UserName && usr.Usr_pwd == En_password).Select(u=>new { u.Usr_Name,u.Usr_pwd,u.Usr_key}).ToList();
                    var usrId = db.Users.Where(usr => usr.Usr_Name == UserName && usr.Usr_pwd == En_password).Select(u => u.Usr_key).FirstOrDefault();
                    if (loginobject != null)
                    {
                        foreach (var item in loginobject)
                        {
                            logindetails logn = new logindetails()
                            {
                                Usr_Name = item.Usr_Name,
                                Usr_pwd = item.Usr_pwd,
                                BrMst_Key = login.BrMst_Key,
                                BrMst_Name = login.BrMst_Name,
                                Yr_Id = login.Yr_Id,
                                Usr_key= (int)usrId
                            };
                            if (logn != null)
                            {
                                Session["logindls"] = logn;
                                return Json(new { Result = "OK", Record = logn });
                            }


                        }
                        return Json(new { Result = "ERROR" });
                    }
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }
                return Json(new { Result = "OK" });
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe });

            }
        }
        public ActionResult TestStatements()
        {
            return View();
        }
        public ActionResult HomePage()
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? Yr_Id = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
            }
            //opstatus = dr["OpBl_OpStatus"].ToString();
            ViewBag.BrnchName = l.BrMst_Name;
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            DateTime DateTemp = DateTime.Now;
            branchdetails dateDetls = Session["dateDls"] as branchdetails;
            sqlcon.Open();
            string AhMst_pName = "";
            double AhMst_Key = 0;
            List<branchdetails> brdls = new List<branchdetails>();
            //*****************************************************************
            SqlCommand cmd1 = new SqlCommand("select AhMst_pName,AhMst_Key from AccountHeads_Mst where AhMst_Type = 'AGENT' And AhMst_IsActive = 1", sqlcon);
            SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
            DataTable dt1 = new DataTable();
            sda1.Fill(dt1);
            foreach (DataRow dr in dt1.Rows)
            {
                branchdetails bds = new branchdetails()
                {
                    AhMst_pName = dr["AhMst_pName"].ToString(),
                    AhMst_Key = Convert.ToDouble(dr["AhMst_Key"])
                };
                brdls.Add(bds);
            }
            ViewBag.AgentDtls = brdls;
            //*****************************************************************
            double ccardcoll = 0;
            int CompanyId = 2;
            double PendsumNew = 0;
            int YearId = 2122;
            double PrependCash = 0;
            double PrePendCrd = 0;

            string sqlStr = "";
            //************************************
            DateTime frmdate = DateTime.Now;
            DateTime tdate = DateTime.Now;
            string fromdatee = frmdate.ToString("dd/MM/yyyy");
            string todatee = tdate.ToString("dd/MM/yyyy");
            ViewBag.FROMDATE = fromdatee;
            ViewBag.TODATE = todatee;
            ViewBag.AboutUsImage = "ABOUTUS.jpg";
            //ViewBag.HomeImage = "LOGOMG.jpg";
            ViewBag.HomeImage = "LOGOMG.svg";
            List<branchdetails> dpts = new List<branchdetails>();
            List<paymodeDetails> paymode = new List<paymodeDetails>();
            List<branchdetails> bs = new List<branchdetails>();
            List<branchdetails> usls = new List<branchdetails>();
            List<branchdetails> bdls = new List<branchdetails>();
            List<branchdetails> brlist = new List<branchdetails>();
            List<collectionDetails> collDtls = new List<collectionDetails>();
            List<collectionDetails> drDtls = new List<collectionDetails>();
            List<collectionDetails> tstDtls = new List<collectionDetails>();
            //*********************************************************
            int temprow = 0;
            int tmprow = 0;
            SqlCommand cmd;
            cmd = new SqlCommand("select Mstr_Desc,Mstr_Code,Mstr_Key from Masters where Mstr_Type='Specilzed' ", sqlcon);
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            DataTable dt2 = new DataTable();
            sda.Fill(dt2);
            foreach (DataRow dr in dt2.Rows)
            {
                collectionDetails cds = new collectionDetails()
                {
                    Mstr_Desc = dr["Mstr_Desc"].ToString(),
                    Mstr_Code = dr["Mstr_Code"].ToString(),
                    Mstr_Key = Convert.ToInt32(dr["Mstr_Key"])
                };
                collDtls.Add(cds);
                temprow += 1;
            }

            ViewBag.splzdDtls = collDtls;

            //////////////////////////////////
            cmd = new SqlCommand("SELECT TstMst_name AS Name,TstMst_Key AS Id FROM Test_Mst WITH (NOLOCK) ORDER BY TstMst_name", sqlcon);
            sda = new SqlDataAdapter(cmd);
            DataTable dt3 = new DataTable();
            sda.Fill(dt3);
            foreach (DataRow dr in dt3.Rows)
            {
                collectionDetails cds = new collectionDetails()
                {
                    TstMst_name = dr["Name"].ToString(),
                    TstMst_Key = dr["Id"].ToString()
                };
                tstDtls.Add(cds);
                temprow += 1;
            }
            ViewBag.tstDtls = tstDtls;
            ///////////////////////////////
            cmd = new SqlCommand(" select AhMst_pName,AhMst_Key,AhMst_SplID from AccountHeads_Mst where AhMst_Type = 'Doctor' and   AhMst_IsActive=1 ", sqlcon);
            sda = new SqlDataAdapter(cmd);
            DataTable dtDoctor = new DataTable();
            sda.Fill(dtDoctor);
            foreach (DataRow dr in dtDoctor.Rows)
            {
                collectionDetails dctrDls = new collectionDetails()
                {
                    AhMst_pName = dr["AhMst_pName"].ToString(),
                    AhMst_Key = Convert.ToInt32(dr["AhMst_Key"]),
                    AhMst_SplID = Convert.ToDouble(dr["AhMst_SplID"])
                };
                drDtls.Add(dctrDls);
                //grdDoctrs["SlNo", temprow].Value = temprow + 1;
                //grdDoctrs["DoctorsName", temprow].Value = dr["AhMst_pName"];
                //grdDoctrs["DctrId", temprow].Value = dr["AhMst_Key"];
                //grdDoctrs["SpllId", temprow].Value = dr["AhMst_SplID"];
                tmprow += 1;
            }
            ViewBag.DoctorDtls = drDtls;
            //*********************************************************
            List<Stproc_GET_CORPORATE_DTLS_Result> corpList = new List<Stproc_GET_CORPORATE_DTLS_Result>();
            corpList = db.Stproc_GET_CORPORATE_DTLS().ToList();
            ViewBag.corpList = corpList;
            List<branchdetails> brUsedls = new List<branchdetails>();
            ////******************************************************Usr_Name Usr_EmpId
            SqlCommand sqlCmd = new SqlCommand();
            sqlCmd.Connection = sqlcon;
            sqlCmd.CommandType = CommandType.Text;
            sqlCmd.CommandText = "SELECT ISNULL(Usr_Name,'') AS Usr_Name,ISNULL(Usr_EmpId,0) AS Usr_EmpId FROM Users WITH (NOLOCK) WHERE Usr_EmpId >0  ORDER BY Usr_Name";
            sda = new SqlDataAdapter(sqlCmd);
            //string Usr_Name
            DataTable dt = new DataTable();
            sda.Fill(dt1);
            if (dt1.Rows.Count > 0)
            {
                //grdCorporate.Rows.Add(dt.Rows.Count);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        branchdetails bs1 = new branchdetails()
                        {
                            Usr_Name = dr["Usr_Name"].ToString(),
                            Usr_EmpId = Convert.ToDouble(dr["Usr_EmpId"].ToString())
                        };
                        brUsedls.Add(bs1);
                    }
                    catch { }
                }
            }
            ViewBag.pndUsrDls = brUsedls;
            //*********************************************************
            List<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result> DrSplzdList = new List<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result>();
            DrSplzdList = db.Database.SqlQuery<Stproc_GET_DOCTOR_SPECIALIZED_DETAILS_Result>("Stproc_GET_DOCTOR_SPECIALIZED_DETAILS").ToList();
            ViewBag.DrSplzdList = DrSplzdList;
            List<Stproc_GET_BRANCH_DETAILS_Result> brlists = new List<Stproc_GET_BRANCH_DETAILS_Result>();
            var usrdls = db.Database.SqlQuery<Stproc_GET_USER_DETAILS_Result>("Stproc_GET_USER_DETAILS").ToList();
            ViewBag.Users = usrdls;
            var divDls = db.Database.SqlQuery<Stproc_GET_DIVISION_DETAILS_Result>("Stproc_GET_DIVISION_DETAILS").ToList();
            ViewBag.divisions = divDls;
            var doctrDls = db.Database.SqlQuery<Stproc_GET_DOCTOR_DETAILS_Result>("Stproc_GET_DOCTOR_DETAILS").ToList();
            ViewBag.doctors = doctrDls;
            var dptmntDls = db.Database.SqlQuery<Stproc_GET_DEPARTMENT_DETAILS_Result>("Stproc_GET_DEPARTMENT_DETAILS").ToList();
            foreach (Stproc_GET_DEPARTMENT_DETAILS_Result item in dptmntDls)
            {
                branchdetails department = new branchdetails()
                {
                    DptMnt_Id = (int)item.Id,
                    DptMnt_Name = item.Name
                };
                dpts.Add(department);

            }
            ViewBag.dptmntDls = dptmntDls;
            var paymodeDls = db.Database.SqlQuery<branchdetails>("Stproc_GET_PAYMODE_DETAILS").ToList();
            List<branchdetails> bdlss = new List<branchdetails>();
            foreach (branchdetails itm in paymodeDls)
            {
                branchdetails b = new branchdetails()
                {
                    Inv_PayMode = itm.Inv_PayMode
                };
                bdlss.Add(b);
                if (bdlss != null)
                {
                    Session["payModedls"] = bdlss;
                }
            }
            ViewBag.paymodes = bdlss;
            List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result> mstrist = new List<Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS_Result>();
            mstrist = db.Stproc_GET_DISCOUNT_WISE_MASTER_DETAILS().ToList();
            ViewBag.mstrist = mstrist;
            brlist = db.Database.SqlQuery<branchdetails>("Stproc_GET_BRANCH_DETAILS").ToList();
            brlists = db.Database.SqlQuery<Stproc_GET_BRANCH_DETAILS_Result>("Stproc_GET_BRANCH_DETAILS").ToList();
            foreach (Stproc_GET_BRANCH_DETAILS_Result item in brlists)
            {
                branchdetails brnc = new branchdetails()
                {
                    BrMst_Key = (double)item.BrMst_Key,
                    BrMst_Name = item.BrMst_Name
                };
                bs.Add(brnc);
                if (brnc != null)
                {
                    Session["branchdls"] = bs;
                }
            }
            foreach (Stproc_GET_USER_DETAILS_Result item in usrdls)
            {
                branchdetails usdls = new branchdetails()
                {
                    AhMst_Key = (double)item.AhMst_Key,
                    AhMst_pName = item.AhMst_pName
                };
                usls.Add(usdls);
                if (usdls != null)
                {
                    Session["usrdtls"] = usls;
                }
            }
            ViewBag.brlist = bs;
            sqlcon.Close();
            return View();

        }
        public JsonResult CheckAgent()
        {
            try
            {
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string AhMst_pName = "";
                double AhMst_Key = 0;
                List<branchdetails> brdls = new List<branchdetails>();
                //*****************************************************************
                SqlCommand cmd1 = new SqlCommand("select AhMst_pName,AhMst_Key from AccountHeads_Mst where AhMst_Type = 'AGENT' And AhMst_IsActive = 1 order by AhMst_Key", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    branchdetails bds = new branchdetails()
                    {
                        AhMst_pName = dr["AhMst_pName"].ToString(),
                        AhMst_Key = Convert.ToDouble(dr["AhMst_Key"])
                    };
                    brdls.Add(bds);
                }
                ViewBag.AgentDtls = brdls;
                sqlcon.Close();
                return Json(new { Result = "OK", Records = brdls });

            }
            catch (Exception exe)
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult InsuranceWiseColln(branchdetails insrncWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = insrncWiseObj.ff;
                string todatee = insrncWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = insrncWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = insrncWiseObj.BrMst_Name;
                Head1 = "INSURANCE WISE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "InsuranceWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "InsuranceWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition; //ISNULL(Inv_InsNo,'') <> '' 
                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                        "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                        "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                        "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                        "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                        "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                        "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                        "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                        "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                        "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit'  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition; //ISNULL(Inv_InsNo,'') <> '' 

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditCardwise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CreditCardwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFInsuranceWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "InsuranceWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "InsuranceWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CreditCardWiseColln(branchdetails crCardWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = crCardWiseObj.ff;
                string todatee = crCardWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = crCardWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = crCardWiseObj.BrMst_Name;
                Head1 = "CREDIT CARD WiSE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CreditCardWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CreditCardWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {


                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_Netamt As Inv_Netamt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition +
                            " UNION " +
                            "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt  as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,pend.PndC_Amount As Inv_Netamt " +
                            "FROM PendingCollections Pend Left Join  dbo.Invoice_Mst WITH (NOLOCK) On Pend.PndC_Labno=Invoice_Mst.Inv_No AND Pend.PndC_CpyId=Invoice_Mst.Inv_CpyId  AND Pend.PndC_YrId=Invoice_Mst.Inv_YrId LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON pend.PndC_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE  Pend.PndC_Date  >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  Pend.PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Pend.PndC_InvPaymode = 'Debit/Credit' AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " ORDER BY Inv_No ";

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_Netamt As Inv_Netamt " +
                                         "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                         "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode = 'Debit/Credit' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition +
                                         " UNION " +
                                         "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt  as NetAmt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,pend.PndC_Amount As Inv_Netamt " +
                                         "FROM PendingCollections Pend Left Join  dbo.Invoice_Mst WITH (NOLOCK) On Pend.PndC_Labno=Invoice_Mst.Inv_No AND Pend.PndC_CpyId=Invoice_Mst.Inv_CpyId  AND Pend.PndC_YrId=Invoice_Mst.Inv_YrId LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON pend.PndC_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                         "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Pend.PndC_InvPaymode = 'Debit/Credit'  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " ORDER BY Inv_No ";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditCardwise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CreditCardwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCreditCardWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CreditCardWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CreditCardWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyCashInvoice(branchdetails dailycashInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = dailycashInvObj.ff;
                string todatee = dailycashInvObj.tt;
                string nTblOut = "";
                string Nfile_name = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = dailycashInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCashInvoice";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND Inv_PayMode='Cash' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;

                }
                else
                {
                    //sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                    //      "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                    //      "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                    //      "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                    //      "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                    //      "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                    //      "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                    //      "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                    //      "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                    //      "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND Inv_PayMode='Cash' AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND Inv_PayMode='Cash' AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                   "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + condition;

                }
                else
                {
                    //   sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                    //"B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                    //"B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                    //"B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                    //"B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                    //"B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                    //"A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                    //"FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                    //"(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + condition;
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                      "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                      "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                      "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                      "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                      "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                      "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                      "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                      "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + condition;

                }
                ////************************************************************************

                //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingColl);
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + condition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.Pndc_CpyId=B.Inv_CpyId WHERE  " +
               "(PndC_Cancld <> 1)  AND PndC_InvPaymode='Cash' AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + condition;


                }
                double PedColSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PedColSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PedColSum = 0;
                }
                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["PendSum"] = PedColSum;
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyCashInv.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DailyCashInv.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        [HttpPost]
        public JsonResult DailyClctnStatements(branchdetails dailyColnStmnts)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dailyColnStmnts.ff;
                string todatee = dailyColnStmnts.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = dailyColnStmnts.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dailyColnStmnts.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionStatement";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_OthCmnt,dbo.Invoice_Mst.Inv_Comment,dbo.Invoice_Mst.Inv_ModalitDiv, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_OthCmnt,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                          "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                          "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                          "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                          "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                          "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                          "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                          "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                          "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);




                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                   "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                 "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                 "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                 "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                 "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                 "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                 "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                 "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                 "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'" + nCondition;

                }
                ////************************************************************************

                //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingColl);


                //*******CancelledInvoice******

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_CnlComnt,dbo.Invoice_Mst.Inv_Cnltmestmp " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status = - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;
                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_CnlComnt,dbo.Invoice_Mst.Inv_Cnltmestmp " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status = - 1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(CancelledInvoice);



                ///**********Cancelled Invoice End***************

                //**************************Credit Bill summary****************************
                try
                {
                    if (BrmstKey > 0)
                    {
                        sqlStr = " SELECT COUNT(Inv_No) as count,Ah.AhMst_pName as Corporate,SUM(Inv_Netamt) as NetAmt FROM Invoice_Mst With(Nolock) LEFT JOIN AccountHeads_Mst Ah On Inv_InsId=Ah.Ahmst_key  WHERE Inv_Yrid=" + nYrId + " And Inv_CpyId=" + BrmstKey + " And Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "' ANd Inv_InsId>0 And Inv_PayMode='Credit' GROUP BY AhMst_pName";
                    }

                    else
                    {
                        sqlStr = "SELECT COUNT(Inv_No) as count,Ah.AhMst_pName as Corporate,SUM(Inv_Netamt) as NetAmt FROM Invoice_Mst With(Nolock) LEFT JOIN AccountHeads_Mst Ah On Inv_InsId=Ah.Ahmst_key  WHERE Inv_Yrid=" + nYrId + "  And Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "' ANd Inv_InsId>0 And Inv_PayMode='Credit' GROUP BY AhMst_pName";
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                    sDa.Fill(CorpSummary);
                }
                catch { }
                //**************************END of Credit Bill summary*********************
                /////*****************PENDING REGISTER**************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_BalAmt <> 0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash' AND Inv_No not In (SELECT PndC_Labno FROm PendingCollections WHERE PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId=" + BrmstKey + ")";




                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(PendingReg);

                //************************************************************************

                //sqlStr = "SELECT SUM (PndC_Amount) AS PendSumAmt FROM PendingCollections WITH (NOLOCK) WHERE  " +
                // "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId = " + nCpyId ;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + nCondition;


                }
                double PedColSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PedColSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PedColSum = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Payment'  OR vchr_TransType='Day book') AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double CashPaySum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPaySum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPaySum = 0;
                }


                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode<>'Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode<>'Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double CreditSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CreditSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CreditSum = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(Inv_BalAmt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_BalAmt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Cash' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                            "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;
                }
                double Inv_BalSum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    Inv_BalSum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    Inv_BalSum = 0;
                }

                ////************************

                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendSumNew = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendSumNew = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendSumNew = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsRecAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Receipts' OR  vchr_TransType='Day book') AND vchr_CpyId = " + BrmstKey + "  AND vchr_BrId=" + BrmstKey;

                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsRecAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Receipts' OR  vchr_TransType='Day book') AND  vchr_BrId=" + BrmstKey;


                }
                double CashPayrEC = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPayrEC = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPayrEC = 0;
                }
                /////////////////////
                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + "  AND (PndC_InvPaymode='Debit/Credit' OR PndC_InvPaymode='BHIM/UPI Online Payment') ";

                    //sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' " +
                    //     "AND Inv_Status <> - 1 AND Inv_CpyId = " + nCpyId + " AND Inv_YrId = " + nYrId+" AND PndC_InvPaymode='Debit/Credit'";
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1   AND (PndC_InvPaymode='Debit/Credit' OR PndC_InvPaymode='BHIM/UPI Online Payment')'";

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendDebit = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendDebit = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendDebit = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double CreditAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CreditAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CreditAmt = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Debit/Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='Debit/Credit' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double DebitCreditAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    DebitCreditAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    DebitCreditAmt = 0;
                }
                //***************************************


                if (BrmstKey > 0)
                {
                    //sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromDate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + toDate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + _DaCollBranchId;
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + "  AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   AND vchr_BrId=" + BrmstKey;

                }
                double cashRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRecipts = 0;
                }
                //*********************************************


                //***************************************


                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashRfundRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRfundRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRfundRecipts = 0;
                }
                //*********************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                double PendColCur = 0;
                double PendColPre = 0;

                double PendColCurCash = 0;
                double PendColPreCard = 0;

                double PendColCurCard = 0;
                double PendColPrecash = 0;


                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCur = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCur = 0;
                }
                //*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'AND PndC_InvPaymode='Cash'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCash = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCard = 0;
                }
                //**************************
                double PendCurCheq = 0;
                double PendPreCheq = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurCheq = 0;
                }
                //**************************
                //**********************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPrecash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPrecash = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPreCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPreCard = 0;
                }
                //******************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreCheq = 0;
                }
                //********************************************
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************

                //*******************BHIM/UPI
                //**************************
                double PendCurBhimUpi = 0;
                double PendPreBhimUpi = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurBhimUpi = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurBhimUpi = 0;
                }
                //**************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='BHIM/UPI Online Payment' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreBhimUpi = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreBhimUpi = 0;
                }
                //***************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='BHIM/UPI Online Payment' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(Inv_Netamt) AS rsNetAMt From Invoice_Mst WITH (NOLOCK)  WHERE Inv_PayMode='BHIM/UPI Online Payment' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND Inv_Status <> - 1 AND  Inv_YrId = " + nYrId;

                }
                double BHIMUPIINVAmt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    BHIMUPIINVAmt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    BHIMUPIINVAmt = 0;
                }
                //***************************************

                //**************Cheque*************************
                if (BrmstKey > 0)
                {

                    sqlStr = " select isnull(sum(vchr_Receipt),0) as vouchercheque from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy-MM-dd") + "'and  vchr_CpyId =" + BrmstKey + "";


                }
                else
                {

                    sqlStr = " select isnull(sum(vchr_Receipt),0) as vouchercheque from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy-MM-dd") + "'";
                }
                double ChequeReceipt = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    ChequeReceipt = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    ChequeReceipt = 0;
                }
                //***************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_Date> =' " + StartDate.ToString("yyyy-MM-dd") + "' AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
    " ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningColl = Math.Round(OpeningColl, 2);
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                OpeningnewPrevPend = Math.Round(OpeningnewPrevPend, 2);
                //*************************END Of OPENING COLL***************************************
                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["PendSum"] = PedColSum;

                dtMaster.Columns.Add("CPaySum", typeof(double));
                dtMaster.Rows[0]["CPaySum"] = CashPaySum;

                dtMaster.Columns.Add("CreditSum1", typeof(double));
                dtMaster.Rows[0]["CreditSum1"] = CreditSum;

                dtMaster.Columns.Add("Inv_BalSum", typeof(double));
                dtMaster.Rows[0]["Inv_BalSum"] = Inv_BalSum;

                dtMaster.Columns.Add("PendSumNew", typeof(double));
                dtMaster.Rows[0]["PendSumNew"] = PendSumNew;


                dtMaster.Columns.Add("CRecsum", typeof(double));
                dtMaster.Rows[0]["CRecsum"] = CashPayrEC;

                dtMaster.Columns.Add("PendDebit", typeof(double));
                dtMaster.Rows[0]["PendDebit"] = PendDebit;

                dtMaster.Columns.Add("CreditAmt", typeof(double));
                dtMaster.Rows[0]["CreditAmt"] = CreditAmt;

                dtMaster.Columns.Add("DebitCreditAmt", typeof(double));
                dtMaster.Rows[0]["DebitCreditAmt"] = DebitCreditAmt;

                //dtMaster.Columns.Add("CashReceipt", typeof(double));
                //dtMaster.Rows[0]["CashReceipt"] = cashRecipts;

                //*************Pending Collection Data*************
                dtMaster.Columns.Add("PendColCur", typeof(double));
                dtMaster.Rows[0]["PendColCur"] = PendColCur;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;
                //***********************************************
                dtMaster.Columns.Add("PendColPreCash", typeof(double));
                dtMaster.Rows[0]["PendColPreCash"] = PendColPrecash;

                dtMaster.Columns.Add("PendColPreCard", typeof(double));
                dtMaster.Rows[0]["PendColPreCard"] = PendColPreCard;

                dtMaster.Columns.Add("PendColCurCash", typeof(double));
                dtMaster.Rows[0]["PendColCurCash"] = PendColCurCash;

                dtMaster.Columns.Add("PendColcurChq", typeof(double));
                dtMaster.Rows[0]["PendColcurChq"] = PendCurCheq;

                dtMaster.Columns.Add("PendColPreChq", typeof(double));
                dtMaster.Rows[0]["PendColPreChq"] = PendPreCheq;


                dtMaster.Columns.Add("PendColCurCard", typeof(double));
                dtMaster.Rows[0]["PendColCurCard"] = PendColCurCard;


                dtMaster.Columns.Add("dateColl", typeof(string));
                dtMaster.Rows[0]["dateColl"] = fromdate.ToString("dd-MM-yyyy");

                dtMaster.Columns.Add("nOpeningCol", typeof(string));
                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));
                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;


                dtMaster.Columns.Add("RefundRecipts", typeof(string));
                dtMaster.Rows[0]["RefundRecipts"] = cashRfundRecipts;


                dtMaster.Columns.Add("InvBhimUpi", typeof(string));
                dtMaster.Rows[0]["InvBhimUpi"] = BHIMUPIINVAmt;



                dtMaster.Columns.Add("PendPreBHIMUPI", typeof(string));
                dtMaster.Rows[0]["PendPreBHIMUPI"] = PendPreBhimUpi;




                dtMaster.Columns.Add("PendCurBhimUpi", typeof(string));
                dtMaster.Rows[0]["PendCurBhimUpi"] = PendCurBhimUpi;

                dtMaster.Columns.Add("ChequeReceipts", typeof(string));
                dtMaster.Rows[0]["ChequeReceipts"] = ChequeReceipt;

                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                dsPrint.Tables.Add(CancelledInvoice);
                dsPrint.Tables.Add(PendingReg);
                dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                //ReportDocument reportDocument = new ReportDocument();

                //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_LabToken.rpt";

                //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_LabToken.xsd");

                //reportDocument.Load(filepath);


                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CollectnStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public static DataTable FillTitleTbl(string Header1, string Header2, string Header3)
        {
            //CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
            CARE021112LisfyPlatinumEntities db = new CARE021112LisfyPlatinumEntities();
            List<Stproc_GET_CMPNY_MST_DTLS_Result> cpydl = new List<Stproc_GET_CMPNY_MST_DTLS_Result>();
            cpydl = db.Stproc_GET_CMPNY_MST_DTLS().ToList();
            foreach (Stproc_GET_CMPNY_MST_DTLS_Result item in cpydl)
            {
                FirmName = item.CmpMst_Name;
                FirmAdd2 = item.CmpMst_Addr2;
                FirmAdd1 = item.CmpMst_Addr1;
                FirmAdd3 = item.CmpMst_place;
                PhoneNo = item.CmpMst_Ph;
                MailId = item.CmpMst_Email;
            }


            DataTable dtTitle = new DataTable();
            dtTitle.TableName = "dtTitle";

            dtTitle.Columns.Add("FirmName", typeof(string));
            dtTitle.Columns.Add("FirmAdd1", typeof(string));
            dtTitle.Columns.Add("FirmAdd2", typeof(string));
            dtTitle.Columns.Add("FirmAdd3", typeof(string));
            dtTitle.Columns.Add("PhoneNo", typeof(string));
            dtTitle.Columns.Add("MailId", typeof(string));
            dtTitle.Columns.Add("TinNo", typeof(string));
            dtTitle.Columns.Add("CstNo", typeof(string));
            dtTitle.Columns.Add("Header1", typeof(string));
            dtTitle.Columns.Add("Header2", typeof(string));
            dtTitle.Columns.Add("Header3", typeof(string));
            //dtTitle.Columns.Add("_InvPrintType", typeof(int));


            dtTitle.Rows.Add();
            dtTitle.Rows[0]["FirmName"] = FirmName;
            dtTitle.Rows[0]["FirmAdd1"] = FirmAdd1;
            dtTitle.Rows[0]["FirmAdd2"] = FirmAdd2;
            dtTitle.Rows[0]["FirmAdd3"] = FirmAdd3;
            dtTitle.Rows[0]["PhoneNo"] = PhoneNo;
            dtTitle.Rows[0]["MailId"] = MailId;
            dtTitle.Rows[0]["TinNo"] = TinNo;
            dtTitle.Rows[0]["CstNo"] = CstNo;
            dtTitle.Rows[0]["Header1"] = Header1;
            dtTitle.Rows[0]["Header2"] = Header2;
            dtTitle.Rows[0]["Header3"] = Header3;
            //dtTitle.Rows[0]["_InvPrintType"] = Header3;
            return dtTitle;
        }
        public FileResult PDFDailyCollctnStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyClctnSummary(branchdetails dailyCollnSmryObj)
        {



            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string sqlStr = "";
                string Head2 = "";
                SqlDataAdapter sDa = new SqlDataAdapter();
                string fromdatee = dailyCollnSmryObj.ff;
                string todatee = dailyCollnSmryObj.tt;
                //*****************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                DateTimeConverter cx = new DateTimeConverter();
                string fromdt = fromdat.ToShortDateString();
                string todt = todat.ToShortDateString();
                //DateTime fdts = Convert.ToDateTime(fromdt);
                //DateTime tdts = Convert.ToDateTime(todt);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                //string fromdat = Convert.ToDateTime(fromdatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
                //string todat = Convert.ToDateTime(todatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);

                //int nYrId = 2122;
                brnchName = dailyCollnSmryObj.BrMst_Name;
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                SqlCommand cmd = new SqlCommand();
                string Head3 = "";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                string Head1 = "";
                string nCondition = "";
                double BrmstKey = 0;
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";

                string BrmstName = dailyCollnSmryObj.BrMst_Name;
                Head1 = "COLLECTION SUMMERY";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstName;
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                          " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                          " UNION " +
                          "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + "  AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                          " UNION " +
                          " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + "  AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                           " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";

                }
                else
                {
                    //sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal ,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt FROM " +

                    // " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType', case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND  Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                    //" UNION " +
                    // "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4, 0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1)  AND PndC_YrId = " + nYrId + " AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                    //" UNION " +
                    // " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType', 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1)   AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                    //" A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";
                    //***********************************************************
                    //sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                    //     " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                    //     " UNION " +
                    //     "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_YrId = " + nYrId + " AND  PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                    //     " UNION " +
                    //     " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                    //      " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";


                    //******************

                    sqlStr = "SELECT  Mdate,SUM(Gross) as Gross,Sum(DiscAmt) as DiscAmt, SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments,SUM(amt14) Recipts, SUM(amt13) CurBal, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,sum( BhimAmt)AS BhimAmt,sum(Cardamt)AS Cardamt  FROM " +

                             " ( SELECT  Inv_Date AS Mdate,(sum(Inv_Netamt) + Sum(Inv_DiscAmt)) as Gross,Sum(Inv_DiscAmt) as DiscAmt, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4,0 AS amt14, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt13, 'InDate' AS 'SType',0 as CashPend ,0 as CreditPend, case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_NetAmt) else 0 end AS BhimAmt, case when Inv_PayMode='Debit/Credit' then SUM(Inv_NetAmt) else 0 end AS Cardamt FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1)  AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' " + nCondition + " GROUP BY Inv_Date ,Inv_PayMode " +
                             " UNION " +
                             "  SELECT PndC_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,0 AS amt14,0 AS amt13,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend, case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end AS BhimAmt, case when PndC_InvPaymode='Debit/Credit' then SUM(PndC_Amount) else 0 end AS Cardamt FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1)  AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date,PndC_InvPaymode  " +
                             " UNION " +
                             " SELECT vchr_Date AS Mdate,0 as Gross,0 as DiscAmt, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4, SUM(vchr_Receipt) AS amt14,0 AS amt13,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend, 0 AS BhimAmt, 0 AS Cardamt  FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1)   AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                              " A WHERE A.Mdate >=  '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Mdate <=  '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);



                ////*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND Inv_Status <> - 1 AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                     "AND Inv_Status <> - 1  AND Inv_YrId = " + nYrId;

                }
                // sqlStr = "SELECT SUM(PndC_Amount) AS rsNetAMt From  PendingCollections where PndC_Labno>=" + MinLabNo + " AND PndC_Labno<=" + MaxLabnO + "";

                double PendSumNew = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendSumNew = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendSumNew = 0;
                }
                //***************************************
                //***************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                double PendColCur = 0;
                double PendColPre = 0;

                double PendColCurCash = 0;
                double PendColPreCard = 0;

                double PendColCurCard = 0;
                double PendColPrecash = 0;


                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCur = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCur = 0;
                }
                //*************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'AND PndC_InvPaymode='Cash'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCash = 0;
                }
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColCurCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColCurCard = 0;
                }
                //**************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPrecash = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPrecash = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode!='Cash' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPreCard = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPreCard = 0;
                }
                //********************************************
                //**************************
                double PendCurCheq = 0;
                double PendPreCheq = 0;
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendCurCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendCurCheq = 0;
                }
                //**************************
                //******************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cheque' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendPreCheq = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendPreCheq = 0;
                }
                //********************************************
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
    " ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                //*************************END Of OPENING COLL***************************************




                dtMaster.Columns.Add("PendSum", typeof(double));
                dtMaster.Rows.Add(0);

                dtMaster.Columns.Add("PendSumNew", typeof(double));
                dtMaster.Rows[0]["PendSumNew"] = PendSumNew;
                //*************Pending Collection Data*************
                dtMaster.Columns.Add("PendColCur", typeof(double));
                dtMaster.Rows[0]["PendColCur"] = PendColCur;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;
                //***********************************************
                dtMaster.Columns.Add("PendColPreCash", typeof(double));
                dtMaster.Rows[0]["PendColPreCash"] = PendColPrecash;

                dtMaster.Columns.Add("PendColPreCard", typeof(double));
                dtMaster.Rows[0]["PendColPreCard"] = PendColPreCard;

                dtMaster.Columns.Add("PendColCurCash", typeof(double));
                dtMaster.Rows[0]["PendColCurCash"] = PendColCurCash;

                dtMaster.Columns.Add("PendColCurCard", typeof(double));
                dtMaster.Rows[0]["PendColCurCard"] = PendColCurCard;


                dtMaster.Columns.Add("PendColcurChq", typeof(double));
                dtMaster.Rows[0]["PendColcurChq"] = PendCurCheq;

                dtMaster.Columns.Add("PendColPreChq", typeof(double));
                dtMaster.Rows[0]["PendColPreChq"] = PendPreCheq;

                dtMaster.Columns.Add("nOpeningCol", typeof(string));

                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));

                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                //*********************************************************
                string Reportfilepaths = "";
                string filepath = "";
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(PendingColl);
                dsPrint.Tables.Add(CancelledInvoice);
                dsPrint.Tables.Add(PendingReg);
                dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CollectnSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFDailyCashInvoice()

        {
            string fileName = "";
            if (brKey > 0)
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCashInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            //fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
            //fileName = fileName + ".pdf";
            //string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            //byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            //return File(FileBytes, "application/pdf");

        }
        public FileResult PDFDailyCollctnSmry()

        {
            string fileName = "";





            if (brKey > 0)
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DailyCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        [HttpPost]
        public JsonResult DailyClctnSummary2(branchdetails dailyCollnSmry2)
        {
            int RowAdd = 0;
            int CountData = 0;
            int Totaldata = 0;
            string fordate = "";
            int MonthTemp = 0;
            int YearTempr = 0;
            int mnth = 0;
            int yr = 0;
            string YearTemp = "";
            //***********************************
            int RowNo = 0;
            double PendsumNew1 = 0;
            double PrependCash1 = 0;
            double PrePendCrd1 = 0;
            double Adnvce1 = 0;
            double Cashpend1 = 0;
            double TotalCash1 = 0;
            double TotalCard1 = 0;

            double ccardcoll1 = 0;
            double CreditPend1 = 0;

            double cashbalance1 = 0;
            double TotalPendingOn1 = 0;

            double npayments1 = 0;
            double NetCashBal1 = 0;
            double NetAmt1 = 0;
            double Creditamt1 = 0;
            double nBhim1 = 0;
            double nDiscamt1 = 0;
            double ngross1 = 0;
            //*******************************
            Adnvce = 0;
            Cashpend = 0;
            TotalCash = 0;
            TotalCard = 0;
            CreditPend = 0;
            cashbalance = 0;
            TotalPendingOn = 0;
            npayments = 0;
            NetCashBal = 0;
            NetAmt = 0;
            Creditamt = 0;
            nBhim = 0;
            ngross = 0;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                double ccardcoll = 0;
                SqlCommand cmd1 = new SqlCommand();
                string sqlStr = "";
                //int CompanyId = 2;
                double PendsumNew = 0;
                //int YearId = 2122;
                double PrependCash = 0;
                double PrePendCrd = 0;
                List<collectionDetails> cdlss = new List<collectionDetails>();
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = dailyCollnSmry2.ff;
                string todatee = dailyCollnSmry2.tt;
                //******************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                //string date = f.ToString("dd/MM/yyyy");
                //DateTime fromdat = Convert.ToDateTime(date);


                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                //string date1 = f.ToString("dd/MM/yyyy");
                //DateTime todat = Convert.ToDateTime(date1);

                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = dailyCollnSmry2.rowCount;
                //int CompanyId = 2;
                //int YearId = 2122;
                int optDaily = dailyCollnSmry2.dailyCheck;
                int RowCount = 0;
                List<Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result> clctsmry = new List<Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result>();
                clctsmry = db.Stproc_GET_COLLECTION_SUMMERY_DETAILS((int?)CompanyId, (int?)YearId, fromdat, todat).ToList();
                //Totaldata = (clctsmry.Count()) - 1;
                if (dailyCollnSmry2.dailyCheck == 0)
                {
                    if (clctsmry.Count > 0)
                    {
                        RowCount = clctsmry.Count;
                    }
                }
                else
                {
                    Totaldata = clctsmry.Count - 1;
                }
                List<collectionDetails> cds = new List<collectionDetails>();
                foreach (Stproc_GET_COLLECTION_SUMMERY_DETAILS_Result item in clctsmry)
                {

                    collectionDetails cs = new collectionDetails()
                    {
                        Mdate = (DateTime)item.Mdate,
                        Discamt = item.Discamt,
                        Netamt = item.Netamt,
                        Advance = item.Advance,
                        CashBalance = item.CashBalance,
                        CredBalance = item.CredBalance,
                        CCardBalance = item.CCardBalance,
                        PendCol = item.PendCol,
                        Payments = item.Payments,
                        NetBal = item.NetBal,
                        CashPend = item.CashPend,
                        CreditPend = item.CreditPend,
                        Bhim = item.Bhim
                    };
                    cds.Add(cs);

                }
                //foreach (collectionDetails css in cds)
                //{

                //}
                //Session["clctnSmry2"] = cds;
                if (cds != null)
                {
                    foreach (collectionDetails item in cds)
                    {
                        mnth = ((DateTime)item.Mdate).Month;
                        yr = ((DateTime)item.Mdate).Year;
                        try
                        {
                            DateTemp = Convert.ToDateTime(item.Mdate);
                        }
                        catch { }


                        sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                         "(PndC_Cancld <> 1) AND PndC_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Cash' AND  Inv_Date < '" + DateTemp.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + " AND Inv_BrID=" + CompanyId;

                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PrependCash = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }
                        sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                         "(PndC_Cancld <> 1) AND PndC_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_InvPaymode='Debit/Credit' AND  Inv_Date < '" + DateTemp.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + " AND Inv_BrID=" + CompanyId;

                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PrePendCrd = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }
                        sqlStr = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + DateTemp.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + DateTemp.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + DateTemp.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId;
                        try
                        {
                            cmd1 = new SqlCommand(sqlStr, sqlcon);
                            PendsumNew = Convert.ToDouble(cmd1.ExecuteScalar());
                        }
                        catch { }

                        try
                        {
                            ccardcoll = Convert.ToDouble(item.CCardBalance);
                            ccardcoll = ccardcoll * -1;
                        }
                        catch { }
                        if (dailyCollnSmry2.dailyCheck == 1)
                        {
                            if (RowAdd == 0)
                            {

                                RowAdd = 1;
                                MonthTemp = DateTemp.Month;
                                YearTemp = DateTemp.ToString("MMM-yyyy");
                            }

                        }

                        int MonthTempCheck = DateTemp.Month;

                        List<collectionDetails> cdls = new List<collectionDetails>();
                        if (dailyCollnSmry2.dailyCheck == 0)
                        {
                            collectionDetails cs = new collectionDetails()
                            {

                                Mdate = item.Mdate,
                                Discamt = item.Discamt,
                                Netamt = item.Netamt,
                                Advance = item.Advance,
                                CashBalance = item.CashBalance,
                                CredBalance = item.CredBalance,
                                CCardBalance = item.CCardBalance,
                                PendCol = item.PendCol,
                                Payments = item.Payments,
                                NetBal = item.NetBal,
                                CashPend = item.CashPend,
                                CreditPend = item.CreditPend,
                                Bhim = item.Bhim,
                                //s = (item.Mdate).ToString(),
                                M_date = (item.Mdate).ToString(),
                                CashColl = (item.Advance) + (item.CashPend) - PrependCash,
                                CardColl = ccardcoll + (item.CreditPend) - PrePendCrd,
                                Credit = (item.CredBalance),
                                PndngOnSameDay = ((item.CashBalance) + PendsumNew) * -1,
                                PrePendCashColl = PrependCash,
                                PrePendCardColl = PrePendCrd,
                                Payment = item.Payments,
                                NetCash = (item.CashPend) + (item.Advance) - (item.Payments),
                                nBhim = item.Bhim,
                                Balance = item.Netamt
                            };
                            cls.Add(cs);
                        }
                        else
                        {
                            //************************************************
                            if (MonthTemp != MonthTempCheck || Totaldata == CountData)
                            {

                                if (Totaldata == CountData && MonthTemp == MonthTempCheck)
                                {
                                    PendsumNew1 += PendsumNew;
                                    PrependCash1 += PrependCash;
                                    PrePendCrd1 += PrePendCrd;
                                    Adnvce1 += (double)item.Advance;
                                    Cashpend1 += (double)item.CashPend;


                                    ccardcoll1 += ccardcoll;
                                    CreditPend1 += (double)item.CreditPend;

                                    cashbalance1 += (double)item.CashBalance;

                                    Creditamt1 += (double)item.CredBalance;
                                    npayments1 += (double)item.Payments;

                                    nBhim1 += (double)item.Bhim;

                                    NetAmt1 += (double)item.Netamt;
                                    nDiscamt1 += (double)item.Discamt;
                                    ngross1 = NetAmt1 + nDiscamt1;

                                }

                                //******************************************
                                TotalCash1 = Adnvce1 + Cashpend1 - PrependCash1;
                                TotalCard1 = ccardcoll1 + CreditPend1 - PrePendCrd1;
                                TotalPendingOn1 = (cashbalance1 + PendsumNew1) * -1;
                                NetCashBal1 = Cashpend1 + Adnvce1 - npayments1;
                                ngross1 = NetAmt1 + nDiscamt1;
                                //******************************************
                                collectionDetails cs = new collectionDetails()
                                {
                                    CashColl = TotalCash1,
                                    CardColl = TotalCard1,
                                    Credit = Creditamt1,
                                    PndngOnSameDay = TotalPendingOn1,
                                    Payment = npayments1,
                                    PrePendCashColl = PrependCash1,
                                    PrePendCardColl = PrePendCrd1,
                                    NetCash = NetCashBal1,
                                    Balance = NetAmt1,
                                    M_date = YearTemp,
                                    nBhim = nBhim1,
                                    Grossamt = ngross1,
                                    DiscAmt = nDiscamt1
                                };
                                cls.Add(cs);


                                if (Totaldata != CountData)
                                {
                                    YearTemp = DateTemp.ToString("MMM-yyyy");
                                    PendsumNew1 = PendsumNew;
                                    PrependCash1 = PrependCash;
                                    PrePendCrd1 = PrePendCrd;
                                    Adnvce1 = (double)item.Advance;
                                    Cashpend1 = (double)item.CashPend;
                                    TotalCash1 = TotalCash;
                                    TotalCard1 = TotalCard;
                                    Creditamt1 = (double)item.CredBalance;
                                    ccardcoll1 = ccardcoll;
                                    CreditPend1 = (double)item.CreditPend;

                                    cashbalance1 = (double)item.CashBalance;
                                    TotalPendingOn1 = TotalPendingOn;

                                    npayments1 = (double)item.Payments;
                                    NetCashBal1 = NetCashBal;
                                    nBhim1 = (double)item.Bhim;
                                    NetAmt1 = (double)item.Netamt;
                                    nDiscamt1 = (double)item.Discamt;
                                    RowAdd = 0;
                                    RowNo += 1;


                                }

                                if (Totaldata == CountData && MonthTemp != MonthTempCheck)
                                {
                                    PendsumNew1 = PendsumNew;
                                    PrependCash1 = PrependCash;
                                    PrePendCrd1 = PrePendCrd;
                                    Adnvce1 = (double)item.Advance;
                                    Cashpend1 = (double)item.CashPend;
                                    TotalCash1 = TotalCash;
                                    TotalCard1 = TotalCard;
                                    Creditamt1 = (double)item.CredBalance;
                                    ccardcoll1 = ccardcoll;
                                    CreditPend1 = (double)item.CreditPend;

                                    cashbalance1 = (double)item.CashBalance;
                                    TotalPendingOn1 = TotalPendingOn;

                                    npayments1 = (double)item.Payments;
                                    NetCashBal1 = NetCashBal;
                                    nBhim1 = (double)item.Bhim;
                                    NetAmt1 = (double)item.Netamt;
                                    nDiscamt1 = (double)item.Discamt;

                                    ngross1 = NetAmt1 + nDiscamt1;
                                    RowAdd = 0;
                                    //grdsummary.Rows.Add();
                                    RowNo += 1;
                                    //******************************************
                                    TotalCash1 = Adnvce + Cashpend - PrependCash;
                                    TotalCard1 = ccardcoll + CreditPend - PrePendCrd;
                                    TotalPendingOn1 = (cashbalance + PendsumNew) * -1;
                                    NetCashBal1 = Cashpend + Adnvce - npayments;
                                    collectionDetails cs1 = new collectionDetails()
                                    {
                                        CashColl = TotalCash1,
                                        CardColl = TotalCard1,
                                        Credit = Creditamt1,
                                        PndngOnSameDay = TotalPendingOn1,
                                        Payment = npayments1,
                                        PrePendCashColl = PrependCash1,
                                        PrePendCardColl = PrePendCrd1,
                                        NetCash = NetCashBal1,
                                        Balance = NetAmt1,
                                        M_date = YearTemp,
                                        nBhim = nBhim1,
                                        Grossamt = ngross1,
                                        DiscAmt = nDiscamt1
                                    };
                                    cls.Add(cs);

                                }
                            }
                            else
                            {
                                PendsumNew1 += PendsumNew;
                                PrependCash1 += PrependCash;
                                PrePendCrd1 += PrePendCrd;
                                Adnvce1 += (double)item.Advance;
                                Cashpend1 += (double)item.CashPend;
                                ccardcoll1 += ccardcoll;
                                CreditPend1 += (double)item.CreditPend;
                                cashbalance1 += (double)item.CashBalance;
                                npayments1 += (double)item.Payments;
                                NetAmt1 += (double)item.Netamt;
                                Creditamt1 += (double)item.CredBalance;
                                nDiscamt1 += (double)item.Discamt;

                            }
                        }
                        CountData += 1;
                        //************************************************

                    }

                }



                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new
                {
                    Result = "OK",
                    Record = cls
                });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult ClctnSummary2Print(branchdetails dailyCollnSmryObj)
        {

            string fromdatee = dailyCollnSmryObj.ff;
            string todatee = dailyCollnSmryObj.tt;
            string Nfile_name = "";
            //********************
            //string[] dateString2 = fromdatee.Split('/');
            //if (Convert.ToInt32(dateString2[1]) < 10)
            //{
            //    dateString2[1] = "0" + dateString2[1];
            //}
            //if (Convert.ToInt32(dateString2[0]) < 10)
            //{
            //    dateString2[0] = "0" + dateString2[0];
            //}

            //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
            ////fromdat 11 / 30 / 2021 11:11:40 AM
            //string[] dateString3 = todatee.Split('/');
            //if (Convert.ToInt32(dateString3[1]) < 10)
            //{
            //    dateString3[1] = "0" + dateString3[1];
            //}
            //if (Convert.ToInt32(dateString3[0]) < 10)
            //{
            //    dateString3[0] = "0" + dateString3[0];
            //}
            //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
            //**********************
            string[] dateString = fromdatee.Split('/');
            DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
            string[] dateString2 = todatee.Split('/');
            DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
            fromdate = fromdat;
            todate = todat; /*Br_Name fromdate todate*/
            fdt = fromdate.ToString("ddMMyyyy");
            tdt = todate.ToString("ddMMyyyy");
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                Br_Name = BrMst_Name;
                //**************************************
                //DateTime nInvDate = DateTime.Now;
                DateTime nInvDate = DateTime.Now;
                double nNetamount = 0;
                double nCashcoll = 0;
                double nCardColl = 0;
                double nPendSmDay = 0;
                double nPrePendCash = 0;
                double nPrePendCard1 = 0;
                double nPaymnts = 0;
                double nNetCashBal = 0;
                double nCredit = 0;
                double nBhim = 0;
                double nDiscAmt = 0;
                double ngross = 0;

                int nDtRow = 0;
                DataTable DailyColl = new DataTable();
                DailyColl.TableName = "DailyCollSummary";
                DailyColl.Columns.Add("InvDate", typeof(DateTime));
                DailyColl.Columns.Add("Netamount", typeof(float));
                DailyColl.Columns.Add("Cashcoll", typeof(float));
                DailyColl.Columns.Add("CardColl", typeof(float));
                DailyColl.Columns.Add("PendSmDay", typeof(float));
                DailyColl.Columns.Add("PrePendCash", typeof(float));
                DailyColl.Columns.Add("PrePendCard1", typeof(float));
                DailyColl.Columns.Add("Paymnts", typeof(float));
                DailyColl.Columns.Add("NetCashBal", typeof(float));
                DailyColl.Columns.Add("Credit", typeof(float));
                DailyColl.Columns.Add("Bhim", typeof(float));
                DailyColl.Columns.Add("DiscAmt", typeof(float));
                DailyColl.Columns.Add("GrossAmt", typeof(float));
                SqlCommand cmd0;
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "CollectionSummery2";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                List<collectionDetails> cls = new List<collectionDetails>();
                SqlDataAdapter sd0;
                DataSet ds0 = new DataSet();
                //logindetails l = Session["logindls"] as logindetails;
                List<collectionDetails> clctn = Session["CollSmry2"] as List<collectionDetails>;
                if (clctn.Count == 0)
                {
                    return Json(new { Result = "ERROR" });
                }
                else
                {
                    foreach (collectionDetails item in clctn)
                    {
                        //for (int i = 0; i < clctn.Count; i++)
                        //{
                        nInvDate = DateTime.Now;
                        nNetamount = 0;
                        nCashcoll = 0;
                        nCardColl = 0;
                        nPendSmDay = 0;
                        nPrePendCash = 0;
                        nPrePendCard1 = 0;
                        nPaymnts = 0;
                        nNetCashBal = 0;
                        nCredit = 0;
                        DailyColl.Rows.Add();
                        //*******************************************************
                        try
                        {
                            nInvDate = Convert.ToDateTime(item.M_date);

                        }
                        catch { }

                        try
                        {
                            nNetamount = Convert.ToDouble(item.NetCash);

                        }
                        catch { }
                        try
                        {
                            nCashcoll = Convert.ToDouble(item.CashColl);

                        }
                        catch { }
                        try
                        {
                            nCardColl = Convert.ToDouble(item.CardColl);

                        }
                        catch { }

                        try
                        {
                            nPendSmDay = Convert.ToDouble(item.PndngOnSameDay);

                        }
                        catch { }
                        try
                        {
                            nPrePendCash = Convert.ToDouble(item.PrePendCashColl);

                        }
                        catch { }
                        try
                        {
                            nPrePendCard1 = Convert.ToDouble(item.PrePendCardColl);

                        }
                        catch { }


                        try
                        {
                            nPaymnts = Convert.ToDouble(item.Payment);

                        }
                        catch { }
                        try
                        {
                            nNetCashBal = Convert.ToDouble(item.Balance);

                        }
                        catch { }
                        try
                        {
                            nCredit = Convert.ToDouble(item.Credit);

                        }
                        catch { }

                        try
                        {
                            nBhim = Convert.ToDouble(item.nBhim);

                        }
                        catch { }
                        try
                        {
                            nDiscAmt = Convert.ToDouble(item.Discamt);

                        }
                        catch { }
                        try
                        {
                            ngross = Convert.ToDouble(item.Grossamt);

                        }
                        catch { }
                        //*************************************************************
                        collectionDetails cs1 = new collectionDetails()
                        {
                            CashColl = TotalCash1,
                            CardColl = TotalCard1,
                            Credit = Creditamt1,
                            PndngOnSameDay = TotalPendingOn1,
                            Payment = npayments1,
                            PrePendCashColl = PrependCash1,
                            PrePendCardColl = PrePendCrd1,
                            NetCash = NetCashBal1,
                            Balance = NetAmt1,
                            M_date = Convert.ToString(nInvDate),
                            nBhim = nBhim1,
                            Grossamt = ngross1,
                            DiscAmt = nDiscamt1
                        };
                        cls.Add(cs1);
                        //dt.Rows[0]["Rpt_Type_Index"] = cb_rptType.SelectedIndex;
                        //dt.Rows[0]["TestName"] = TstMst_name;
                        //dt.Rows[0]["PendingTestName"] = tstname;
                        DailyColl.Rows[nDtRow]["InvDate"] = nInvDate;
                        DailyColl.Rows[nDtRow]["Netamount"] = nNetamount;
                        DailyColl.Rows[nDtRow]["Cashcoll"] = nCashcoll;
                        DailyColl.Rows[nDtRow]["CardColl"] = nCardColl;
                        DailyColl.Rows[nDtRow]["PendSmDay"] = nPendSmDay;
                        DailyColl.Rows[nDtRow]["PrePendCash"] = nPrePendCash;
                        DailyColl.Rows[nDtRow]["PrePendCard1"] = nPrePendCard1;
                        DailyColl.Rows[nDtRow]["Paymnts"] = nPaymnts;
                        DailyColl.Rows[nDtRow]["NetCashBal"] = nNetCashBal;
                        DailyColl.Rows[nDtRow]["Credit"] = nCredit;
                        DailyColl.Rows[nDtRow]["Bhim"] = nBhim;
                        DailyColl.Rows[nDtRow]["DiscAmt"] = nDiscAmt;
                        DailyColl.Rows[nDtRow]["GrossAmt"] = ngross;
                        nDtRow += 1;
                        //}
                    }
                    cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    ds0.Tables.Add(DailyColl);
                    sqlcon.Close();
                    ReportDocument reportDocument = new ReportDocument();
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnSummary2.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_CollectnSummary2.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";


                    try
                    {


                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();




                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                }
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCollectionSummary2()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "CollectionSummery2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFBranchWiseCollection()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFPatientWiseClctn()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult BranchWiseCollection(branchdetails BrnchObj)
        {
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchObj.checkedBrnch;
            string[] checkedBrnchId = BrnchObj.checkedBrnchId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchObj.ff;
                string todatee = BrnchObj.tt;
                //DateTime s = DateTime.Parse(fromdatee);
                //*****************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //***************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_IsInsrnce, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_name," + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Address, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_SmplDate, dbo.Invoice_Mst.Inv_RsltNO, dbo.Invoice_Mst.Inv_BrID, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_time, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_InsId, dbo.Invoice_Mst.Inv_AreaId, dbo.Invoice_Mst.Inv_EmailtoPatient, dbo.Invoice_Mst.Inv_Email, dbo.Invoice_Mst.Inv_EtoDr, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DrId, dbo.Invoice_Mst.Inv_OutDr, dbo.Invoice_Mst.Inv_hospId, dbo.Invoice_Mst.Inv_Schrge, dbo.Invoice_Mst.Inv_DiscId, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_CltnID, dbo.Invoice_Mst.Invl_DiscPer, dbo.Invoice_Mst.Inv_RepTime, dbo.Invoice_Mst.Inv_GrosAmt, dbo.Invoice_Mst.Inv_DiscAmt, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Inv_BalAmt, dbo.Invoice_Mst.Inv_Comment, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_CmpltdDate, dbo.Invoice_Mst.Inv_CmpltdTime, dbo.Invoice_Mst.Inv_OthCmnt, dbo.Invoice_Mst.Inv_User, dbo.Invoice_Mst.Invl_IsPending, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_Status, dbo.Invoice_Mst.Inv_CnlComnt, dbo.Invoice_Mst.Inv_Cnltmestmp, dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, " + Environment.NewLine
                            + "dbo.Baranches_Mst.BrMst_Code, dbo.Baranches_Mst.BrMst_Name, dbo.AccountHeads_Mst.AhMst_pName AS Insurance, " + Environment.NewLine
                            + "AccountHeads_Mst_1.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS HospName," + Environment.NewLine
                            + "AccountHeads_Mst_4.AhMst_pName AS CollectionStaff, dbo.Masters.Mstr_Desc AS AraMst_Name, Masters_1.Mstr_Desc AS DscRsnMst_Reason, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_UsrId, dbo.Invoice_Mst.Inv_YrId, dbo.Invoice_Mst.Inv_CpyId, dbo.Invoice_Mst.Inv_Updtd, dbo.Invoice_Mst.Inv_Tittle, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_InsNo, dbo.Invoice_Mst.Inv_PayMode, dbo.Invoice_Mst.Inv_ItemDesc, dbo.Invoice_Mst.Inv_SentMail, dbo.Invoice_Mst.Inv_RptMode, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_RepThrPersonal, dbo.Invoice_Mst.Inv_RepThrCourier, dbo.Invoice_Mst.Inv_RepThrPhone, dbo.Invoice_Mst.Inv_RepThrEmail, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DocPath1, dbo.Invoice_Mst.Inv_RepThrSms, dbo.Invoice_Mst.Inv_DocPath2, dbo.Invoice_Mst.Inv_CollModeId, " + Environment.NewLine
                            + "dbo.Invoice_Mst.Inv_DocPath3" + Environment.NewLine
                            + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Baranches_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_BrID = dbo.Baranches_Mst.BrMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = dbo.AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_3  WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_hospId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.AccountHeads_Mst AS AccountHeads_Mst_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_PntId = AccountHeads_Mst_1.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_AreaId = dbo.Masters.Mstr_Key LEFT OUTER JOIN" + Environment.NewLine
                            + "dbo.Masters AS Masters_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters_1.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             " AND inv_status!=-1  AND dbo.Invoice_Mst.Inv_YrId = " + YearId + " and Inv_BrID in(" + nCondition + ") order by Inv_Date";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "InvoiceMst_View");


                cmd.CommandText = "Select Vo.vchr_Key,Vo.vchr_Id,Vo.vchr_Date,Vo.vchr_TransType,Vo.vchr_BrId,Vo.vchr_TransNo,Vo.vchr_Narration,Vo.vchr_Payment,Vo.vchr_Receipt,Ah.AhMst_pName from Vouchers Vo WITH(NOLOCK) left join AccountHeads_Mst Ah WITH(NOLOCK) on Vo.vchr_Id = Ah.AhMst_Key where(vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and vchr_YrId = " + YearId + "and Vo.vchr_BrId in(" + nCondition + " )  AND Convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtvoucher");

                cmd.CommandText = "Select vchr_BrId,vchr_Payment,vchr_Receipt  FROM Vouchers where (vchr_TransType='Cash Payment'or vchr_TransType= 'Cash Receipts') and  vchr_YrId=" + YearId + " and vchr_BrId in(" + nCondition + ") AND   Convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtvouchers");

                cmd.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND A.PndC_CpyId=B.Inv_CpyId WHERE  " +
                   "(A.PndC_Cancld <> 1)" + "AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'" + " AND inv_status!=-1  AND Inv_YrId = " + YearId + "and B.Inv_BrID in (" + nCondition + " )  order by Inv_Date";

                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "payment");

                cmd.CommandText = "SELECT SUM(RCVDAMT)AS RCVDAMT,sum(netamt) as netamt, sum(PNDC)AS PNDC, sum(pay) as pay, sum(rece) as rece, BRID ,brmst_name from " + Environment.NewLine
     + "(SELECT SUM(Inv_RcvdAmt) AS RCVDAMT,sum(Inv_Netamt) as netamt ,'' AS PNDC, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst  where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status!=-1 " + "and Inv_BrID in (" + nCondition + " ) group by inv_brid" + Environment.NewLine

             + "UNION" + Environment.NewLine
     + "SELECT '' AS RCVDAMT,'' as netamt, SUM(PndC_Amount) AS PNDC, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld!=1 " + " and PndC_CpyId in(" + nCondition + " ) group by PndC_CpyId " + Environment.NewLine

      + "UNION" + Environment.NewLine

       + "select '' AS RCVDAMT,'' as netamt, '' AS PNDC, vchr_BrId as BRID, sum(vchr_payment) as pay, sum(vchr_receipt) as rece from Vouchers where (vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and Convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  convert(datetime,CONVERT(VARCHAR(10),vchr_Date,111)) <= '" + todate.ToString("yyyy-MM-dd") + "'and vchr_BrId in (" + nCondition + " ) group by vchr_BrId)  a left join Baranches_Mst on BrMst_Key=BRID group by BRID,brmst_name";



                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "summary");
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }


                //***************************************************************
                //*******************Opening Collection*************************

                cmd.CommandText = " SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt,Brid FROM( " +
    " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt,Inv_CpyId as Brid FROM Invoice_Mst WHERE(Inv_Status <> -1)  AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' GROUP BY Inv_CpyId " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt,PndC_CpyId as Brid FROM PendingCollections WHERE(PndC_Cancld <> 1)  AND  PndC_Date>'" + StartDate.ToString("yyyy-MM-dd") + "' AND  PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' group by  PndC_CpyId " +
    " UNION " +
    " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt,vchr_CpyId as Brid FROM  Vouchers WHERE(vchr_BookId = 1)  AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book')  group by  vchr_CpyId  " +
    " ) A group by Brid";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "OpeningBal");
                //******//*************************************************************************************************************************************************

                cmd.CommandText = "SELECT SUM(RCVDAMT)AS RCVDAMT,sum(netamt) as netamt,sum(netamtDR) as netamtDR,SUM(RCVDAMTdr)AS RCVDAMTdr,sum(netamtcR) as netamtcr,SUM(RCVDAMTcr)AS RCVDAMTcr,sum(netamtbh) as netamtbh, SUM(RCVDAMTbh)AS RCVDAMTbh,sum(PNDC)AS PNDC,sum(PNDCDR)AS PNDCDR, sum(PNDCCR)AS PNDCCR, sum(PNDCBH)AS PNDCBH, sum(pay) as pay, sum(rece) as rece, BRID, brmst_name from (SELECT SUM(Inv_RcvdAmt) AS RCVDAMT, sum(Inv_Netamt) as netamt, '' as netamtDR, ''AS RCVDAMTdr, '' as netamtcR, '' AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Cash' and Inv_BrID in (" + nCondition + " ) group by inv_brid " +
                " UNION " +
                "SELECT ''AS RCVDAMT, '' as netamt, sum(Inv_Netamt) as netamtDR, SUM(Inv_RcvdAmt) AS RCVDAMTdr, '' as netamtcR, '' AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Debit/Credit' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                   " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt ,'' as netamtDR,''AS RCVDAMTdr, sum(Inv_Netamt) as netamtcR, sum(Inv_Netamt) AS RCVDAMTcr, '' as netamtbh, '' as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'Credit' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                      " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt ,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr, sum(Inv_Netamt) as netamtbh, sum(Inv_Netamt) as RCVDAMTbh, '' AS PNDC, '' AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, Inv_BrID AS BRID, '' as pay, '' as rece FROM Invoice_Mst  where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and inv_status != -1 AND Inv_PayMode = 'BHIM/UPI Online Payment' and Inv_BrID in (" + nCondition + " )  group by inv_brid " +
                      " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr, '' as netamtbh,'' as RCVDAMTbh,SUM(PndC_Amount) AS PNDC,'' AS PNDCDR,''AS PNDCCR,'' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld!= 1 AND PndC_InvPaymode = 'Cash' and PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +

                " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR, ''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh,'' AS PNDC, SUM(PndC_Amount)AS PNDCDR, ''AS PNDCCR, '' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'Debit/Credit' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                     " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh, '' AS PNDC,'' AS PNDCDR, SUM(PndC_Amount)AS PNDCCR, '' AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'Credit' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                   " UNION " +
                "SELECT '' AS RCVDAMT,'' as netamt,'' as netamtDR,''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh, '' AS PNDC,'' AS PNDCDR,''AS PNDCCR, SUM(PndC_Amount)AS PNDCBH, PndC_CpyId AS BRID, '' as pay, '' as rece FROM PendingCollections where PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date  <= '" + todate.ToString("yyyy-MM-dd") + "' and PndC_Cancld != 1  and PndC_InvPaymode = 'BHIM/UPI Online Payment' AND PndC_CpyId in (" + nCondition + " )  group by PndC_CpyId " +
                    " UNION " +
                "select '' AS RCVDAMT,'' as netamt,'' as netamtDR, ''AS RCVDAMTdr,'' as netamtcR,'' AS RCVDAMTcr,'' as netamtbh,'' as RCVDAMTbh,'' AS PNDC,'' AS PNDCDR,''AS PNDCCR,'' AS PNDCBH, vchr_BrId as BRID, sum(vchr_payment) as pay, sum(vchr_receipt) as rece from Vouchers where (vchr_TransType = 'Cash Payment'or vchr_TransType = 'Cash Receipts') and Convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111)) >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(datetime, CONVERT(VARCHAR(10), vchr_Date, 111))  <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (3,6,5,2,4 ) group by vchr_BrId)  a left join Baranches_Mst on BrMst_Key = BRID group by BRID,brmst_name";

                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtmaster");

                //*********************************************************************************************************************************************************


                cmd.CommandText = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                "AccountHeads_Mst.AhMst_pName AS PatientName,AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Invl_IsPending , dbo.Invoice_Mst.Inv_Schrge," +
                                "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt,dbo.Invoice_Mst.inv_brid,dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_Roundoff " +
                                "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId in(" + nCondition + ") AND dbo.Invoice_Mst.Inv_YrId = " + YearId + "";



                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "dtDetails");
                //*******************************************************************************************************


                SqlCommand cmdyr = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId in (" + nCondition + ") AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }

                //***************************************************************************************************************************************************************
                string filepath = "";
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                DataTable dtMaster = new DataTable();
                dt.Reset();
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "[dbo].[Company_Mst]");
                //dtMaster.Columns.Add("nOpeningCol", typeof(string));
                //dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                //dtMaster.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_collectionstatementbranchwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_collectionstatementbranchwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public JsonResult PatientIdWiseBillClctn(branchdetails patntIdObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                fdt = patntIdObj.ff;
                tdt = patntIdObj.tt;
                int PatFromID = 0;
                int PatToID = 0;
                string Nfile_name = "";
                try
                {
                    PatFromID = Convert.ToInt32(fdt.Trim());
                }
                catch { }
                try
                {
                    PatToID = Convert.ToInt32(tdt.Trim());
                }
                catch { }
                if (PatToID == 0 || PatFromID == 0)
                {
                    return Json(new { Result = "ERROR" });
                }
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "PatientWiseBillCollection";
                DataSet ds0 = new DataSet();

                cmd0.CommandText = "SELECT Inv_No,Inv_name,Inv_GrosAmt,Inv_Netamt,Inv_DiscAmt,Inv_CurBalAmt,Inv_CurRcvdAmt,Inv_Date,Inv_PayMode FROM Invoice_Mst " +
                    "WHERE Inv_No >= " + PatFromID + " AND Inv_No <= " + PatToID + " " +
                    "AND Inv_CpyId = " + CompanyId + " AND Inv_Status<>-1 AND Inv_YrId = " + YearId + " ";



                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************





                string Head2 = "FROM : " + fdt + "     To : " + tdt;
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");


                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "PATIENT ID WISE BILL COLLECTION DETAILS";
                ds0.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PatIdBillColl.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_PatIdBillColl.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult MonthlyCollctnSmry(branchdetails mnthcollObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                DataSet dsPrint = new DataSet();
                DataTable dTitle = new DataTable();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                dtMaster.TableName = "dtMaster";
                dtDetails.TableName = "dtDetails";
                dTitle.TableName = "dTitle";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double nCpyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                brnchName = BrMst_Name;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                double ccardcoll = 0;
                string nCondition = "";
                //SqlCommand cmd1 = new SqlCommand();
                string sqlStr = "";
                //int CompanyId = 2;
                double PendsumNew = 0;
                //int YearId = 2122;
                double PrependCash = 0;
                double PrePendCrd = 0;


                string Head1 = "MONTHLY COLLECTION SUMMERY";
                if (nCpyId > 0)
                {
                    nCondition = " AND Inv_BrID=" + nCpyId + "";
                }


                List<collectionDetails> cdlss = new List<collectionDetails>();
                //SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = mnthcollObj.ff;
                string todatee = mnthcollObj.tt;

                //******************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //*******************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string date = f.ToString("dd/MM/yyyy");
                //DateTime fromdat = Convert.ToDateTime(date);


                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //string date1 = f.ToString("dd/MM/yyyy");
                //DateTime todat = Convert.ToDateTime(date1);

                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                string Head3 = nCpyId.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                sqlStr = "SELECT  Mdate,SUM(gross) gross, SUM(Disc) Disc,SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments, SUM(amt1+CashPend-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,SUM(amt10) Receipt,SUM(amt14) as CurBAl,SUM(Bhim) as Bhim FROM " +

                " ( SELECT  Inv_Date AS Mdate,SUM(Inv_GrosAmt) AS gross,SUM(Inv_DiscAmt) As Disc, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4, 'InDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt14,case when Inv_PayMode='BHIM/UPI Online Payment' then SUM(Inv_Netamt) else 0 end as Bhim  FROM dbo.Invoice_Mst WITH (NOLOCK) WHERE (Inv_Status <> - 1) AND Inv_CpyId =" + nCpyId + " AND Inv_YrId = " + nYrId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' GROUP BY Inv_Date ,Inv_PayMode " +
                " UNION " +
                "  SELECT PndC_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend,0 as amt10,0 AS amt14,case when PndC_InvPaymode='BHIM/UPI Online Payment' then SUM(PndC_Amount) else 0 end as Bhim FROM dbo.PendingCollections WITH (NOLOCK) WHERE (PndC_Cancld <> 1) AND PndC_CpyId = " + nCpyId + " AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date ,PndC_InvPaymode   " +
                " UNION " +
                " SELECT vchr_Date AS Mdate,0 AS gross,0 As Disc,  0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10,0 AS amt14, 0 as Bhim    FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date " +
                " UNION " +
                " SELECT vchr_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, 0 AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,SUM(vchr_Receipt) as amt10,0 AS amt14 , 0 as Bhim   FROM dbo.Vouchers WITH (NOLOCK) WHERE (vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date) " +

                 " A WHERE A.Mdate>= '" + fromdate.ToString("yyyy-MM-dd") + "'  AND A.Mdate <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate ORDER BY A.Mdate ";


                cmd = new SqlCommand(sqlStr);


                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //********************** PREVIOUS YEAR PENDING COLLECTION ******

                DateTime StartDate = DateTime.Now;
                SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + nYrId + "", sqlcon);
                try
                { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                catch { }

                double pendPrevYr = 0;
                SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + nCpyId + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                try
                {
                    pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                }
                catch { }
                //***************************************************************
                //*******************Opening Collection*************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + nYrId + " AND OpBl_CpyId=" + nCpyId + "", sqlcon);
                SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }
                cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
" SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + nCpyId + " AND Inv_YrId = " + nYrId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
" UNION " +
" SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + nCpyId + " AND PndC_YrId = " + nYrId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
" UNION " +
" SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + nCpyId + " AND vchr_YrId = " + nYrId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
" ) A", sqlcon);
                sda1 = new SqlDataAdapter(cmd1);
                dt1 = new DataTable();
                sda1.Fill(dt1);
                foreach (DataRow dr1 in dt1.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                //*************************END Of OPENING COLL***************************************
                //**********************************
                double PendColPre = 0;
                if (nCpyId > 0)
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + nCpyId + nCondition;

                }
                else
                {
                    sqlStr = "SELECT SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition;


                }
                //double PendColCur = 0;
                //double PendColPre = 0;
                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    PendColPre = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    PendColPre = 0;
                }
                //********************************************



                dtMaster.Columns.Add("nOpeningCol", typeof(string));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["nOpeningCol"] = OpeningColl;

                dtMaster.Columns.Add("nOpeningColNew", typeof(string));

                dtMaster.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                dtMaster.Columns.Add("PendColPre", typeof(double));
                dtMaster.Rows[0]["PendColPre"] = PendColPre;

                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MonthlyCollection.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_MonthlyCollection.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFPMonthlyClctn()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + Br_Name + "_" + "MonthlyCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CollSmryBranchWise(branchdetails BrnchsmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchsmryObj.checkedBrnch;
            string[] checkedBrnchId = BrnchsmryObj.checkedBrnchId;


            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchsmryObj.ff;
                string todatee = BrnchsmryObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //**********************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrMst_Name;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CollectionSummeryBranchWise";
                if (nCondition != "")
                {
                    // spl = "  and BRID in (" + spl + ")";

                    cmd0.CommandText = "select BRName,BRID,sum(amt10) as cashBal,sum(amt8) as netamount, sum(amt1) as Grossamt,sum(amt2) as PendBill,sum(amt3) as PendColl,sum(amt4) as Discount,sum(amt5) as Payment ,Sum(RecAmt) As Advnc,sum(OtIncome ) as OtIncome  from  ( select    BrMst_Name as  BRName,Inv_BrID as BRID, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt10 ,sum(Inv_Netamt) as amt8,sum(Inv_GrosAmt) as amt1,sum(Inv_CurBalAmt) as amt2,0 as amt3,sum(Inv_DiscAmt) as amt4,0 as amt5, case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end AS RecAmt,0 as OtIncome  from  Invoice_Mst left join Baranches_Mst on Inv_BrID=BrMst_Key   WHERE (Inv_Status <> - 1)  AND Inv_YrId = '" + YearId + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode " +
                    " UNION " +
                    " select  BrMst_Name as  BRName,PndC_CpyId  as BRID ,0 as amt10  ,0 as amt8, 0 as amt1, 0 as amt2, sum(PndC_Amount) as amt3,0 as amt4 ,0 as amt5,0 AS RecAmt,0 as OtIncome   from dbo.PendingCollections left join  Baranches_Mst  on  PndC_CpyId=BrMst_Key WHERE (PndC_Cancld <> 1)   AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + " 'and PndC_InvPaymode='Cash' AND  PndC_CpyId in  (" + nCondition + ")  GROUP BY PndC_CpyId,BrMst_Name" +
                    " UNION " +
                    " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, sum(vchr_Payment) as amt5,0 AS RecAmt,0 as OtIncome  FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                  " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,sum(vchr_Receipt) as OtIncome FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                   " select   BrMst_Name as  BRName, BrMst_Key as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,0 as OtIncome FROM Baranches_Mst Where BrMst_Key=1 ) A    GROUP BY A.BRID,A.BRName ORDER BY A.BRName";

                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

                try
                {
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "CollStmt_Branch");
                }
                catch { }
                //********************************************************************************************************************

                if (nCondition != "")
                {
                    cmd0.CommandText = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt,Inv_BrID From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND Inv_Status <> - 1 AND Inv_YrId = " + YearId + " and Inv_CpyId in  (" + nCondition + ") group by  Inv_CpyId,Inv_BrID";
                }
                else
                {
                    cmd0.CommandText = "SELECT SUM(PenColl.PndC_Amount) AS rsNetAMt,Inv_BrID From Invoice_Mst Inv WITH (NOLOCK) LEFT JOIN PendingCollections PenColl ON Inv.Inv_No=PenColl.PndC_Labno AND Inv.Inv_CpyId=PenColl.PndC_CpyId AND Inv.Inv_YrId=PenColl.PndC_YrId AND PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "'   WHERE  Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                                "AND Inv_Status <> - 1 AND Inv_YrId = " + YearId + " group by  Inv_CpyId,Inv_BrID";

                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "PendSum");



                if (nCondition != "")
                {
                    cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4  from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + YearId + " and  Inv_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and  Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                      //" UNION"+
                      //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                      " UNION" +
                       " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId=" + YearId + " and vchr_CpyId in (" + nCondition + ")  GROUP BY vchr_CpyId,BrMst_Name" +
                      " union " +
                      "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'   AND vchr_YrId=" + YearId + " and vchr_CpyId in (" + nCondition + ")  GROUP BY vchr_CpyId,BrMst_Name " +
                    "  UNION SELECT BrMst_Key AS BrID,BrMst_Name As BrName,0 as amt1,0 as amt2,0 as amt3, 0 as amt4 from Baranches_Mst  GROUP BY BrMst_Key,BrMst_Name) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";





                }
                else
                {

                    //cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4   from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + cPublic.YearId + " and  Inv_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'  GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                    //    //" UNION"+
                    //    //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                    //  " UNION" +
                    //   " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'   GROUP BY vchr_CpyId,BrMst_Name" +
                    //  " union " +
                    //  "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'     GROUP BY vchr_CpyId,BrMst_Name ) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt1) as RecvAmt,sum(amt2) as OPPendAmt,sum(amt3) as OPVochrPaymnt,sum(amt4) as OPVochrRecvAmt  from (select Inv_BrID as BrID, BrMst_Name as BrName ,case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end  AS amt1,0 as amt2, 0 as amt3,0 as amt4  from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID where (Inv_Status <> - 1) and Inv_YrId =" + YearId + " and  Inv_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and  Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode" +
                                         //" UNION"+
                                         //"  select PndC_CpyId as BrID,BrMst_Name as BrName,0 as amt1,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt2,0 as amt3,0 as amt4,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where convert(date,Yr_StartDate)>='" + cPublic.StartDate + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                                         " UNION" +
                                          " select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2 ,ISNULL(SUM(vchr_Payment),0)as amt3 ,0 as amt4   from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where  vchr_TransType='Cash Payment'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId=" + YearId + "   GROUP BY vchr_CpyId,BrMst_Name" +
                                         " union " +
                                         "  select vchr_CpyId as BrID,BrMst_Name as BrName,0 as amt1,0 as amt2,0 as amt3, ISNULL(SUM(vchr_Receipt),0)as amt4 from Vouchers left join Baranches_Mst on BrMst_Key=vchr_CpyId   where vchr_TransType='Cash Receipts'    and  vchr_Date <'" + fromdate.ToString("yyyy-MM-dd") + "'   AND vchr_YrId=" + YearId + "   GROUP BY vchr_CpyId,BrMst_Name " +
                                       " UNION SELECT BrMst_Key AS BrID,BrMst_Name As BrName,0 as amt1,0 as amt2,0 as amt3, 0 as amt4 from Baranches_Mst  GROUP BY BrMst_Key,BrMst_Name) A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";

                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "OPInvRcvAmt");

                ////**************************************************************************************************************


                if (nCondition != "")
                {
                    // cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt,StarDate  from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + cPublic.StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + spl + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate )A  GROUP BY A.BrID,A.BrName,A.StarDate ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + nCondition + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                    " UNION " +
                    " SELECT BrMst_Key AS BrID,BrMst_Name as BrName,0 AS amt10,'' as StarDate FROM Baranches_Mst GROUP BY BrMst_Key,BrMst_Name  )A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";

                }
                else
                {

                    //cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt,StarDate  from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from PendingCollections left join Baranches_Mst on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id  where  PndC_Date>='" + cPublic.StartDate.ToString("yyyy-MM-dd") + "'  PndC_Date <'" + dtpFrmDate.Value.ToString("yyyy-MM-dd") + "'  GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate)A  GROUP BY A.BrID,A.BrName,A.StarDate ORDER BY A.BrName";
                    cmd0.CommandText = "select BrID, BrName,sum(amt10) as RecvAmt from (select PndC_CpyId as BrID,BrMst_Name as BrName,case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end  AS amt10,Yr_StartDate as StarDate  from Baranches_Mst  left join PendingCollections  on BrMst_Key=PndC_CpyId left join YearData on PndC_YrId=Yr_Id   where PndC_Date>='" + StartDate.ToString("yyyy-MM-dd") + "'  and    PndC_Date <'" + fromdate.ToString("yyyy-MM-dd") + "' and PndC_CpyId in (" + nCondition + ") GROUP BY PndC_CpyId,PndC_InvPaymode,BrMst_Name,Yr_StartDate " +
                                       " UNION " +
                                       " SELECT BrMst_Key AS BrID,BrMst_Name as BrName,0 AS amt10,'' as StarDate FROM Baranches_Mst GROUP BY BrMst_Key,BrMst_Name  )A  GROUP BY A.BrID,A.BrName ORDER BY A.BrName";


                }

                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "OPPendAmt");
                //*********************************************************************************************


                if (nCondition != "")
                {
                    cmd0.CommandText = "select count(Inv_No),Inv_BrID,Inv_CpyId from Invoice_Mst where convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + fromdate.ToString("yyyy-MM-dd") + "' and [Inv_Status]!=-1 and Inv_CpyId in  (" + nCondition + ") group by  Inv_CpyId,Inv_BrID ";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "billcount");

                    cmd0.CommandText = "select Inv_BrID,isnull(sum(Cash),0) as Cash,isnull(sum(Credit),0) as Credit,isnull(sum(cardd),0) as cardd,isnull(sum(bhim),0) as bhim FROM(select Inv_BrID,isnull(sum(Inv_RcvdAmt),0) as Cash, '' as Credit ,'' as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Cash' and [Inv_Status]!=-1 and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "'and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                      " UNION " +
                    "select Inv_BrID,'' as Cash,isnull(sum(Inv_Netamt),0)as Credit,'' as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Credit' and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "' and [Inv_Status]!=-1 and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                     " UNION " +
                     "select Inv_BrID,'' as Cash, 0 as Credit,isnull(sum(Inv_Netamt),0)as cardd,0 as bhim  from Invoice_Mst where Inv_PayMode = 'Debit/Credit' and  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy - MM - dd") + "' and [Inv_Status]!=-1 and  Inv_CpyId in  (" + nCondition + ") group by Inv_BrID  " +
                      " UNION " +
                     "select Inv_BrID,'' as Cash,0 as Credit,0 as cardd,isnull(sum(Inv_Netamt), 0) as bhim from Invoice_Mst where Inv_PayMode = 'BHIM/UPI Online Payment' and convert(date, Inv_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, Inv_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'  and[Inv_Status] != -1 and  Inv_CpyId  in  (" + nCondition + ") group by Inv_BrID ) A group by Inv_BrID  ";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "CASHCREDIT");


                    cmd0.CommandText = "select vchr_BrId,isnull(sum(vouchercash),0) AS vouchercash,isnull(sum(vouchercheque),0)as vouchercheque ,isnull(sum(vouchercard),0) as vouchercard FROM(select vchr_BrId,isnull(sum(vchr_Receipt),0) as vouchercash, '' as vouchercheque,'' as vouchercard  from[dbo].[Vouchers] where vchr_TransType = 'Cash Receipts' and convert(date,[vchr_Date])>='" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date,[vchr_Date])<='" + todate.ToString("yyyy - MM - dd") + "'and   vchr_CpyId  in  (" + nCondition + ") group by vchr_BrId " +

                    " UNION " +
                    " select vchr_BrId,''vouchercash, isnull(sum(vchr_Receipt),0) as vouchercheque,'' as vouchercard  from[dbo].[Vouchers] where vchr_TransType = 'Cheque Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'and  vchr_CpyId in  (" + nCondition + ")group by vchr_BrId" +
                    " UNION " +
                    "select vchr_BrId,''vouchercash,''vouchercheque, isnull(sum(vchr_Receipt),0) as vouchercard from[dbo].[Vouchers] where vchr_TransType = 'Card Receive' and convert(date, vchr_Date)>= '" + fromdate.ToString("yyyy - MM - dd") + "' and convert(date, vchr_Date) <= '" + todate.ToString("yyyy - MM - dd") + "'and  vchr_CpyId in  (" + nCondition + ") group by vchr_BrId) a group by vchr_BrId";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Voucher");

                    cmd0.CommandText = "SELECT PndC_CpyId,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                                            "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId = " + CompanyId + "group by PndC_CpyId  ";

                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "prevpend");
                    cmd0.CommandText = "SELECT inv_paymode,[Inv_CpyId],[Inv_BrID],sum([Inv_CurBalAmt]) FROM Invoice_Mst  WHERE Inv_PayMode='Cash' and (Inv_Status <> - 1)  AND Inv_YrId =" + YearId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,Inv_PayMode,[Inv_CpyId] ";

                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "curbalamt");
                }


                //*********************************************************************************************

                string Head3 = "DoctrsEnvelop";
                ////****************************************************
                //cmd0.CommandText = "SELECT Vch.*,Ahmst.AhMst_pName As Account FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE vchr_Date>='" + dtpFrom.Value.ToShortDateString() + "' AND vchr_Date<='" + dtpTo.Value.ToShortDateString() + "' AND  vchr_Id=" + AccId + " AND  vchr_CpyId=" + cPublic.CompanyId + " AND vchr_YrId=" + cPublic.YearId + " AND vchr_BrId=" + cPublic.logInBranchId + "";
                //sd0 = new SqlDataAdapter(cmd0);
                ////****************************************************
                //sd0.Fill(ds0, "Voucher");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "[dbo].[Company_Mst]");
                //****************************************************
                string filepath = "";



                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");

                SqlCommand cmdPayments = new SqlCommand("select sum(vchr_Payment) as Payments  FROM dbo.Vouchers  WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") ", sqlcon);
                double VchrPayment = 0;
                try
                {
                    VchrPayment = Convert.ToDouble(cmdPayments);
                }
                catch { }
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Columns.Add("OpeningBal", typeof(double));
                dt.Columns.Add("Payments", typeof(double));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                //dt.Rows[0]["TestName"] = txtbarcode.Text.Trim();
                //dt.Rows[0]["Branch"] = cmbBranch.Text.Trim();
                dt.Rows[0]["Reporthead"] = Head3;
                dt.Rows[0]["OpeningBal"] = OpeningBal;
                dt.Rows[0]["Payments"] = VchrPayment;
                //rpt_CollectnStmnt_BranchWise
                ds0.Tables.Add(dt);
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CollectnStmnt_BranchWise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CollectnStmnt_BranchWise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFCollSmryBrnchWise()
        {
            string fileName = "";
            //  Nfile_name += "Report_" + fdt + "_" + tdt +  "_" + "CollectionSummeryBranchWise";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CollectionSummeryBranchWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult MonthlyCollDivSmry(branchdetails objMonDivColl)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double BrmstKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = objMonDivColl.ff;
                string todatee = objMonDivColl.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //*********************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[0] + "/" + dateString3[1] + "/" + dateString3[2]);
                //******************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = objMonDivColl.BrMst_Name;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (objMonDivColl.dailyCheck == 0)
                {
                    DMCheck = 0;
                    Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyDivisionSummery";
                    cmd0.Connection = sqlcon;
                    cmd0.CommandTimeout = 0;
                    cmd0.CommandType = CommandType.StoredProcedure;
                    //****************************************************
                    cmd0.Parameters.AddWithValue("@Date", fromdate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@Date1", todate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@CpyId", BrmstKey);
                    cmd0.Parameters.AddWithValue("@YrId", YearId);
                    cmd0.CommandText = "stproc_Division";

                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                    DataSet ds0 = new DataSet();
                    sd0.Fill(ds0, "Listview");
                    //****************************************************
                    cmd0.Parameters.Clear();
                    cmd0.Connection = sqlcon;
                    cmd0.CommandType = CommandType.Text;
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    //****************************************************
                    string filepath = "";
                    string Head2 = "";

                    ReportDocument reportDocument = new ReportDocument();
                    Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");
                    DataTable dt = new DataTable();
                    // dt.Columns.Add("Product", typeof(string));
                    dt.Columns.Add("Head", typeof(string));
                    dt.Rows.Add();
                    // dt.Rows[0]["Product"] = Head2;
                    dt.Rows[0]["Head"] = Head2;
                    ds0.Tables.Add(dt);

                    sqlcon.Close();


                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Testdaily.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_Testdaily.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";


                    try
                    {


                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;



                        TempLog = pdfFile;

                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();

                        sqlcon.Close();
                        return Json(new { Result = "OK" });


                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    return Json(new { Result = "OK" });
                }
                else if (objMonDivColl.dailyCheck == 1)
                {
                    DMCheck = 1;
                    Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyDivisionSummery";
                    cmd0.Connection = sqlcon;
                    cmd0.CommandTimeout = 0;
                    cmd0.CommandType = CommandType.StoredProcedure;
                    //****************************************************
                    cmd0.Parameters.AddWithValue("@Date", fromdate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@Date1", todate.ToString("yyyy-MM-dd"));
                    cmd0.Parameters.AddWithValue("@CpyId", BrmstKey);
                    cmd0.Parameters.AddWithValue("@YrId", YearId);
                    cmd0.CommandText = "stproc_Division";

                    SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                    DataSet ds0 = new DataSet();
                    sd0.Fill(ds0, "Listview");
                    //****************************************************
                    cmd0.Parameters.Clear();
                    cmd0.Connection = sqlcon;
                    cmd0.CommandType = CommandType.Text;
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                    sd0 = new SqlDataAdapter(cmd0);
                    sd0.Fill(ds0, "Company_Mst");
                    //****************************************************
                    string filepath = "";
                    string Head2 = "";

                    ReportDocument reportDocument = new ReportDocument();
                    Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");
                    DataTable dt = new DataTable();
                    dt.Columns.Add("Head", typeof(string));
                    dt.Rows.Add();
                    dt.Rows[0]["Head"] = Head2;
                    ds0.Tables.Add(dt);

                    //********************** PREVIOUS YEAR PENDING COLLECTION ******

                    DateTime StartDate = DateTime.Now;
                    SqlCommand cmdst = new SqlCommand("SELECT Yr_StartDate FROM YearData  WHERE Yr_Id=" + YearId + "", sqlcon);
                    try
                    { StartDate = Convert.ToDateTime(cmdst.ExecuteScalar()); }
                    catch { }

                    double pendPrevYr = 0;
                    SqlCommand cmdPend = new SqlCommand("SELECT sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + StartDate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + BrmstKey + "' AND  PndC_InvPaymode = 'Cash' ", sqlcon);
                    try
                    {
                        pendPrevYr = Convert.ToDouble(cmdPend.ExecuteScalar());
                    }
                    catch { }
                    //***************************************************************
                    //*******************Opening Collection*************************
                    double openingbalance = 0;

                    double OpeningnewPrevPend = 0;
                    double RecAmt = 0;
                    double PendAmt = 0;
                    double Payments = 0;
                    double receipts = 0;
                    string opstatus = "";
                    double OpeningColl = 0;
                    SqlCommand cmd1 = new SqlCommand("SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + YearId + " AND OpBl_CpyId=" + BrmstKey + "", sqlcon);
                    SqlDataAdapter sda1 = new SqlDataAdapter(cmd1);
                    DataTable dt1 = new DataTable();
                    sda1.Fill(dt1);
                    foreach (DataRow dr in dt1.Rows)
                    {
                        try
                        {
                            openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                        }
                        catch { }
                        opstatus = dr["OpBl_OpStatus"].ToString();
                    }

                    if (openingbalance > 0)
                    {
                        if (opstatus == "Cr")
                        {
                            openingbalance = openingbalance * -1;

                        }
                    }
                    cmd1 = new SqlCommand(" SELECT SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
        " SELECT  SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' " +
        " UNION " +
        " SELECT 0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + BrmstKey + " AND PndC_YrId = " + YearId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' " +
        " UNION " +
        " SELECT 0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') " +
        " ) A", sqlcon);
                    sda1 = new SqlDataAdapter(cmd1);
                    dt1 = new DataTable();
                    sda1.Fill(dt1);
                    foreach (DataRow dr1 in dt1.Rows)
                    {
                        RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                        Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                        receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                        PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                    }
                    OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                    OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;
                    //*************************END Of OPENING COLL***************************************
                    dt.Columns.Add("nOpeningCol", typeof(string));

                    dt.Rows[0]["nOpeningCol"] = OpeningColl;

                    dt.Columns.Add("nOpeningColNew", typeof(string));

                    dt.Rows[0]["nOpeningColNew"] = OpeningnewPrevPend;

                    sqlcon.Close();


                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestMonthWise.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_TestMonthWise.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }
                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;
                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                        CrExportOptions.FormatOptions = CrFormatTypeOptions;
                        reportDocument.Export();

                        sqlcon.Close();
                        return Json(new { Result = "OK" });
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";
                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                    }
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFMonthlyDivSmry()
        {
            if (DMCheck == 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyDivisionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MonthlyDivisionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }

        }
        public JsonResult MnthlyCollSmryBrnchWise(branchdetails BrnchMnthlysmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedBrnch = BrnchMnthlysmryObj.checkedBrnch;
            string[] checkedBrnchId = BrnchMnthlysmryObj.checkedBrnchId;


            for (int i = 0; i < checkedBrnchId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedBrnchId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedBrnchId[i]).ToString();
                }
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = BrnchMnthlysmryObj.ff;
                string todatee = BrnchMnthlysmryObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                //DateTime s = DateTime.Parse(fromdatee);
                //**************************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //*****************************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrMst_Name;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "MonthlyCollectionSummeryBranchWise";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;



                cmd.CommandText = "SELECT BRANCHNAME,branchid, Mdate,SUM(gross) gross, SUM(Disc) Disc,SUM(amt0) Netamt, SUM(amt1) Advance, SUM(amt2) CashBalance,SUM(amt5) CredBalance,SUM(amt6) CCardBalance,SUM(amt3) PendCol,SUM(amt4) Payments, SUM(amt1+amt3-amt4) NetBal,SUM(CashPend) CashPend,SUM(CreditPend) CreditPend,SUM(amt10) Receipt,SUM(amt14) as CurBAl FROM " +

              " ( SELECT BrMst_Name AS BRANCHNAME,Inv_CpyId as branchid, Inv_Date AS Mdate,SUM(Inv_GrosAmt) AS gross,SUM(Inv_DiscAmt) As Disc, SUM(Inv_Netamt) AS amt0, SUM(Inv_RcvdAmt) AS amt1, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt2,case when Inv_PayMode='Credit' then SUM(Inv_BalAmt) else 0 end amt5,case when Inv_PayMode='Debit/Credit' then SUM(Inv_BalAmt) else 0 end as amt6, 0 AS amt3, 0 AS amt4, 'InDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10, case when Inv_PayMode='Cash' then SUM(Inv_CurBalAmt) else 0 end AS amt14  FROM dbo.Invoice_Mst WITH (NOLOCK)  left join Baranches_Mst on [BrMst_Key]= Inv_CpyId WHERE (Inv_Status <> - 1) AND Inv_CpyId IN (" + nCondition + ") AND Inv_YrId = " + YearId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' GROUP BY Inv_Date ,Inv_PayMode ,Inv_CpyId,BrMst_Name" +
              " UNION " +
              "  SELECT BrMst_Name AS BRANCHNAME,PndC_CpyId as branchid,PndC_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, SUM(PndC_Amount) AS amt3, 0 AS amt4,  'PenDate' AS 'SType', case when PndC_InvPaymode='Cash' then SUM(PndC_Amount) else 0 end AS CashPend, case when PndC_InvPaymode!='Cash' then SUM(PndC_Amount) else 0 end AS CreditPend,0 as amt10,0 AS amt14 FROM dbo.PendingCollections WITH (NOLOCK)  left join Baranches_Mst on [BrMst_Key]= PndC_CpyId WHERE (PndC_Cancld <> 1) AND PndC_CpyId IN( " + nCondition + ") AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY PndC_Date ,PndC_InvPaymode,PndC_CpyId,BrMst_Name   " +
              " UNION " +
              " SELECT BrMst_Name AS BRANCHNAME,vchr_CpyId as branchid,vchr_Date AS Mdate,0 AS gross,0 As Disc,  0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, SUM(vchr_Payment) AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,0 as amt10,0 AS amt14   FROM dbo.Vouchers WITH (NOLOCK) left join Baranches_Mst on [BrMst_Key]= vchr_BrId WHERE (vchr_BookId = 1) AND vchr_CpyId IN(" + nCondition + ") AND vchr_YrId = " + YearId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date,vchr_CpyId,BrMst_Name " +
              " UNION " +
              " SELECT BrMst_Name AS BRANCHNAME,vchr_CpyId as branchid,vchr_Date AS Mdate,0 AS gross,0 As Disc, 0 AS amt0, 0 AS amt1, 0 AS amt2,0 amt5,0 as amt6, 0 AS amt3, 0 AS amt4,  'VrDate' AS 'SType',0 as CashPend,0 as CreditPend,SUM(vchr_Receipt) as amt10,0 AS amt14   FROM dbo.Vouchers WITH (NOLOCK) left join Baranches_Mst on [BrMst_Key]= vchr_BrId WHERE (vchr_BookId = 1) AND vchr_CpyId IN(" + nCondition + ")  AND vchr_YrId = " + YearId + " AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY vchr_Date,vchr_CpyId,BrMst_Name ) " +

               " A WHERE A.Mdate>= '" + fromdate.ToString("yyyy-MM-dd") + "'  AND A.Mdate <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY A.Mdate, branchid, BRANCHNAME  ORDER BY A.Mdate ";


                SqlDataAdapter adapt = new SqlDataAdapter(cmd);

                DataTable dt = new DataTable();
                adapt.Fill(ds0, "monthycol");

                //******************************************
                if (nCondition != "")
                {

                    cmd.CommandText = "select BRName,BRID,sum(amt10) as cashBal,sum(amt8) as netamount, sum(amt1) as Grossamt,sum(amt2) as PendBill,sum(amt3) as PendColl,sum(amt4) as Discount,sum(amt5) as Payment ,Sum(RecAmt) As Advnc,sum(OtIncome ) as OtIncome  from  ( select    BrMst_Name as  BRName,Inv_BrID as BRID, case when Inv_PayMode='Cash' then SUM(Inv_BalAmt) else 0 end AS amt10 ,sum(Inv_Netamt) as amt8,sum(Inv_GrosAmt) as amt1,sum(Inv_CurBalAmt) as amt2,0 as amt3,sum(Inv_DiscAmt) as amt4,0 as amt5, case when Inv_PayMode='Cash' then SUM(Inv_RcvdAmt) else 0 end AS RecAmt,0 as OtIncome  from  Invoice_Mst left join Baranches_Mst on Inv_BrID=BrMst_Key   WHERE (Inv_Status <> - 1)  AND Inv_YrId = '" + YearId + "' AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <='" + todate.ToString("yyyy-MM-dd") + "' and Inv_BrID in (" + nCondition + ") GROUP BY Inv_BrID,BrMst_Name,Inv_PayMode " +
                    " UNION " +
                    " select  BrMst_Name as  BRName,PndC_CpyId  as BRID ,0 as amt10  ,0 as amt8, 0 as amt1, 0 as amt2, sum(PndC_Amount) as amt3,0 as amt4 ,0 as amt5,0 AS RecAmt,0 as OtIncome   from dbo.PendingCollections left join  Baranches_Mst  on  PndC_CpyId=BrMst_Key WHERE (PndC_Cancld <> 1)   AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + " 'and PndC_InvPaymode='Cash' AND  PndC_CpyId in  (" + nCondition + ")  GROUP BY PndC_CpyId,BrMst_Name" +
                    " UNION " +
                    " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, sum(vchr_Payment) as amt5,0 AS RecAmt,0 as OtIncome  FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                  " select   BrMst_Name as  BRName, vchr_BrId as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,sum(vchr_Receipt) as OtIncome FROM dbo.Vouchers left join Baranches_Mst  on vchr_BrId=BrMst_Key WHERE (vchr_BookId = 1)  AND vchr_YrId = '" + YearId + "' AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' and vchr_BrId in (" + nCondition + ") GROUP BY vchr_BrId,BrMst_Name " +
                    " UNION " +
                   " select   BrMst_Name as  BRName, BrMst_Key as BRID ,0 as amt10 ,0 as amt8,0 as amt1,0 as amt2,0 as amt3 ,0 as amt4, 0 as amt5,0 AS RecAmt,0 as OtIncome FROM Baranches_Mst Where BrMst_Key=1 ) A    GROUP BY A.BRID,A.BRName ORDER BY A.BRName";
                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "BRANCHESS");
                }

                else
                {
                    return Json(new { Result = "ERROR" });
                }
                //************************************************************
                DateTime StartDate = DateTime.Now;
                cmd.CommandText = "SELECT Yr_StartDate FROM YearData  WHERE Yr_Id = " + YearId + "";
                try
                { StartDate = Convert.ToDateTime(cmd.ExecuteScalar()); }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthyear");
                //*********************************************************************************************************
                double pendPrevYr = 0;

                cmd.CommandText = "SELECT PndC_CpyId,sum(PndC_Amount) AS PrevPendSum FROM dbo.PendingCollections  WITH (NOLOCK)  WHERE  (PndC_Cancld <> 1) AND PndC_Date >='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date < '" + todate.ToString("yyyy-MM-dd") + "' AND PndC_CpyId ='" + CompanyId + "' AND  PndC_InvPaymode = 'Cash' group by PndC_CpyId  ";
                try
                {
                    pendPrevYr = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthpend");
                //*************************************************************
                double openingbalance = 0;

                double OpeningnewPrevPend = 0;
                double RecAmt = 0;
                double PendAmt = 0;
                double Payments = 0;
                double receipts = 0;
                string opstatus = "";
                double OpeningColl = 0;
                cmd.CommandText = "SELECT OpBl_OpBalance, OpBl_OpStatus FROM Opening_Balance WHERE OpBl_AccId = 1 and OpBl_YrId=" + YearId + " AND OpBl_CpyId=" + CompanyId + "";
                try
                {
                    pendPrevYr = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch { }
                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "monthbal");
                foreach (DataRow dr in dt.Rows)
                {
                    try
                    {
                        openingbalance = Convert.ToDouble(dr["OpBl_OpBalance"]);

                    }
                    catch { }
                    opstatus = dr["OpBl_OpStatus"].ToString();
                }

                if (openingbalance > 0)
                {
                    if (opstatus == "Cr")
                    {
                        openingbalance = openingbalance * -1;

                    }
                }

                cmd.CommandText = " SELECT branch,SUM(Inv_RcvdAmt) AS Inv_RcvdAmt,SUM(PndC_Amount) AS PndC_Amount,SUM(vchr_Payment) AS vchr_Payment,SUM(vchr_Receipt) AS vchr_Receipt FROM( " +
    " SELECT  Inv_BrID as branch,SUM(Inv_RcvdAmt) AS Inv_RcvdAmt, 0 AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM Invoice_Mst WHERE(Inv_Status <> -1) AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + " AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Paymode = 'Cash' group by Inv_BrID " +
    " UNION " +
    " SELECT PndC_CpyId as branch,0 AS Inv_RcvdAmt, SUM(PndC_Amount) AS PndC_Amount, 0 As vchr_Payment, 0 As vchr_Receipt FROM PendingCollections WHERE(PndC_Cancld <> 1) AND PndC_CpyId = " + CompanyId + " AND PndC_YrId = " + YearId + "  AND PndC_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_InvPaymode = 'Cash' group by  PndC_CpyId " +
    " UNION " +
    " SELECT vchr_BrId as branch,0 AS Inv_RcvdAmt, 0 AS PndC_Amount, SUM(vchr_Payment) As vchr_Payment, sum(vchr_Receipt) as vchr_Receipt FROM  Vouchers WHERE(vchr_BookId = 1) AND vchr_CpyId = " + CompanyId + " AND vchr_YrId = " + YearId + " AND vchr_Date < '" + fromdate.ToString("yyyy-MM-dd") + "' AND(vchr_TransType = 'Cash Receipts' or vchr_TransType = 'Cash Payment' OR vchr_TransType = 'Day book') group by vchr_BrId) " +
    "A group by branch";

                adapt = new SqlDataAdapter(cmd);

                adapt.Fill(ds0, "AMT");
                foreach (DataRow dr1 in dt.Rows)
                {
                    RecAmt = Convert.ToDouble(dr1["Inv_RcvdAmt"]);
                    Payments = Convert.ToDouble(dr1["vchr_Payment"]);
                    receipts = Convert.ToDouble(dr1["vchr_Receipt"]);
                    PendAmt = Convert.ToDouble(dr1["PndC_Amount"]);
                }
                OpeningColl = RecAmt + receipts + PendAmt - Payments + openingbalance;
                OpeningnewPrevPend = RecAmt + receipts + pendPrevYr - Payments + openingbalance;

                //***************************************************************

                double PendColPre = 0;
                if (CompanyId > 0)
                {
                    cmd.CommandText = "SELECT PndC_CpyId ,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
                     "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND  Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  AND PndC_CpyId IN (" + nCondition + ") group by PndC_CpyId ";


                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "PEND");


                }
                else
                {

                    cmd.CommandText = "SELECT PndC_CpyId ,SUM (A.PndC_Amount) AS PendSumAmt FROM PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No WHERE  " +
               "(PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_Date < '" + fromdate.ToString("yyyy-MM-dd") + "'  " + nCondition + " group by PndC_CpyId";

                    adapt = new SqlDataAdapter(cmd);

                    adapt.Fill(ds0, "PENDSUM");

                }
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");

                string filepath = "";
                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);

                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MonthlyCollectiondivision.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_MonthlyCollectiondivision.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFMnthlyCollSmryBrnchWise()
        {
            string fileName = "";
            //  Nfile_name += "Report_" + fdt + "_" + tdt + "_"  + "MonthlyCollectionSummeryBranchWise";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "MonthlyCollectionSummeryBranchWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public FileResult PDFUsrWiseSmryClctn()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult UserWiseSmryClctn(branchdetails usrWiseSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DateTime StartDate = DateTime.Now;
                string NBillConditions = "";
                string NPendConditions = "";
                string Nfile_name = "";
                double BrmstKey = 0;
                int userKey = 0;
                double CashPaySum = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = usrWiseSmryObj.ff;
                string todatee = usrWiseSmryObj.tt;
                userKey = usrWiseSmryObj.userKey;
                SqlCommand cmd12 = new SqlCommand();
                SqlCommand cmd13 = new SqlCommand();
                SqlConnection sqlcon = new SqlConnection();
                string NVchrConditions = "";
                DateTime dtpFrom = DateTime.Now;
                DateTime dtpTo = DateTime.Now;
                double cashRecipts = 0;
                DataSet ds0 = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dtTitle = new DataTable();
                dtTitle.TableName = "dtTitle";
                dtDetails.TableName = "dtDetails";
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Sql_Query = "";
                //DateTime s = DateTime.Parse(fromdatee);
                if (fromdatee != null && todatee != null)
                {
                    string[] dateString = fromdatee.Split('/');
                    DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                    string[] dateString2 = todatee.Split('/');
                    DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                    fromdate = fromdat;
                    todate = todat;
                    fdt = fromdate.ToString("ddMMyyyy");
                    tdt = todate.ToString("ddMMyyyy");
                }
                else
                {
                    fdt = (usrWiseSmryObj.usrFrom).ToString();
                    tdt = (usrWiseSmryObj.usrTo).ToString();
                }

                string Head2 = "";
                string Head3 = "";
                string nTblOut = "";
                string nRptName = "";
                string Head1 = "";
                int Userid = 0;
                Userid = userKey;
                string Conditions = "";
                string NSmplCond = "";


                brnchName = usrWiseSmryObj.BrMst_Name;
                string nCondition = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }

                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (usrWiseSmryObj.usrCheck == 0)
                {
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    if (BrmstKey == 0)
                    {

                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }
                    else
                    {
                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }

                    try
                    {
                        CashPaySum = Convert.ToDouble(cmd12.ExecuteScalar());
                    }
                    catch
                    {
                        CashPaySum = 0;
                    }
                    if (BrmstKey == 0)
                    {

                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_YrId = " + YearId + "", sqlcon);

                    }
                    else
                    {
                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);
                    }

                    try
                    {
                        cashRecipts = Convert.ToDouble(cmd13.ExecuteScalar());
                    }
                    catch
                    {
                        cashRecipts = 0;
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    dt.Columns.Add("CashPaySum", typeof(float));
                    dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    dt.Rows[0]["cashRecipts"] = cashRecipts;
                    dt.Rows[0]["CashPaySum"] = CashPaySum;

                    ds0.Tables.Add(dt);
                    try
                    {
                        Userid = Convert.ToInt32(userKey);
                    }
                    catch { }
                    NVchrConditions = " AND  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND vchr_UsrId=" + Userid + " ";
                    Conditions = " AND  A.Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NBillConditions = " AND  Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NPendConditions = " AND  PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    //********************
                    if (BrmstKey > 0)
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                       "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                        " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";
                    }
                    else
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                                             "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                                              " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";

                    }
                    //SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    //sDa.Fill(ds0, "PendingColl");
                    cmd0 = new SqlCommand(Sql_Query);
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");


                    //cmd0.CommandText = Sql_Query;
                    //sd0 = new SqlDataAdapter(cmd0,sqlcon);

                    //sd0.Fill(ds0, "dtDetails");
                    //*******************************
                    if (BrmstKey > 0)
                    {
                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_CpyId = " + _CpyId + " AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                          " UNION " +
                                        " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                        " UNION " +
                                       " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                    }
                    else
                    {
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                         " UNION " +
                                       " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                       " UNION " +
                                      " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";

                    }
                    //sd0 = new SqlDataAdapter(cmd0);
                    //sd0.Fill(ds0, "dtPending");
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtPending");
                    if (BrmstKey > 0)
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                          " UNION " +
                                          " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";

                    }
                    else
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                         " UNION " +
                                         " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND  PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";
                    }
                    //sd0.Fill(ds0, "dtUsr");
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtUsr");
                    //**********************  
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "Company_Mst");
                    //**********************

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UsrWiseSummary.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UsrWiseSummary.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else if (usrWiseSmryObj.usrCheck == 1)
                {


                    LabNoFrom = (usrWiseSmryObj.usrFrom).ToString();
                    LabNoTo = (usrWiseSmryObj.usrTo).ToString();
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollectionSummery";
                        brKey = (int)BrmstKey;
                    }
                    //usrWiseObj
                    //usrFrom usrTo
                    Head2 = "BillNo FROM : " + LabNoFrom.Trim() + "  To : " + LabNoTo.Trim();
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    if (BrmstKey == 0)
                    {

                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }
                    else
                    {
                        cmd12 = new SqlCommand("SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);

                        CashPaySum = 0;
                    }

                    try
                    {
                        CashPaySum = Convert.ToDouble(cmd12.ExecuteScalar());
                    }
                    catch
                    {
                        CashPaySum = 0;
                    }
                    if (BrmstKey == 0)
                    {

                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_YrId = " + YearId + "", sqlcon);

                    }
                    else
                    {
                        cmd13 = new SqlCommand("SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + dtpFrom.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + dtpTo.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + YearId + "", sqlcon);
                    }

                    try
                    {
                        cashRecipts = Convert.ToDouble(cmd13.ExecuteScalar());
                    }
                    catch
                    {
                        cashRecipts = 0;
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    dt.Columns.Add("CashPaySum", typeof(float));
                    dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    dt.Rows[0]["cashRecipts"] = cashRecipts;
                    dt.Rows[0]["CashPaySum"] = CashPaySum;
                    ds0.Tables.Add(dt);
                    int LabFrom = 0;
                    int LabTo = 0;
                    try
                    {
                        LabFrom = Convert.ToInt32(usrWiseSmryObj.usrFrom);

                    }
                    catch { }
                    try
                    {
                        LabTo = Convert.ToInt32(usrWiseSmryObj.usrTo);

                    }
                    catch { }

                    Conditions = " AND A.Inv_No>=" + LabFrom + " AND A.Inv_No<='" + LabTo + "' ";
                    NBillConditions = " AND Inv_No>=" + LabFrom + " AND Inv_No<='" + LabTo + "' ";
                    NPendConditions = " AND PndC_Labno>=" + LabFrom + " AND PndC_Labno<='" + LabTo + "' ";

                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    //*************************
                    if (BrmstKey > 0)
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                       "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                        " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";
                    }
                    else
                    {
                        Sql_Query = "SELECT Isnull(Sum(Inv.Inv_Netamt),0) As NetAmt,Isnull(Sum(Inv.Inv_RcvdAmt),0) As RecAmt,usr.Usr_Name as UserName,usr.Usr_EmpId FROM  Invoice_Mst " +
                                                             "Inv Left Join Users usr On Inv.Inv_UsrId=usr.Usr_EmpId WHERE   Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " " + NBillConditions +
                                                              " group by usr.Usr_EmpId,usr.Usr_Name order by Usr_Name";

                    }
                    cmd0 = new SqlCommand(Sql_Query);
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");
                    //*******************************
                    if (BrmstKey > 0)
                    {
                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_CpyId = " + _CpyId + " AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                          " UNION " +
                                        " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                        " UNION " +
                                       " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque' AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                    }
                    else
                    {
                        cmd0.CommandText = "SELECT SUM(PendAmt) AS PendAmt,SUM(PendCard) As PendCard,Sum(PendCheq) AS PendCheq,PndC_UsrId FROM( SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,0 AS PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0  AND PndC_InvPaymode='Cash'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +
                                         " UNION " +
                                       " SELECT 0 as PendAmt ,ISNULL(SUM(PndC_Amount),0) as PendCard,0 As PendCheq,PndC_UsrId FROM PendingCollections WHERE   PndC_InvPaymode='Debit/Credit' AND  PndC_Cancld=0   AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId " +

                                       " UNION " +
                                      " SELECT 0 as PendAmt,0 AS PendCard,ISNULL(SUM(PndC_Amount),0) as PendCheq,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_InvPaymode='Cheque'  AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + "   Group By PndC_UsrId   ) A Group by A.PndC_UsrId ";


                        //cmd0.CommandText = "SELECT ISNULL(SUM(PndC_Amount),0) as PendAmt,PndC_UsrId FROM PendingCollections WHERE  PndC_Cancld=0 AND PndC_YrId = " + cPublic.YearId + NPendConditions + " GROUP BY PndC_UsrId";

                    }
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtPending");
                    if (BrmstKey > 0)
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND Inv.Inv_CpyId = " + BrmstKey + " AND Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                          " UNION " +
                                          " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND PndC_CpyId = " + BrmstKey + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";

                    }
                    else
                    {
                        cmd0.CommandText = "SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN Invoice_Mst Inv ON Usr.Usr_EmpId=Inv.Inv_UsrId WHERE  Inv_Status<>-1 AND  Inv.Inv_YrId = " + YearId + " AND Usr_EmpId>0 " + NBillConditions +

                                         " UNION " +
                                         " SELECT Usr.Usr_Name,Usr_EmpId FROM USERS Usr LEFT JOIN PendingCollections Pend ON Usr.Usr_EmpId=Pend.PndC_UsrId  WHERE   PndC_Cancld=0 AND  PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + NPendConditions + " AND Usr_EmpId>0 Group By Usr_Name,Usr_EmpId ";
                    }
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtUsr");

                    //**********************  
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "Company_Mst");
                    //***********************
                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public JsonResult UserWiseClctn(branchdetails usrWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                DateTime StartDate = DateTime.Now;
                string NBillConditions = "";
                string NPendConditions = "";
                string Nfile_name = "";
                double BrmstKey = 0;
                int userKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = usrWiseObj.ff;
                string todatee = usrWiseObj.tt;
                userKey = usrWiseObj.userKey;
                SqlConnection sqlcon = new SqlConnection();
                string NVchrConditions = "";
                DataSet ds0 = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dtTitle = new DataTable();
                dtTitle.TableName = "dtTitle";
                dtDetails.TableName = "dtDetails";
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Sql_Query = "";
                //DateTime s = DateTime.Parse(fromdatee);
                if (fromdatee != null && todatee != null)
                {
                    string[] dateString = fromdatee.Split('/');
                    DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                    string[] dateString2 = todatee.Split('/');
                    DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                    fromdate = fromdat;
                    todate = todat;
                    fdt = fromdate.ToString("ddMMyyyy");
                    tdt = todate.ToString("ddMMyyyy");
                }
                else
                {
                    fdt = (usrWiseObj.usrFrom).ToString();
                    tdt = (usrWiseObj.usrTo).ToString();
                }

                string Head2 = "";
                string Head3 = "";
                string nTblOut = "";
                string nRptName = "";
                string Head1 = "";
                int Userid = 0;
                Userid = userKey;
                string Conditions = "";
                string NSmplCond = "";


                brnchName = usrWiseObj.BrMst_Name;
                string nCondition = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }

                SqlCommand cmd0 = new SqlCommand();

                sqlcon = con.dbcon();
                sqlcon.Open();
                if (usrWiseObj.usrCheck == 0)
                {
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserDateWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserDateWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    //dt.Columns.Add("CashPaySum", typeof(float));
                    //dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    //dt.Rows[0]["cashRecipts"] = cashRecipts;
                    //dt.Rows[0]["CashPaySum"] = CashPaySum;

                    ds0.Tables.Add(dt);
                    try
                    {
                        Userid = Convert.ToInt32(userKey);
                    }
                    catch { }
                    NVchrConditions = " AND  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "' AND vchr_UsrId=" + Userid + " ";
                    Conditions = " AND  A.Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NBillConditions = " AND  Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    NPendConditions = " AND  PndC_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    if (BrmstKey > 0)
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                                        "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                                        Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                           "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                           "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                           "WHERE  " +
                           " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                            " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    else
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                          "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                          "WHERE  " +
                          " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                          Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                                        "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                                        " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    DataTable PendingColl = new DataTable();
                    PendingColl.TableName = "PendingColl";
                    SqlCommand cmd;

                    string sqlStr = "";

                    cmd0.CommandText = "SELECT A.PndC_Key,A.PndC_InvPaymode, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,AccountHeads_Mst_3.AhMst_pName AS Insurance,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK)   LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.PndC_CpyId = B.Inv_cpyId LEFT OUTER JOIN  dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON B.Inv_InsId = AccountHeads_Mst_3.AhMst_Key WHERE  " +
                   "(A.PndC_Cancld <> 1) " + NPendConditions + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey;

                    ////************************************************************************

                    //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                    SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(ds0, "PendingColl");

                    //Anupama 29-06-2018************

                    cmd0.CommandText = "SELECT [vchr_Receipt],[vchr_Date],[vchr_TransNo],[vchr_UsrId],[AhMst_pName] FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions;

                    SqlDataAdapter DA = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    DA.Fill(ds0, "UserWiseColl");

                    //******************************END
                    SqlCommand cmd_totpend = new SqlCommand("select Isnull(SUM(PndC_Amount),0) from PendingCollections where PndC_Date >='" + fromdate.ToShortDateString() + "' AND PndC_Date <='" + todate.ToShortDateString() + "' AND PndC_UsrId =" + Userid + " and PndC_Cancld !=1 and PndC_InvPaymode='Cash' AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey + "", sqlcon);
                    SqlCommand cmd_totrecpt = new SqlCommand("SELECT Isnull(SUM(vchr_Receipt),0) FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions + "", sqlcon);
                    SqlDataAdapter adt_totpend = new SqlDataAdapter(cmd_totpend.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "Total_PendingCol");
                    adt_totpend = new SqlDataAdapter(cmd_totrecpt.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "ToTal_CasReceipt");
                    //nCondition = getCondition();
                    //if (nCondition != "")
                    nCondition = " AND A.Inv_UsrId =" + userKey + "";
                    if (BrmstKey > 0)
                    {
                        if (userKey > 0)
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                          "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                          nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff'" +
                          "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                           " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }

                    else
                    {
                        if (userKey > 0)
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);

                    sDa.Fill(dtDetails);
                    ds0.Tables.Add(dtDetails);
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(dtTitle);
                    ds0.Tables.Add(dtTitle);

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else if (usrWiseObj.usrCheck == 1)
                {


                    LabNoFrom = (usrWiseObj.usrFrom).ToString();
                    LabNoTo = (usrWiseObj.usrTo).ToString();
                    fdt = LabNoFrom;
                    tdt = LabNoTo;
                    if (BrmstKey > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollection";
                        //Nfile_name = "Report_" + LabNoFrom + "_" + LabNoTo + "_" + "All" + "_" + "UserWiseCollection";
                        brKey = (int)BrmstKey;
                    }
                    //usrWiseObj
                    //usrFrom usrTo
                    Head2 = "BillNo FROM : " + LabNoFrom.Trim() + "  To : " + LabNoTo.Trim();
                    if (BrmstKey > 0)
                    {
                        Head3 = "DepartMent : " + brnchName;
                    }
                    else
                    {
                        Head3 = "All DepartMents";
                    }
                    DataTable dt = new DataTable();
                    dt.Columns.Add("DateInterval", typeof(string));
                    dt.Columns.Add("DeptType", typeof(string));

                    //dt.Columns.Add("CashPaySum", typeof(float));
                    //dt.Columns.Add("cashRecipts", typeof(float));
                    dt.Rows.Add();
                    dt.Rows[0]["DateInterval"] = Head2;
                    dt.Rows[0]["DeptType"] = Head3;
                    ds0.Tables.Add(dt);
                    int LabFrom = 0;
                    int LabTo = 0;
                    try
                    {
                        LabFrom = Convert.ToInt32(usrWiseObj.usrFrom);

                    }
                    catch { }
                    try
                    {
                        LabTo = Convert.ToInt32(usrWiseObj.usrTo);

                    }
                    catch { }

                    Conditions = " AND A.Inv_No>=" + LabFrom + " AND A.Inv_No<='" + LabTo + "' ";
                    NBillConditions = " AND Inv_No>=" + LabFrom + " AND Inv_No<='" + LabTo + "' ";
                    NPendConditions = " AND PndC_Labno>=" + LabFrom + " AND PndC_Labno<='" + LabTo + "' ";

                    if (Userid > 0)
                    {
                        Conditions = Conditions + " AND A.Inv_UsrId=" + Userid + " ";
                        NBillConditions = Conditions + " AND Inv_UsrId=" + Userid + " ";
                        NPendConditions = NPendConditions + " AND PndC_UsrId=" + Userid + " ";

                    }
                    if (BrmstKey > 0)
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                                        "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                                        Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                           "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                           "A.Inv_UsrId,B.AhMst_pName AS UserName,A.Inv_PayMode,A.Inv_RcvdAmt,C.BrMst_Name FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                           "WHERE  " +
                           " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                            " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    else
                    {
                        if (Userid > 0)
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                          "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                          "WHERE  " +
                          " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                          Conditions + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            Sql_Query = "SELECT A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                                        "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt,C.BrMst_Name," +
                                        "A.Inv_UsrId,A.Inv_PayMode,A.Inv_RcvdAmt,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) INNER JOIN " +    // LEFT OUTER JOIN " +
                                        "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' LEFT JOIN Baranches_Mst C ON A.Inv_BrID=C.BrMst_Key " +
                                        "WHERE  " +
                                        " A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                                        " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_PayMode,A.Inv_RcvdAmt,BrMst_Name ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    DataTable PendingColl = new DataTable();
                    PendingColl.TableName = "PendingColl";
                    SqlCommand cmd;

                    string sqlStr = "";

                    cmd0.CommandText = "SELECT A.PndC_Key,A.PndC_InvPaymode, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId, " +
                   "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                   "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                   "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,B.Inv_ShortName,B.Inv_CurBalAmt,  " +
                   "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,AccountHeads_Mst_3.AhMst_pName AS Insurance,  " +
                   "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                   "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd  " +
                   "FROM dbo.PendingCollections A WITH (NOLOCK)   LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND  A.PndC_Labno = B.Inv_No AND  A.PndC_CpyId = B.Inv_cpyId LEFT OUTER JOIN  dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON B.Inv_InsId = AccountHeads_Mst_3.AhMst_Key WHERE  " +
                   "(A.PndC_Cancld <> 1) " + NPendConditions + " AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey;

                    ////************************************************************************

                    //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                    SqlDataAdapter sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(ds0, "PendingColl");

                    //Anupama 29-06-2018************

                    cmd0.CommandText = "SELECT [vchr_Receipt],[vchr_Date],[vchr_TransNo],[vchr_UsrId],[AhMst_pName] FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions;

                    SqlDataAdapter DA = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    DA.Fill(ds0, "UserWiseColl");

                    //******************************END                                                                                                                                                                 
                    SqlCommand cmd_totpend = new SqlCommand("select Isnull(SUM(PndC_Amount),0) from PendingCollections where PndC_Labno >='" + LabFrom.ToString() + "' AND PndC_Labno <='" + LabTo.ToString() + "' AND PndC_UsrId =" + Userid + " and PndC_Cancld !=1 and PndC_InvPaymode='Cash' AND PndC_Date> = '" + StartDate.ToString("yyyy-MM-dd") + "'" + " AND PndC_CpyId = " + BrmstKey + "", sqlcon);
                    SqlCommand cmd_totrecpt = new SqlCommand("SELECT Isnull(SUM(vchr_Receipt),0) FROM [dbo].[Vouchers] INNER JOIN [dbo].[AccountHeads_Mst] ON [dbo].[Vouchers].[vchr_Id]= [dbo].[AccountHeads_Mst].[AhMst_Key] WHERE [vchr_UsrId]='" + Userid + "' AND [vchr_YrId]='" + YearId + "' and  vchr_TransType='Cash Receipts' " + NVchrConditions + "", sqlcon);
                    SqlDataAdapter adt_totpend = new SqlDataAdapter(cmd_totpend.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "Total_PendingCol");
                    adt_totpend = new SqlDataAdapter(cmd_totrecpt.CommandText, sqlcon);
                    adt_totpend.Fill(ds0, "ToTal_CasReceipt");
                    //nCondition = getCondition();
                    //if (nCondition != "")
                    nCondition = " AND A.Inv_UsrId =" + userKey + "";
                    if (BrmstKey > 0)
                    {
                        if (userKey > 0)
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                          "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                          nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                        else
                        {

                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                          "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                          "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK)  left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key  INNER JOIN " +    // LEFT OUTER JOIN " +
                          "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff'" +
                          "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                          "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " +
                           " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }

                    else
                    {
                        if (userKey > 0)
                        {                                //LabFrom LabTo
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             nCondition + " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";
                        }
                        else
                        {
                            sqlStr = "SELECT A.Inv_No,A.Inv_name,C.BrMst_Name as BrMst_Name,A.Inv_RcvdAmt,A.Inv_PayMode,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,A.Inv_Date, SUM(A.Inv_DiscAmt) AS Inv_DiscAmt, SUM(A.Inv_Netamt) AS Inv_Netamt," +
                            "SUM(A.Inv_CurRcvdAmt) AS Inv_CurRcvdAmt,SUM(A.Inv_CurBalAmt) AS Inv_CurBalAmt," +
                            "A.Inv_UsrId,B.AhMst_pName AS UserName FROM dbo.Invoice_Mst A WITH (NOLOCK) left join Baranches_Mst C WITH (NOLOCK) on Inv_BrID=BrMst_Key INNER JOIN " +    // LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_UsrId = B.AhMst_Key AND B.AhMst_Type = 'Staff' " +
                            "WHERE A.Inv_No >= '" + LabFrom.ToString() + "' AND A.Inv_No <= '" + LabTo.ToString() + "' " +
                            "AND A.Inv_Status <> - 1 AND ISNULL(Inv_UsrId,0) > 0  AND A.Inv_YrId = " + YearId + " " +
                             " GROUP BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName,A.Inv_No,A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender,BrMst_Name,Inv_RcvdAmt,Inv_PayMode ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";

                        }
                    }
                    cmd = new SqlCommand(sqlStr);
                    sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);

                    sDa.Fill(dtDetails);
                    ds0.Tables.Add(dtDetails);
                    cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sDa.Fill(dtTitle);
                    ds0.Tables.Add(dtTitle);

                    string Reportfilepaths = "";
                    string filepath = "";
                    ReportDocument reportDocument = new ReportDocument();
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserWiseInvoices.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserWiseInvoices.xsd");
                    try
                    {
                        reportDocument.Load(filepath);


                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {

                    }

                    string pdfFile = "";
                    string pdfFilepath = Server.MapPath("~/PDFReport/");
                    string TempLog = "";
                    try
                    {
                        Nfile_name = Nfile_name + ".pdf";
                        pdfFile = pdfFilepath + Nfile_name;
                        TempLog = pdfFile;
                        CrystalDecisions.Shared.ExportOptions CrExportOptions;
                        DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                        PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                        CrDiskFileDestinationOptions.DiskFileName = TempLog;

                        CrExportOptions = reportDocument.ExportOptions;
                        CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                        CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                        CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                        CrExportOptions.FormatOptions = CrFormatTypeOptions;

                        reportDocument.Export();
                        //************************************************************
                    }
                    catch (Exception exe)
                    {
                        string ModiData = " PdfExport Error- " + exe.Message + " ";

                        StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                        //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                        try
                        {
                            tstream.WriteLine("");
                            tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                            tstream.WriteLine("");
                            tstream.Flush();
                            tstream.Close();
                        }
                        catch { }
                        //errorflag = 1;
                    }
                    sqlcon.Close();
                    return Json(new { Result = "OK" });
                }
                else
                {
                    return Json(new { Result = "ERROR" });
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFUsrBillWiseClctn()

        {
            string fileName = "";

            if (brKey > 0)
            {
                //Nfile_name = "Report_" + LabNoFrom + "_" + LabNoTo + "_" + brnchName + "_" + "UserBillWiseCollection";

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public FileResult PDFUsrWiseCollection()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserDateWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserDateWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult SearchCategoryName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CATAGORY_WITH_NAME_Result> t = new List<Stproc_SEARCH_CATAGORY_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CATAGORY_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCategoryCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_CATAGORY_WITH_CODE_Result> t = new List<Stproc_SEARCH_CATAGORY_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_CATAGORY_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchStaffCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_CODE_Result> t = new List<Stproc_SEARCH_USER_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_USER_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchStaffName(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_WORD_Result> t = new List<Stproc_SEARCH_USER_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_USER_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchUsrName(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_WORD_Result> t = new List<Stproc_SEARCH_USER_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_USER_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchUsrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_USER_WITH_CODE_Result> t = new List<Stproc_SEARCH_USER_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_USER_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDctrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_DOCTOR_WITH_CODE_Result> t = new List<Stproc_SEARCH_DOCTOR_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_DOCTOR_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDctrName(string term)
        {
            try
            {
                List<Stproc_SEARCH_DOCTOR_WITH_WORD_Result> t = new List<Stproc_SEARCH_DOCTOR_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_DOCTOR_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFPatientInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PatientWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PatientWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult PatientWiseInvoice(branchdetails patInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string sqlStr = "";
                string Head2 = "";
                SqlDataAdapter sDa = new SqlDataAdapter();
                string fromdatee = patInvObj.ff;
                string todatee = patInvObj.tt;
                //*****************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                DateTimeConverter cx = new DateTimeConverter();
                string fromdt = fromdat.ToShortDateString();
                string todt = todat.ToShortDateString();
                //DateTime fdts = Convert.ToDateTime(fromdt);
                //DateTime tdts = Convert.ToDateTime(todt);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                //string fromdat = Convert.ToDateTime(fromdatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
                //string todat = Convert.ToDateTime(todatee).ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);

                //int nYrId = 2122;
                brnchName = patInvObj.BrMst_Name;
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                SqlCommand cmd = new SqlCommand();
                string Head3 = "";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                string Head1 = "";
                string nCondition = "";
                double BrmstKey = 0;
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCollectionSummary";

                string BrmstName = patInvObj.BrMst_Name;
                Head1 = "PATIENT WISE INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = brnchName;
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PatientWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PatientWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                //*********************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Gender,A.Inv_Tittle,Inv_age,A.Inv_ageymd,A.Inv_phno,A.Inv_Address,A.Inv_Email,A.Inv_Comment,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                            "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_Name";
                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Gender,A.Inv_Tittle,Inv_age,A.Inv_ageymd,A.Inv_phno,A.Inv_Address,A.Inv_Email,A.Inv_Comment,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                            "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_Name";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //*********************************************************
                string Reportfilepaths = "";
                string filepath = "";
                dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PatientwiseInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PatientwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }
        public FileResult PDFDivWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DivWiseInvoice(branchdetails divInvObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string[] checkedDiv = divInvObj.checkedDiv;
                string[] checkedDivId = divInvObj.checkedDivId;

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = divInvObj.ff;
                string todatee = divInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DivisionId = "";
                string PayModes = "";
                sqlcon.Open();
                for (int i = 0; i < checkedDivId.Count(); i++)
                {
                    if (DivisionId == "")
                    {
                        DivisionId += (checkedDivId[i]).ToString();
                    }
                    else
                    {
                        DivisionId += "," + (checkedDivId[i]).ToString();
                    }
                }
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = divInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = divInvObj.BrMst_Name;
                string PayMode = divInvObj.Inv_PayMode;
                Head1 = "DIVISION WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails pmd in paymd)
                {
                    if (pmd.Inv_PayMode == PayMode)
                    {
                        nPaymode = pmd.Inv_PayMode;
                    }

                }
                for (int i = 0; i < paymd.Count(); i++)
                {
                    if (PayModes == "")
                    {
                        PayModes += "'" + (paymd[i].Inv_PayMode).ToString() + "'";
                    }
                    else
                    {
                        PayModes += "," + "'" + (paymd[i].Inv_PayMode).ToString() + "'";
                    }
                }
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (checkedDivId != null)
                {
                    nCondition = " AND E.Mstr_Key IN(" + DivisionId + ")";
                }



                //checkedDiv checkedDivId
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (PayMode != "<-- ALL -->")
                {
                    nCondition = nCondition + " AND Inv_PayMode='" + PayMode + "'";

                }
                else
                {
                    //string pay = paymd.All;
                    nCondition = nCondition + " AND Inv_PayMode IN(" + PayModes + ")";

                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseInvoices";
                    brKey = (int)BrmstKey;
                }

                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                                 "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                 "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                 "A.Inv_BrID, A.Inv_Date,A.Inv_paymode, A.Inv_time,A.Inv_InsId, A.Inv_name,A.Inv_age,A.Inv_ageymd,A.Inv_Gender, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                 "C.TstMst_ShortName, E.Mstr_Desc AS DivName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                                 "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                 "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                  "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                 "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>=0 LEFT OUTER JOIN " +
                                 "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DivsnId = E.Mstr_Key AND E.Mstr_Type = 'Div' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                                 "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                 "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_Status!=-1 AND A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                                                "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                                "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                                "A.Inv_BrID, A.Inv_Date, A.Inv_time,A.Inv_InsId, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                                "C.TstMst_ShortName, E.Mstr_Desc AS DivName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                                                "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                                "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                                 "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                                "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>=0 LEFT OUTER JOIN " +
                                                "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DivsnId = E.Mstr_Key AND E.Mstr_Type = 'Div' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                                                "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                                "AND  A.Inv_YrId = " + nYrId + " AND A.Inv_Status!=-1 " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //********************DIVISIOn WISe************************
                double CashPaySum = 0;

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND  (vchr_TransType='Cash Payment' OR vchr_TransType='Day book' ) AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Payment) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND (vchr_TransType='Cash Payment'  OR vchr_TransType='Day book') AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                CashPaySum = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    CashPaySum = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    CashPaySum = 0;
                }

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=1 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashRecipts = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashRecipts = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashRecipts = 0;
                }
                //*********************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND vchr_CpyId = " + BrmstKey + " AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;
                }
                else
                {
                    sqlStr = "SELECT SUM(vchr_Receipt) AS rsExpAmt From Vouchers WITH (NOLOCK)  WHERE vchr_BookId=24 AND vchr_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND vchr_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND vchr_YrId = " + nYrId + " AND vchr_BrId=" + BrmstKey;

                }
                double cashReciptsRefund = 0;

                cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = sqlStr;
                try
                {
                    cashReciptsRefund = Convert.ToDouble(cmd.ExecuteScalar());
                }
                catch
                {
                    cashReciptsRefund = 0;
                }
                //*********************************************


                dtMaster.Columns.Add("CashPaySum", typeof(double));
                dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["CashPaySum"] = CashPaySum;
                dtMaster.Columns.Add("cashRecipts", typeof(double));
                //dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["cashRecipts"] = cashRecipts;

                dtMaster.Columns.Add("cashReciptsRefund", typeof(double));
                //dtMaster.Rows.Add(0);
                dtMaster.Rows[0]["cashReciptsRefund"] = cashReciptsRefund;
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtMaster);
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwiseStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivWiseInvoices()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + "DivisionWiseInvoice2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DivWiseInvoice2(branchdetails divInvObj2)
        {

            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                double? YearId = 0;
                double CompanyId = 0;
                YearId = nYrId;
                CompanyId = BrMst_Key;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = divInvObj2.ff;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);

                fromdate = fromdat;

                fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DivisionId = "";
                string PayModes = "";
                sqlcon.Open();

                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                //brnchName = divInvObj2.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + "DivisionWiseInvoice2";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                //********************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;


                cmd0.CommandText = "SELECT SUM(ISNULL(InvItm_rate,0)) as NetAmount,Mst.Mstr_Desc  As Division ,Mst1.Mstr_Desc As Department  FROM Invoice_Det Invdet Left join Invoice_Mst Inv On Invdet.InvItm_Invno=Inv.Inv_No AND Inv.Inv_CpyId=Invdet.InvItm_CpyId AND Inv.Inv_YrId=Invdet.InvItm_Yrid Left Join Test_Mst Tst On Invdet.InvItm_TstId=Tst.TstMst_Key Left Join Masters Mst On Tst.TstMst_DivsnId=Mst.Mstr_Key Left Join Masters Mst1 On Tst.TstMst_DeptId=Mst1.Mstr_Key WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND InvItm_YrId=" + YearId + " AND InvItm_CpyId=" + CompanyId + " AND Inv_Status<>-1 Group By Mst.Mstr_Desc,Mst1.Mstr_Desc ";
                string cb = "SELECT SUM(ISNULL(InvItm_rate,0)) as NetAmount,Mst.Mstr_Desc  As Division ,Mst1.Mstr_Desc As Department  FROM Invoice_Det Invdet Left join Invoice_Mst Inv On Invdet.InvItm_Invno=Inv.Inv_No  Left Join Test_Mst Tst On Invdet.InvItm_TstId=Tst.TstMst_Key Left Join Masters Mst On Tst.TstMst_DivsnId=Mst.Mstr_Key Left Join Masters Mst1 On Tst.TstMst_DeptId=Mst1.Mstr_Key WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND InvItm_YrId=" + YearId + " AND InvItm_CpyId=" + CompanyId + " Group By Mst.Mstr_Desc,Mst1.Mstr_Desc ";
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "Invoice_Mst");
                //****************************************************
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                filepath = "";
                int MinLabNo = 0;
                int MaxLabNO = 0;
                double RecivedAmount = 0;
                double DiscountAmt = 0;
                double PendingCollecAmount = 0;
                double Bal = 0;
                cmd0 = new SqlCommand("SELECT ISNULL(MIN(Inv_No),0) FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + " AND  Inv_Status<>-1 and  Inv_CpyId=" + CompanyId + "", sqlcon);
                MinLabNo = Convert.ToInt32(cmd0.ExecuteScalar());
                cmd0.Parameters.Clear();
                cmd0 = new SqlCommand("SELECT ISNULL(MAX(Inv_No),0) FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + " AND Inv_Status<>-1 AND Inv_CpyId=" + CompanyId + "", sqlcon);
                MaxLabNO = Convert.ToInt32(cmd0.ExecuteScalar());
                cmd0 = new SqlCommand("SELECT SUM(ISNULL(Inv_DiscAmt,0)) AS Discount ,SUM(ISNULL(Inv_Netamt,0)) AS ReceivedAmt,SUM(ISNULL(Inv_CurBalAmt,0)) AS BalanceAmt,sum (ISNULL(Inv_BalAmt,0)) AS Balance FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 AND Inv_CpyId=" + CompanyId + "", sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd0);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                foreach (DataRow dr in dt1.Rows)
                {
                    try
                    {
                        RecivedAmount = Convert.ToDouble(dr["ReceivedAmt"]);
                    }
                    catch { }

                    try
                    {
                        DiscountAmt = Convert.ToDouble(dr["Discount"]);
                    }
                    catch { }
                    try
                    {
                        Bal = Convert.ToDouble(dr["Balance"]);
                    }
                    catch { }

                    RecivedAmount = RecivedAmount + Bal;



                }
                cmd0 = new SqlCommand("SELECT SUM (ISNULL(PndC_Amount,0)) AS PendSumAmt FROM PendingCollections WITH (NOLOCK)  WHERE  " +
                 "(PndC_Cancld <> 1) AND PndC_Date = '" + fromdate.ToShortDateString() + "' AND  PndC_CpyId = " + CompanyId + "", sqlcon);


                try
                {
                    PendingCollecAmount = Convert.ToDouble(cmd0.ExecuteScalar());
                }
                catch { }

                double CashBaL = 0;
                double CreditNetamt = 0;

                cmd0 = new SqlCommand("SELECT ISNULL(SUM(Inv_BalAmt),0)  AS Balance FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 and inV_paymode='CASH' AND Inv_CpyId=" + CompanyId + "", sqlcon);
                CashBaL = Convert.ToDouble(cmd0.ExecuteScalar());

                cmd0 = new SqlCommand("SELECT ISNULL(SUM(Inv_BalAmt),0)  AS NetAmt FROM Invoice_Mst WHERE Inv_Date='" + fromdate.ToShortDateString() + "' AND Inv_YrId=" + YearId + "  AND Inv_Status<>-1 and inV_paymode!='CASH' AND Inv_CpyId=" + CompanyId + "", sqlcon);
                CreditNetamt = Convert.ToDouble(cmd0.ExecuteScalar());

                Head2 = "Closing Report on : " + fromdate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Reset();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("MinLabNo", typeof(string));
                dt.Columns.Add("MaxLabNo", typeof(string));
                dt.Columns.Add("RecAmt", typeof(double));
                dt.Columns.Add("DiscAmt", typeof(double));
                dt.Columns.Add("Balance", typeof(double));
                dt.Columns.Add("PenCollAmt", typeof(double));

                dt.Columns.Add("CashBaL", typeof(double));
                dt.Columns.Add("CreditNetamt", typeof(double));


                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["MinLabNo"] = "FROM : " + MinLabNo.ToString();
                dt.Rows[0]["MaxLabNo"] = "TO : " + MaxLabNO.ToString();
                dt.Rows[0]["RecAmt"] = RecivedAmount;
                dt.Rows[0]["DiscAmt"] = DiscountAmt;
                dt.Rows[0]["Balance"] = Bal;

                dt.Rows[0]["PenCollAmt"] = PendingCollecAmount;

                dt.Rows[0]["CashBaL"] = CashBaL;
                dt.Rows[0]["CreditNetamt"] = CreditNetamt;

                ds0.Tables.Add(dt);


                //********************************************************************************************

                sqlcon.Close();

                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DiviDepWise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DiviDepWise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    TempLog = "";
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivisionWiseSmry()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseSummery";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DivisionWiseSmry(branchdetails divWiseSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = divWiseSmryObj.ff;
                string todatee = divWiseSmryObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = divWiseSmryObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DivisionWiseSummery";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DivisionWiseSummery";
                    brKey = (int)BrmstKey;
                }
                //*****************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "select Mstr_Desc,COUNT(Mstr_Desc),Inv_Date from" + Environment.NewLine
                      + "(" + Environment.NewLine
                      + "select distinct A.Inv_Date,InvItm_Invno,InvItm_CpyId,InvItm_YrId,M.Mstr_Desc " + Environment.NewLine
                      + "from dbo.Invoice_Det D WITH (NOLOCK) LEFT JOIN dbo.Test_Mst T ON D.InvItm_TstId = T.TstMst_Key " + Environment.NewLine
                      + "LEFT JOIN dbo.Masters M WITH (NOLOCK) ON T.TstMst_DivsnId = M.Mstr_Key AND M.Mstr_Type = 'Div'" + Environment.NewLine
                      + "LEFT JOIN dbo.Invoice_Mst A WITH (NOLOCK) ON D.InvItm_YrId = A.Inv_YrId AND D.InvItm_Invno = A.Inv_No and D.InvItm_CpyId = A.Inv_CpyId" + Environment.NewLine
                      + "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + condition + Environment.NewLine
                      + ") hj" + Environment.NewLine
                      + "group by Mstr_Desc,Inv_Date";
                }
                else
                {
                    sqlStr = "select Mstr_Desc,COUNT(Mstr_Desc),Inv_Date from" + Environment.NewLine
                      + "(" + Environment.NewLine
                      + "select distinct A.Inv_Date,InvItm_Invno,InvItm_CpyId,InvItm_YrId,M.Mstr_Desc " + Environment.NewLine
                      + "from dbo.Invoice_Det D WITH (NOLOCK) LEFT JOIN dbo.Test_Mst T ON D.InvItm_TstId = T.TstMst_Key " + Environment.NewLine
                      + "LEFT JOIN dbo.Masters M WITH (NOLOCK) ON T.TstMst_DivsnId = M.Mstr_Key AND M.Mstr_Type = 'Div'" + Environment.NewLine
                      + "LEFT JOIN dbo.Invoice_Mst A WITH (NOLOCK) ON D.InvItm_YrId = A.Inv_YrId AND D.InvItm_Invno = A.Inv_No and D.InvItm_CpyId = A.Inv_CpyId" + Environment.NewLine
                      + "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND A.Inv_YrId = " + nYrId + condition + Environment.NewLine
                      + ") hj" + Environment.NewLine
                      + "group by Mstr_Desc,Inv_Date";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //*****************************************************

                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwiseSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwiseSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    return Json(new { Result = "ERROR" });
                    //errorflag = 1;
                }

            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult UsrTrckRpt(branchdetails usrTrckObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string nUsrName = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = usrTrckObj.ff;
                string todatee = usrTrckObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Nfile_name = "";
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                nUsrName = usrTrckObj.User_Name;
                brnchName = usrTrckObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                //dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserTrack";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserTrack";
                    brKey = (int)BrmstKey;
                }
                //*****************************
                if (nUsrName != "")
                {
                    if (BrmstKey > 0)
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and [UsrTrack_CpyId]=" + BrmstKey + "  and UsrTrack_UsrName='" + nUsrName + "'";
                    }
                    else
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and UsrTrack_UsrName='" + nUsrName + "'";
                    }
                }
                else
                {
                    if (BrmstKey > 0)
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + todate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId + " and [UsrTrack_CpyId]=" + BrmstKey;
                    }
                    else
                    {
                        cmd.CommandText = "SELECT UsrTrack_UsrId,UsrTrack_Date,UsrTrack_EmpId,UsrTrack_UsrName,UsrTrack_Caption,UsrTrack_Form,UsrTrack_WorkStation,UsrTrack_Type,[UsrTrack_CpyId],BrMst_Name" + Environment.NewLine
                        + " from User_Track WITH (NOLOCK) " + Environment.NewLine
                        + " LEFT JOIN Baranches_Mst WITH (NOLOCK) ON UsrTrack_CpyId=BrMst_Key " + Environment.NewLine
                        + " where convert(datetime,UsrTrack_Date)>='" + fromdate.ToString("yyyy-MM-dd hh:mm tt") + "' and convert(datetime,UsrTrack_Date)<='" + todate.ToString("yyyy-MM-dd hh:mm tt") + "' " + Environment.NewLine
                        + " AND [UsrTrack_YrId]=" + YearId;
                    }
                }

                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "UsrTrckDet");

                //*****************************

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");

                filepath = "";
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //******************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_UserTrackStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_UserTrackStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFUsrTrckRpt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "UserTrack";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "UserTrack";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public FileResult PDFBrnchWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "BranchWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "BranchWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult brnchWiseInvoice(branchdetails bnchWiseInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = bnchWiseInvObj.ff;
                string todatee = bnchWiseInvObj.tt;
                string nTblOut = "";
                string nRptName = "";
                //**************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}

                //DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                brnchName = bnchWiseInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DailyCashInvoice";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == brnchName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();

                dTitle = FillTitleTbl(Head1, Head2, Head3);



                if (BrmstKey > 0)
                {
                    condition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "BranchWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "BranchWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                sqlStr = "SELECT     dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_IsInsrnce, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_name," + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Address, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_SmplDate, dbo.Invoice_Mst.Inv_RsltNO, dbo.Invoice_Mst.Inv_BrID, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_time, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_InsId, dbo.Invoice_Mst.Inv_AreaId, dbo.Invoice_Mst.Inv_EmailtoPatient, dbo.Invoice_Mst.Inv_Email, dbo.Invoice_Mst.Inv_EtoDr, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DrId, dbo.Invoice_Mst.Inv_OutDr, dbo.Invoice_Mst.Inv_hospId, dbo.Invoice_Mst.Inv_Schrge, dbo.Invoice_Mst.Inv_DiscId, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_CltnID, dbo.Invoice_Mst.Invl_DiscPer, dbo.Invoice_Mst.Inv_RepTime, dbo.Invoice_Mst.Inv_GrosAmt, dbo.Invoice_Mst.Inv_DiscAmt, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt, dbo.Invoice_Mst.Inv_BalAmt, dbo.Invoice_Mst.Inv_Comment, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_CmpltdDate, dbo.Invoice_Mst.Inv_CmpltdTime, dbo.Invoice_Mst.Inv_OthCmnt, dbo.Invoice_Mst.Inv_User, dbo.Invoice_Mst.Invl_IsPending, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_Status, dbo.Invoice_Mst.Inv_CnlComnt, dbo.Invoice_Mst.Inv_Cnltmestmp, dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, " + Environment.NewLine
                                    + "dbo.Baranches_Mst.BrMst_Code, dbo.Baranches_Mst.BrMst_Name, dbo.AccountHeads_Mst.AhMst_pName AS Insurance, " + Environment.NewLine
                                    + "AccountHeads_Mst_1.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS HospName," + Environment.NewLine
                                    + "AccountHeads_Mst_4.AhMst_pName AS CollectionStaff, dbo.Masters.Mstr_Desc AS AraMst_Name, Masters_1.Mstr_Desc AS DscRsnMst_Reason, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_UsrId, dbo.Invoice_Mst.Inv_YrId, dbo.Invoice_Mst.Inv_CpyId, dbo.Invoice_Mst.Inv_Updtd, dbo.Invoice_Mst.Inv_Tittle, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_InsNo, dbo.Invoice_Mst.Inv_PayMode, dbo.Invoice_Mst.Inv_ItemDesc, dbo.Invoice_Mst.Inv_SentMail, dbo.Invoice_Mst.Inv_RptMode, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_RepThrPersonal, dbo.Invoice_Mst.Inv_RepThrCourier, dbo.Invoice_Mst.Inv_RepThrPhone, dbo.Invoice_Mst.Inv_RepThrEmail, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DocPath1, dbo.Invoice_Mst.Inv_RepThrSms, dbo.Invoice_Mst.Inv_DocPath2, dbo.Invoice_Mst.Inv_CollModeId, " + Environment.NewLine
                                    + "dbo.Invoice_Mst.Inv_DocPath3" + Environment.NewLine
                                    + "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Baranches_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_BrID = dbo.Baranches_Mst.BrMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = dbo.AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_3  WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_hospId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.AccountHeads_Mst AS AccountHeads_Mst_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_PntId = AccountHeads_Mst_1.AhMst_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_AreaId = dbo.Masters.Mstr_Key LEFT OUTER JOIN" + Environment.NewLine
                                    + "dbo.Masters AS Masters_1 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters_1.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                     " AND  Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + condition + " order by Inv_Date";

                SqlDataAdapter adapt = new SqlDataAdapter(sqlStr, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "InvoiceMst_View");

                ds0.Tables.Add(dTitle);
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BrachwiseInvoices.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_BrachwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDiscWiseInvoices()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DiscountWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DiscountWiseInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DiscWiseInvoices(branchdetails MasterObj)
        {
            int Id = 0;
            string Nfile_name = "";
            SqlConnection sqlcon = new SqlConnection();
            sqlcon = con.dbcon();
            string nCondition = "";
            string[] checkedMasters = MasterObj.checkedMasters;
            string[] checkedMstrKey = MasterObj.checkedMstrKey;
            string condition = "";
            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedMstrKey.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedMstrKey[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedMstrKey[i]).ToString();
                }
            }
            if (nCondition != "") nCondition = " AND dbo.Invoice_Mst.Inv_DiscId IN(" + nCondition + ")";
            if (l != null)
            {

                DataTable dtDetails = new DataTable();
                dtDetails.TableName = "dtDetails";
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = MasterObj.ff;
                string todatee = MasterObj.tt;
                string Head1 = "";
                Head1 = "DISCOUNT WISE INVOICES";
                //***************************
                string filepath = "";
                SqlCommand cmd = new SqlCommand();
                DataSet ds0 = new DataSet();
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string BrmstName = MasterObj.BrMst_Name;
                string sqlStr = "";
                string Head3 = "";
                string Head2 = "";
                double BrmstKey = 0;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }

                Head3 = BrmstKey.ToString();
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                //***********************************
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }

                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DiscountWiseInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DiscountWiseInvoice";
                    brKey = (int)BrmstKey;
                }

                //SqlConnection sqlcon = new SqlConnection();
                //sqlcon = con.dbcon();
                //sqlcon.Open();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DiscountWiseInvoice";
                //********************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_age,dbo.Invoice_Mst.Inv_ageymd,dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_Gender, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt,  dbo.Invoice_Mst.Inv_age, dbo.Invoice_Mst.Inv_ageymd, dbo.Invoice_Mst.Inv_Gender,dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;
                    //AND dbo.Invoice_Mst.Inv_CpyId = " + nCpyId + "

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_age,dbo.Invoice_Mst.Inv_ageymd,dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_Gender,dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + condition;


                }
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter sDa = new SqlDataAdapter(cmd.CommandText,sqlcon);
                //sDa.Fill(dtDetails);
                SqlDataAdapter adapt = new SqlDataAdapter(sqlStr, sqlcon);

                adapt.Fill(ds0, "InvoiceMst_View");
                ds0.Tables.Add(dTitle);
                //*******************************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DiscountwiseInvoices.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DiscountwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();
                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFCancelledInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CancelledInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CancelledInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CancelledInvoice(branchdetails cncldInvObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = cncldInvObj.ff;
                string todatee = cncldInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cncldInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cncldInvObj.BrMst_Name;
                Head1 = "CANCELLED INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CancelledInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CancelledInvoices";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name,A.Inv_Gender,A.Inv_age,A.Inv_ageymd, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                             "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status = - 1 AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_No";
                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId, " +
                             "A.Inv_User,A.Inv_CnlComnt,A.Inv_Cnltmestmp " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status = - 1 AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_No";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);


                //*************************************************************************************************
                dsPrint.Tables.Clear();

                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CancelledInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CancelledInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctorMeeting()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "DoctorMeeting";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctorMeeting(branchdetails dctrmtngObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Nfile_name = "";
                string DctrName = "";
                double dctrKey = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                string BrMst_Code = l.BrMst_Code;
                string bName = l.BrMst_Name;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = dctrmtngObj.ff;
                string todatee = dctrmtngObj.tt;
                string nTblOut = "";
                string nRptName = "";
                dctrKey = dctrmtngObj.dctrKey;
                //****************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string sqlStr = "";
                DctrName = dctrmtngObj.DctrName;
                //brnchName = dctrmtngObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string condition = "";
                Nfile_name = "Report_" + fdt + "_" + tdt + "DoctorMeeting";
                nTblOut = "DailCashinv";
                Head1 = "Daily Collection Invoice";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataSet ds0 = new DataSet();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                SqlCommand cmd0 = new SqlCommand();
                int DocPrfFlag = 0;
                //*****************************dctrKey DctrName
                if (dctrKey != 0)
                {
                    sqlStr = "select * from ProDailyReport where Pro_DoctorName ='" + DctrName.Trim() + "'  and   Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' ";
                }
                else
                {
                    DocPrfFlag = 1;
                    sqlStr = "SELECT Doctor,Drid,sum(docCount) AS docCount FROM" + Environment.NewLine
                                              + "  (select Distinct Ahmst.AhMst_pName as Doctor,Ahmst.AhMst_Key as Drid,Count(ISNULL(Ahmst.ahmst_key,0)) As docCount FROM  dbo.AccountHeads_Mst Ahmst WITH(NOLOCK)  LEFT JOIN  ProDailyReport pro WITH(NOLOCK) on Ahmst.Ahmst_key=pro.Pro_DctrId WHERE ahmst_type='Doctor' AND AhMst_IsActive=1 AND  Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' GROUP BY AhMst_pName,AhMst_Key" + Environment.NewLine

                                              + "  UNION " + Environment.NewLine
                                              + " SELECT Distinct Ahmst.AhMst_pName as Doctor,Ahmst.AhMst_Key as Drid,0 AS docCount FROM  dbo.Set_DrIncentives DrInc WITH(NOLOCK) LEFT JOIN dbo.AccountHeads_Mst Ahmst WITH(NOLOCK) ON DrInc.StDrIns_DrId=Ahmst.Ahmst_key WHERE AhMst_IsActive=1  AND ahmst_type='Doctor'  GROUP BY AhMst_pName,AhMst_Key)  Dotors WHERE Dotors.Doctor!=''   GROUP BY  Doctor,Drid ORDER BY Doctor";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(ds0, "DOCTOR MEETING");
                if (DocPrfFlag == 1)
                {
                    cmd0.CommandText = "select  Ahmst.AhMst_pName as Pro, Pro.Pro_Date,Pro.Pro_DctrId,Pro.Place FROM ProDailyReport pro WITH(NOLOCK) LEFT JOIN AccountHeads_Mst  Ahmst WITH(NOLOCK)  on Ahmst.Ahmst_key=pro.Pro_Id WHERE  Pro_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Pro_Date <= '" + todate.ToString("yyyy-MM-dd") + "' ORDER BY Pro_Date desc";

                    sDa = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sDa.Fill(ds0, "DOCTOR LastMEETING");

                }
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(ds0, "Company_Mst");
                //sd0.Fill(ds0, "DOCTOR MEETING");

                //*****************************
                filepath = "";
                string reportType = "";

                Head3 = "DOCTOR MEETING";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Reporthead"] = Head3;
                ds0.Tables.Add(dt);
                //ReportDocument reportDocument = new ReportDocument();
                //Reportfilepaths = Server.MapPath("~/Reports/");
                //filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMeeting.rpt");
                //ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMeeting.xsd");
                //try
                //{
                //    reportDocument.Load(filepath);
                //    reportDocument.SetDataSource(ds0);
                //}
                //catch (Exception exe)
                //{
                //}
                ReportDocument reportDocument = new ReportDocument();

                if (DocPrfFlag == 0)
                {
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMeeting.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMeeting.xsd");
                    try
                    {
                        reportDocument.Load(filepath);
                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {
                    }
                }
                else
                {
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorMetperformance.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorMetperformance.xsd");
                    try
                    {
                        reportDocument.Load(filepath);
                        reportDocument.SetDataSource(ds0);
                    }
                    catch (Exception exe)
                    {
                    }
                }


                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                    return Json(new { Result = "OK" });
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + brnchName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDptWiseInvoice()

        {
            string fileName = "";

            if (brKey > 0)
            {

                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DepartmentWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                //Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "DailyCollectionSummary";

                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DepartmentWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DptWiseInvoice(branchdetails dptInvObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //checkedDiv checkedDivId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string[] checkedDpt = dptInvObj.checkedDpt;
                string[] checkedDptId = dptInvObj.checkedDptId;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dptInvObj.ff;
                string todatee = dptInvObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DepartmentId = "";
                string PayModes = "";
                sqlcon.Open();
                for (int i = 0; i < checkedDptId.Count(); i++)
                {
                    if (DepartmentId == "")
                    {
                        DepartmentId += (checkedDptId[i]).ToString();
                    }
                    else
                    {
                        DepartmentId += "," + (checkedDptId[i]).ToString();
                    }
                }
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = dptInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dptInvObj.BrMst_Name;

                Head1 = "DEPARTMENT WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (checkedDptId != null)
                {
                    nCondition = " AND E.Mstr_Key IN(" + DepartmentId + ")";
                }


                //checkedDiv checkedDivId
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }

                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DepartmentWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DepartmentWiseInvoices";
                    brKey = (int)BrmstKey;
                }

                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
              "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
              "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
              "A.Inv_BrID,A.Inv_RsltNO,A.Inv_Age,A.Inv_ageymd,A.Inv_Gender, A.Inv_Date, A.Inv_time, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
              "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
              "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
              "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
               "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
              "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
              "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
              "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
              "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, " +
                            "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                            "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                            "A.Inv_BrID, A.Inv_Date,A.Inv_RsltNO,A.Inv_Age,A.Inv_Gender,A.Inv_ageymd, A.Inv_time, A.Inv_name, B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                            "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor " +
                            "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
                            "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND  A.Inv_YrId = " + nYrId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //*************************************************************************************************

                dsPrint.Tables.Clear();

                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DepartmentStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DepartmentStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDivsnWisePerfomance()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DivisionWisePerfomance";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DivsnWisePerfomance(branchdetails DivPrfmnceObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //CompanyId YearId

                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = DivPrfmnceObj.ff;
                string todatee = DivPrfmnceObj.tt;
                //*******************

                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string Nfile_name = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DivisionWisePerfomance";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;



                //**************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                cmd0.CommandText = "select count(distinct InvItm_invno) as TestCount,convert(date,Inv_Date)as date,Mstr_Desc from Invoice_Mst left join Invoice_Det on Inv_No = InvItm_Invno and Inv_YrId = InvItm_YrId and Inv_CpyId = InvItm_CpyId  left join Test_Mst on InvItm_TstId = TstMst_Key left join masters on TstMst_DivsnId = Mstr_Key where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status!= -1 and   Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + "   group by Mstr_Desc,Inv_Date";



                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");

                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "Corporate Perfomance Divisionwise";


                ds0.Tables.Add(dt);

                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DivisionwisePerfomance.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DivisionwisePerfomance.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRefundStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "RefundStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult RefundStmnt(branchdetails rfndStmntObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;


                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rfndStmntObj.ff;
                string todatee = rfndStmntObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string Nfile_name = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "RefundStatement";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head1 = "REFUND STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");


                Head3 = BrMst_Key.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                //*******************************
                if (BrMst_Key > 0)
                {


                    sqlStr = " select Inv_No,Inv_name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_RefundAmt,AccountHeads_Mst.AhMst_pName from Invoice_Mst left join AccountHeads_Mst on Invoice_Mst.Inv_InsId=AccountHeads_Mst.AhMst_Key " +
                             "WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND Inv_CpyId = " + BrMst_Key + " AND Inv_YrId = " + nYrId + " AND Inv_RefundAmt>0 ";

                }
                else
                {

                    sqlStr = " select Inv_No,Inv_name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_RefundAmt,AccountHeads_Mst.AhMst_pName from Invoice_Mst left join AccountHeads_Mst on Invoice_Mst.Inv_InsId=AccountHeads_Mst.AhMst_Key " +
                              "WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                              " AND Inv_YrId = " + nYrId + " AND Inv_RefundAmt>0 ";
                }
                cmd = new SqlCommand(sqlStr);
                cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //****************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RefundStatement.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_RefundStatement.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctorsVisit()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DoctorVisit";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctorsVisit(branchdetails dctrVstObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;


                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dctrVstObj.ff;
                string todatee = dctrVstObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double PROKey = 0;
                double staff = 0;
                string ncond = "";
                double categoryid = 0;
                double catgryKey = 0;
                PROKey = dctrVstObj.PROKey;
                catgryKey = dctrVstObj.catgryKey;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string NcondDoc = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                string Nfile_name = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorVisit";

                //List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                //Head1 = "REFUND STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");


                //Head3 = BrMst_Key.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                //*******************************
                try
                {
                    categoryid = catgryKey;
                    if (categoryid > 0)
                    {
                        ncond = " AND a.AhMst_CatgryId=" + categoryid + " ";
                    }
                }
                catch { }
                try
                {
                    staff = PROKey;
                    if (staff > 0)
                    {
                        if (ncond != "")
                        {
                            ncond = ncond + " AND SetCorp_StaffId = " + staff + " ";
                        }
                        else
                        {
                            ncond = " AND SetCorp_StaffId = " + staff + " ";
                        }
                        NcondDoc = " AND Pro_Id=" + staff + "";
                    }

                }
                catch { }
                //****************************************

                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select a.ahmst_pname as doctor,ah.ahmst_pname as pro from [dbo].[SetDoctor_Staff] left join AccountHeads_Mst a on [SetCorp_CorpId]=a.AhMst_Key left join AccountHeads_Mst ah on [SetCorp_StaffId]=ah.AhMst_Key where   [SetCorp_CorpId] not in(select[Pro_DctrId] from[dbo].[ProDailyReport] where  Pro_Date >='" + fromdate.ToString("yyyy-MM-dd") + "' and Pro_Date<='" + todate.ToString("yyyy-MM-dd") + "'" + NcondDoc + ") " + ncond + " order by doctor";

                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "pro");


                //cmd.CommandText = "";
                //adapt = new SqlDataAdapter(cmd);
                //adapt.Fill(ds0, "DATE");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");


                Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy ") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();

                dt.Columns.Add("DateInterval", typeof(string));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;

                ds0.Tables.Add(dt);
                //******************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NoDctrVisit.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NoDctrVisit.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult NewPatientList(branchdetails patListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = patListObj.ff;
                string todatee = patListObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = patListObj.rowCount;
                int doctorChk = patListObj.dctrCheck;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");


                qry = "SELECT Inv_No,Inv_Name,Inv_PhNo,convert(date, Inv_date) as Inv_Date from Invoice_Mst WITH (NOLOCK) WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                  + " and ISNULL(Inv_IsNewPat,0)=1 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition + "Order by Inv_Date desc";

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dtPatnts = new DataTable();
                sda.Fill(dtPatnts);

                if (rowcount > 0)
                {
                    //grdNewPatients.Rows.Add(dtPatnts.Rows.Count);
                    //lblCount.Visible = true;
                    //lblCount.Text = "Count :" + dtPatnts.Rows.Count.ToString();
                    int i = 0;
                    foreach (DataRow dr in dtPatnts.Rows)
                    {
                        // Inv_No Inv_name Inv_phno Inv_Date
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_phno = dr["inv_phno"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy")
                        };
                        cls.Add(cs1);

                    }
                }
                else
                {

                }

                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFNewPatientListPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "NewPatientList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult NewPatientListPrint(branchdetails patListPrintObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = patListPrintObj.ff;
                string todatee = patListPrintObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = patListPrintObj.rowCount;
                int doctorChk = patListPrintObj.dctrCheck;
                string qry = "";
                string condition = "";
                string Nfile_name = "";
                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "NewPatientList";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                DataSet ds0 = new DataSet();
                //*****************************
                qry = "SELECT Inv_Name,Inv_PhNo,Inv_Date,Inv_No,Inv_PayMode,Inv_Netamt,Inv_GrosAmt,InvItm_Type,Inv_DiscAmt,Inv_OthAmt,Inv_Schrge,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Tst.TstMst_name,InvItm_rate,InvItm_Orgrate " + Environment.NewLine
                    + "FROM Invoice_Mst WITH (NOLOCK) LEFT JOIN Invoice_Det WITH (NOLOCK)ON InvItm_Invno = Inv_No AND InvItm_CpyId = Inv_CpyId AND InvItm_YrId = Inv_YrId " + Environment.NewLine
                    + "LEFT JOIN Test_Mst as Tst WITH (NOLOCK) on TstMst_Key=InvItm_TstId " + Environment.NewLine
                    + " WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                   + " and ISNULL(Inv_IsNewPat,0)=1 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "NewPatients");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyNewPatients.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_DailyNewPatients.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchCorpName(branchdetails crpWithName)
        {
            string corpName = crpWithName.AhMst_pName;
            double areaKey = crpWithName.AreaKey;
            string PayType = "";
            //if (crpWithName.PayType != null)
            //{
            //    PayType = crpWithName.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_TERM_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_TERM_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_TERM(corpName, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpCode(branchdetails crpWithCode)
        {
            double corpKey = crpWithCode.AhMst_Key;
            double areaKey = crpWithCode.AreaKey;
            //string PayType = crpWithCode.PayType;
            string PayType = "";
            //if (crpWithCode.PayType != null)
            //{
            //    PayType = crpWithCode.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_KEY_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_KEY(corpKey, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpPhno(branchdetails crpWithPhNo)
        {
            string corpPhno = crpWithPhNo.AhMst_mobile;
            double areaKey = crpWithPhNo.AreaKey;
            // string PayType = crpWithPhNo.PayType;
            string PayType = "";
            //if (crpWithPhNo.PayType != null)
            //{
            //    PayType = crpWithPhNo.PayType;
            //}
            try
            {
                List<Stproc_SEARCH_CORPORATE_WITH_PHN_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_PHN_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_PHN(corpPhno, PayType, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrPhno(string term)
        {
            try
            {

                List<Stproc_SEARCH_COLL_PERSON_WITH_PHNO_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_PHNO_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_PHNO(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_COLL_PERSON_WITH_CODE_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchSrvcUsrName(string term)
        {
            try
            {
                List<Stproc_SEARCH_COLL_PERSON_WITH_WORD_Result> t = new List<Stproc_SEARCH_COLL_PERSON_WITH_WORD_Result>();
                t = db.Stproc_SEARCH_COLL_PERSON_WITH_WORD(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrChrgRptView(branchdetails srvcChObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = srvcChObj.ff;
                string todatee = srvcChObj.tt;
                string User_Name = srvcChObj.User_Name;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = srvcChObj.rowCount;
                double usrKey = srvcChObj.User_Key;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*************************************
                SqlCommand cmd = new SqlCommand();
                int tCollperId = 0;
                try
                {
                    tCollperId = Convert.ToInt32(usrKey);
                }
                catch { }


                if (tCollperId != 0)
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK) left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND Inv_CltnID='" + tCollperId + " 'and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";

                }
                else
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";
                }
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows.Count == 0)
                {

                }
                int curRow = 0;
                int TotSChrge = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    int tmpSchrge = 0;
                    try
                    {
                        tmpSchrge = Convert.ToInt32(dr["Inv_Schrge"].ToString());
                    }
                    catch { }
                    TotSChrge = TotSChrge + tmpSchrge;
                    collectionDetails cs1 = new collectionDetails()
                    {
                        Inv_No = dr["Inv_No"].ToString(),
                        Inv_name = dr["inv_name"].ToString(),
                        //Inv_phno = dr["inv_phno"].ToString(),
                        Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy"),
                        Inv_Schrge = dr["Inv_Schrge"].ToString(),
                        AhMst_pName = dr["AhMst_pName"].ToString(),
                        Inv_PayMode = dr["Inv_PayMode"].ToString()
                    };
                    cls.Add(cs1);
                    curRow = curRow + 1;

                }

                //************************************
                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFSrChrgRptPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "ServiceChargeStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult SrChrgRptPrint(branchdetails srvcChprntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {

                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = srvcChprntObj.ff;
                string todatee = srvcChprntObj.tt;
                string User_Name = srvcChprntObj.User_Name;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = srvcChprntObj.rowCount;
                double usrKey = srvcChprntObj.User_Key;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "ServiceChargeStatements";
                if (usrKey == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*************************************
                SqlCommand cmd = new SqlCommand();
                int tCollperId = 0;
                try
                {
                    tCollperId = Convert.ToInt32(usrKey);
                }
                catch { }

                if (tCollperId != 0)
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  Inv_CltnID='" + tCollperId + " 'and convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status<>'-1' and Inv_CpyId=" + CompanyId + " and Inv_YrId=" + YearId + " order by AhMst_pName  ";

                }
                else
                {
                    cmd.CommandText = "select Inv_No,Inv_Date,[Inv_YrId],[Inv_CpyId],Inv_Schrge,[AhMst_pName],Inv_CltnID,Inv_name,Inv_PayMode,Invl_IsPending,Inv_Netamt,Inv_CurBalAmt from [dbo].[Invoice_Mst] WITH (NOLOCK)  left join [dbo].[AccountHeads_Mst] on AhMst_Key=Inv_CltnID where ISNULL(Inv_Schrge,0)!=0 AND  convert(date,Inv_Date)>='" + fromdate.ToString("yyyy-MM-dd") + "' and convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_CpyId=" + CompanyId + " and Inv_Status<>'-1' and Inv_YrId=" + YearId + " order by AhMst_pName  ";
                }
                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "scharge");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");

                string filepath = "";
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Schrg.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_Schrg.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });

            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult OldPatientList(branchdetails oldpatListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = oldpatListObj.ff;
                string todatee = oldpatListObj.tt;
                string Nfile_name = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = oldpatListObj.rowCount;
                int doctorChk = oldpatListObj.dctrCheck;
                string qry = "";
                string condition = "";

                string frmDate = "";
                string toDate = "";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");


                qry = "SELECT Inv_No,Inv_Name,Inv_PhNo,convert(date, Inv_date) as Inv_Date from Invoice_Mst WITH (NOLOCK) WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
               + " and ISNULL(Inv_IsNewPat,0)=0 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dtPatnts = new DataTable();
                sda.Fill(dtPatnts);

                if (rowcount > 0)
                {
                    //grdNewPatients.Rows.Add(dtPatnts.Rows.Count);
                    //lblCount.Visible = true;
                    //lblCount.Text = "Count :" + dtPatnts.Rows.Count.ToString();
                    int i = 0;
                    foreach (DataRow dr in dtPatnts.Rows)
                    {
                        // Inv_No Inv_name Inv_phno Inv_Date
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_phno = dr["inv_phno"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy")
                        };
                        cls.Add(cs1);

                    }
                }
                else
                {

                }

                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult OldPatientListPrint(branchdetails oldPatListObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = oldPatListObj.ff;
                string todatee = oldPatListObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = oldPatListObj.rowCount;
                int doctorChk = oldPatListObj.dctrCheck;
                string qry = "";
                string condition = "";
                string Nfile_name = "";
                string frmDate = "";
                string toDate = "";
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "OldPatientList";
                if (doctorChk == 1)
                {
                    condition = "AND Inv_DrId=0 AND Inv_OutDr=''";
                }
                else
                {
                    condition = "";
                }
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                DataSet ds0 = new DataSet();
                //*****************************
                qry = "SELECT Inv_Name,Inv_PhNo,Inv_Date,Inv_No,Inv_PayMode,Inv_Netamt,Inv_GrosAmt,InvItm_Type,Inv_DiscAmt,Inv_OthAmt,Inv_Schrge,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Tst.TstMst_name,InvItm_rate,InvItm_Orgrate " + Environment.NewLine
                      + "FROM Invoice_Mst WITH (NOLOCK) LEFT JOIN Invoice_Det WITH (NOLOCK)ON InvItm_Invno = Inv_No AND InvItm_CpyId = Inv_CpyId AND InvItm_YrId = Inv_YrId " + Environment.NewLine
                      + "LEFT JOIN Test_Mst as Tst WITH (NOLOCK) on TstMst_Key=InvItm_TstId " + Environment.NewLine
                      + " WHERE Inv_PhNo!='' AND Inv_PayMode!= 'Credit' AND Inv_CpyId='" + CompanyId + "' AND Inv_Status<>'-1'" + Environment.NewLine
                     + " and ISNULL(Inv_IsNewPat,0)=0 and convert(date, Inv_date)>= '" + frmDate + "' and CONVERT(date, inv_date) <='" + toDate + "'" + condition;

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandText = qry;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "OldPatients");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DailyOldPatients.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_DailyOldPatients.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFOldPatientListPrint()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "OldPatientList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult SearchAreaCode(string term)
        {
            try
            {

                List<Stproc_SEARCH_AREA_WITH_CODE_Result> t = new List<Stproc_SEARCH_AREA_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_AREA_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchAreaName(string term)
        {
            try
            {
                List<Stproc_SEARCH_AREA_WITH_NAME_Result> t = new List<Stproc_SEARCH_AREA_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_AREA_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpCodes(string term)
        {
            try
            {

                List<Stproc_SEARCH_CORPORATE_WITH_CODE_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_CODE_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_CODE(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCoprName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CORPORATE_WITH_NAME_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult CorpInvoiceList(branchdetails corpInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpInvObj.ff;
                string todatee = corpInvObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = corpInvObj.rowCount;
                string Corp_Name = corpInvObj.Corp_Name;
                double Corp_Key = corpInvObj.Corp_Key;
                int rptCheck = corpInvObj.rptCheck;
                double BrmstKey = 0;
                string BrmstName = corpInvObj.BrMst_Name;
                brnchName = corpInvObj.BrMst_Name;
                //Head1 = "COLLECTION STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                SqlCommand cmd = new SqlCommand("Select Inv.Inv_SmplDate,Inv.Inv_ItemDisc,Inv.Inv_DiscAmt,Inv.Inv_GrosAmt,Inv.Inv_No,Inv.Inv_RsltNO,Inv.Inv_name,Inv.Inv_Netamt,AccH.AhMst_pName from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + Corp_Key + " And convert(Date,Inv_Date,0) >='" + fromdate.ToShortDateString() + "'    and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'   AND  Inv_YrId =" + YearId + " and Inv_Status!=-1  " + nCondition, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //if (dt.Rows.Count > 0)
                //{
                //    grdCorDts.Rows.Add(dt.Rows.Count);
                //}
                int SlNo = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    InvDate = Convert.ToDateTime(dr["Inv_SmplDate"]);
                    Date = InvDate.ToString("dd-MMM-yyyy");
                    try
                    {
                        Item_Disc = Convert.ToDouble(dr["Inv_ItemDisc"]);


                    }
                    catch { Item_Disc = 0; }
                    try
                    {
                        Oter_Disc = Convert.ToDouble(dr["Inv_DiscAmt"]);
                    }
                    catch { Oter_Disc = 0; }
                    try
                    {
                        Gross_Amt = Convert.ToDouble(dr["Inv_GrosAmt"]);
                    }
                    catch { Gross_Amt = 0; }
                    string Inv_No = dr["Inv_No"].ToString();
                    string Inv_name = dr["inv_name"].ToString();
                    string Inv_RsltNO = dr["Inv_RsltNO"].ToString();
                    string Inv_Date = Date;
                    string Inv_Netamt = dr["Inv_Netamt"].ToString();
                    double Inv_Gross = Gross_Amt + Item_Disc;
                    double Inv_Disc = Oter_Disc + Item_Disc;

                    try
                    {
                        if (Inv_Gross >= 0)
                        {
                            TempGrossAmt = Convert.ToDouble(Inv_Gross);
                        }
                    }
                    catch { }

                    try
                    {
                        if (Inv_Disc >= 0)
                        {
                            TemDiscAmt = Convert.ToDouble(Inv_Disc);
                        }
                    }
                    catch { }
                    try
                    {
                        if (Inv_Netamt != null)
                        {
                            TempNetAmt = Convert.ToDouble(Inv_Netamt);
                        }
                    }
                    catch { }

                    GrossAmt += TempGrossAmt;
                    DiscAmt += TemDiscAmt;
                    NetAmt += TempNetAmt;
                    collectionDetails cs1 = new collectionDetails()
                    {
                        Inv_No = dr["Inv_No"].ToString(),
                        Inv_name = dr["inv_name"].ToString(),
                        Inv_RsltNO = dr["Inv_RsltNO"].ToString(),
                        Inv_Date = Date,
                        Inv_Netamt = dr["Inv_Netamt"].ToString(),
                        Inv_Gross = Gross_Amt + Item_Disc,
                        Inv_Disc = Oter_Disc + Item_Disc,
                        TempGrossAmt = GrossAmt,
                        TemDiscAmt = DiscAmt,
                        TempNetAmt = NetAmt

                    };
                    cls.Add(cs1);

                    SlNo += 1;
                }


                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpInvoicePrint()
        {
            string fileName = "";
            //if(reportCheck==0)
            //{

            //}
            if (brKey > 0)
            {
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateInvoice";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
        }
        public JsonResult CorpInvoicePrint(branchdetails corpInvPrntObj)
        {
            List<branchdetails> paymd = Session["payModedls"] as List<branchdetails>;
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //checkedDiv checkedDivId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string[] checkedDpt = corpInvPrntObj.checkedDpt;
                //string[] checkedDptId = corpInvPrntObj.checkedDptId;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string fromdatee = corpInvPrntObj.ff;
                string todatee = corpInvPrntObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                int rowcount = corpInvPrntObj.rowCount;
                string Corp_Name = corpInvPrntObj.Corp_Name;
                double Corp_Key = corpInvPrntObj.Corp_Key;
                int rptCheck = corpInvPrntObj.rptCheck;
                reportCheck = corpInvPrntObj.rptCheck;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Condition = "";
                string DepartmentId = "";
                string PayModes = "";
                sqlcon.Open();

                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                string nPaymode = "";
                brnchName = corpInvPrntObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateInvoice";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = corpInvPrntObj.BrMst_Name;

                Head1 = "DEPARTMENT WISE STATEMENT";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateInvoice";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateInvoice";
                    brKey = (int)BrmstKey;
                }
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                //******************************
                if (Corp_Name == "")
                {
                    cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                               + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                               + "Where Inv.Inv_InsId!=0 and Inv.Inv_Status!=-1  And" + Environment.NewLine
                               + "convert(Date,Inv_date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                               + "and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'  " + Environment.NewLine
                               + " AND  Inv_YrId =" + YearId + nCondition;
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "CorporateBill");

                }
                else
                {
                    if (rptCheck == 0)
                    {


                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv Left Join AccountHeads_Mst AccH on Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + CorPorateId + " And Inv_SmplDate>='" + dtpFrom.Value.ToShortDateString() + "'  AND Inv_SmplDate<='" + dtpTo.Value.ToShortDateString() + "' AND Inv_CpyId=" + cPublic.CompanyId + " AND Inv_YrId =" + cPublic.YearId + "";
                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                        //                + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                + "Where Inv.Inv_InsId=" + CorPorateId + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                        //                + "convert(Date,Inv_SmplDate,0)>='" + dtpFrom.Value.ToShortDateString() + "' " + Environment.NewLine
                        //                + "and convert(Date,Inv_SmplDate,0)<='" + dtpTo.Value.ToShortDateString() + "'  " + Environment.NewLine
                        //                + " AND Inv_CpyId=" + cPublic.CompanyId + " AND Inv_YrId =" + cPublic.YearId + "" + Environment.NewLine
                        //                + "" + Environment.NewLine;

                        //cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                        //                + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                + "Where Inv.Inv_InsId=" + Corp_Key + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                        //                + "convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                + "and convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'  " + Environment.NewLine
                        //                + " AND  Inv_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "Select Inv.*,AccH.AhMst_pName from dbo.Invoice_Mst Inv " + Environment.NewLine
                                       + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                       + "Where Inv.Inv_InsId=" + Corp_Key + " And  Inv.Inv_Status!=-1  And" + Environment.NewLine
                                       + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                       + "and convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'  " + Environment.NewLine
                                       + " AND  Inv_YrId =" + YearId + nCondition;


                    }
                    else if (rptCheck == 1)
                    {
                        //cmd0.CommandText = "Select Inv.*,InvDet.*,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                        //                 + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                        //                 + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                        //                 + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                        //                 + "Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                 + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                 + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                        //                 + " AND InvItm_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "Select Inv.*,InvDet.*,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                                        + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                        + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                                        + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                                        + "Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                        + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                        + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                                        + " AND InvItm_YrId =" + YearId + nCondition;



                    }
                    else
                    {
                        //cmd0.CommandText = " select GenRslt.*,Tst.TstMst_name,Tst.TstMst_ShortName from Invoice_Mst Inv LEFT JOIN  GenaralRslt_Det GenRslt ON Inv.Inv_No=GenRslt.GenRsltDet_LabNo  AND Inv.Inv_YrId=GenRslt.GenRsltDet_YrId  AND Inv.Inv_CpyId=GenRslt.GenRsltDet_CpyId LEFT JOIN Test_Mst Tst ON GenRslt.GenRsltDet_TstID=Tst.TstMst_Key  " +
                        //                  " Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                    + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                    + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                        //                    + " AND GenRsltDet_Key>0 " + nCondition + Environment.NewLine
                        //                    + "" + Environment.NewLine;
                        cmd0.CommandText = " select GenRslt.*,Tst.TstMst_name,Tst.TstMst_ShortName from Invoice_Mst Inv LEFT JOIN  GenaralRslt_Det GenRslt ON Inv.Inv_No=GenRslt.GenRsltDet_LabNo  AND Inv.Inv_YrId=GenRslt.GenRsltDet_YrId  AND Inv.Inv_CpyId=GenRslt.GenRsltDet_CpyId LEFT JOIN Test_Mst Tst ON GenRslt.GenRsltDet_TstID=Tst.TstMst_Key  " +
                                   " Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                     + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                     + " AND Inv_YrId =" + YearId + "" + Environment.NewLine
                                     + " AND GenRsltDet_Key>0 " + nCondition + Environment.NewLine
                                     + "" + Environment.NewLine;
                    }


                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);

                    sd0.Fill(ds0, "CorporateBill");
                    if (rptCheck == 2)
                    {
                        //cmd0.CommandText = "SELECT Inv.* from Invoice_mst Inv Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToShortDateString() + "' " + Environment.NewLine
                        //                   + " AND convert(Date,Inv_Date,0)<='" + todate.ToShortDateString() + "'" + Environment.NewLine

                        //                   + " AND Inv_YrId =" + YearId + nCondition;
                        cmd0.CommandText = "SELECT Inv.* from Invoice_mst Inv Where Inv.Inv_InsId=" + Corp_Key + " And Inv.Inv_Status!=-1   And convert(Date,Inv_Date,0)>='" + fromdate.ToString("dd/MM/yyyy") + "' " + Environment.NewLine
                                          + " AND convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'" + Environment.NewLine

                                          + " AND Inv_YrId =" + YearId + nCondition;
                        sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                        sd0.Fill(ds0, "Invoice_mst");
                    }
                }
                //****************************************************
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************

                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("CorporateName", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["CorporateName"] = Corp_Name.Trim();
                ds0.Tables.Add(dt);
                //********************************************************************************
                DataTable CorporateRate = new DataTable();
                CorporateRate.Columns.Add("LabNo", typeof(int));
                CorporateRate.Columns.Add("Gross", typeof(double));
                CorporateRate.Columns.Add("Disc", typeof(double));
                CorporateRate.Columns.Add("Netamount", typeof(double));

                double discamt = 0;
                cmd = new SqlCommand("Select Inv.Inv_SmplDate,Inv.Inv_ItemDisc,Inv.Inv_DiscAmt,Inv.Inv_GrosAmt,Inv.Inv_No,Inv.Inv_RsltNO,Inv.Inv_name,Inv.Inv_Netamt,AccH.AhMst_pName from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key Where Inv.Inv_InsId=" + Corp_Key + " And convert(Date,Inv_Date,0) >='" + fromdate.ToString("dd/MM/yyyy") + "'    and convert(Date,Inv_Date,0)<='" + todate.ToString("dd/MM/yyyy") + "'   AND  Inv_YrId =" + YearId + " and Inv_Status!=-1  " + nCondition, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                //if (dt.Rows.Count > 0)
                //{
                //    grdCorDts.Rows.Add(dt.Rows.Count);
                //}
                int SlNo = 0;
                int i = 0;
                foreach (DataRow dr in dt1.Rows)
                {

                    CorporateRate.Rows.Add();
                    try
                    {
                        discamt = 0;
                        double invdiscamnt = Convert.ToDouble(dr["Inv_DiscAmt"]);
                        double invItemDisc = Convert.ToDouble(dr["Inv_ItemDisc"]);
                        double invGross = Convert.ToDouble(dr["Inv_GrosAmt"]);
                        try
                        {
                            discamt = Convert.ToDouble(invdiscamnt + invItemDisc);
                        }
                        catch { }
                        CorporateRate.Rows[i]["LabNo"] = dr["Inv_No"].ToString();
                        CorporateRate.Rows[i]["Gross"] = invGross + invItemDisc;
                        CorporateRate.Rows[i]["Disc"] = discamt;
                        CorporateRate.Rows[i]["Netamount"] = dr["Inv_Netamt"].ToString();
                    }
                    catch { }
                    i++;
                    //}
                }
                //for (int i = 0; i < grdCorDts.Rows.Count; i++)
                //{
                //    CorporateRate.Rows.Add();
                //    try
                //    {
                //        discamt = 0;
                //        try
                //        {
                //            discamt = Convert.ToDouble(grdCorDts["DiscAmt", i].Value);
                //        }
                //        catch { }
                //        CorporateRate.Rows[i]["LabNo"] = grdCorDts["LabNo", i].Value;
                //        CorporateRate.Rows[i]["Gross"] = grdCorDts["Gross", i].Value;
                //        CorporateRate.Rows[i]["Disc"] = discamt;
                //        CorporateRate.Rows[i]["Netamount"] = grdCorDts["Netmt", i].Value;
                //    }
                //    catch { }
                //}

                ds0.Tables.Add(CorporateRate);
                if (Corp_Name == "")
                {

                    //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpBills.rpt";
                    //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpBills.xsd");
                    Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBills.rpt");
                    ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpBills.xsd");

                }
                else
                {
                    if (rptCheck == 0)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBill.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBill.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateBill.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateBill.xsd");
                    }
                    else if (rptCheck == 1)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBillDets.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorporateBillDets.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateBillDets.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateBillDets.xsd");
                    }
                    else if (rptCheck == 2)
                    {
                        //filepath = Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\rpt_CorpResult.rpt";
                        //ds0.WriteXmlSchema(Application.StartupPath.Replace("bin\\Debug", "") + @"\Reports\CorpResult.xsd");
                        Reportfilepaths = Server.MapPath("~/Reports/");
                        filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpResult.rpt");
                        ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpResult.xsd");
                    }
                }
                //******************************
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";

                //Reportfilepaths = Server.MapPath("~/Reports/");
                //filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DepartmentStmnt.rpt");
                //dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DepartmentStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                sqlcon.Close();
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpCollSummary()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CorpCollSummary(branchdetails collSmryObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = collSmryObj.ff;
                string todatee = collSmryObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = collSmryObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = collSmryObj.BrMst_Name;
                Head1 = "CREDIT CARD WiSE COLLECTION";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionSummary";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Count(Inv_PayMode) as CountData,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,SUM(Inv_CurBalAmt) AS Inv_CurBalAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Mst.Mstr_Desc As CustType from dbo.Invoice_Mst Inv WITH (NOLOCK) " + Environment.NewLine
                                           + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key " + Environment.NewLine
                                           + "Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                           + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                           + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                           + " AND Inv_CpyId=" + BrmstKey + " AND Inv_GrosAmt >0 and (Inv_Paymode<>'Debit/Credit' OR Inv_Paymode<>'BHIM/UPI Online Payment') AND Inv_YrId =" + nYrId + " AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mstr_Desc";

                }
                else
                {
                    sqlStr = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Count(Inv_PayMode) as CountData,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,SUM(Inv_CurBalAmt) AS Inv_CurBalAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Mst.Mstr_Desc As CustType from dbo.Invoice_Mst Inv WITH (NOLOCK) " + Environment.NewLine
                                          + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key " + Environment.NewLine
                                          + "Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                          + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                          + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                          + " AND Inv_GrosAmt >0 and (Inv_Paymode<>'Debit/Credit' OR Inv_Paymode<>'BHIM/UPI Online Payment') AND Inv_YrId =" + nYrId + "  AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mstr_Desc";
                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateCollectionSummary.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_CorporateCollectionSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpCollDivSummary()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionDivisionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionDivisionSummary";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult CorpCollDivSummary(branchdetails collSmryDivObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = collSmryDivObj.ff;
                string todatee = collSmryDivObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = collSmryDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = collSmryDivObj.BrMst_Name;
                //Head1 = "CREDIT CARD WiSE COLLECTION";
                //Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateCollectionDivisionSummary";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateCollectionDivisionSummary";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                // cmd0.CommandType = CommandType.StoredProcedure;
                //****************************************************
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Sum(invdt.InvItm_rate) as invitemrate,sum(invdt.InvItm_Orgrate) as orginlrate,Mst.Mstr_Desc As CustType,mst1.Mstr_Desc as Division from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key LEFT JOIN Invoice_Det invdt on Inv.Inv_No=invdt.InvItm_Invno and inv.Inv_YrId=invdt.InvItm_YrId and inv.Inv_CpyId=invdt.InvItm_CpyId left join Test_Mst tst on invdt.InvItm_TstId=tst.TstMst_Key   left join Masters Mst1 on tst.TstMst_DivsnId=Mst1.Mstr_Key " + Environment.NewLine
                          + " Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                       + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                       + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                       + " AND Inv_CpyId=" + BrmstKey + " AND Inv_GrosAmt >0 and Inv_Paymode<>'Debit/Credit' AND Inv_YrId =" + YearId + " AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mst1.Mstr_Desc,Mst.Mstr_Desc";

                }
                else
                {
                    cmd0.CommandText = "Select SUM(Inv.Inv_GrosAmt) As Inv_GrosAmt,Inv.Inv_PayMode,SUM(Inv_DiscAmt) As Inv_DiscAmt,AccH.AhMst_pName,SUM(Inv.Inv_Netamt) As NetAmt,Sum(invdt.InvItm_rate) as invitemrate,sum(invdt.InvItm_Orgrate) as orginlrate,Mst.Mstr_Desc As CustType,mst1.Mstr_Desc as Division from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key LEFT JOIN Masters Mst ON AccH.AhMst_CustTypeId=Mst.Mstr_Key LEFT JOIN Invoice_Det invdt on Inv.Inv_No=invdt.InvItm_Invno and inv.Inv_YrId=invdt.InvItm_YrId and inv.Inv_CpyId=invdt.InvItm_CpyId left join Test_Mst tst on invdt.InvItm_TstId=tst.TstMst_Key   left join Masters Mst1 on tst.TstMst_DivsnId=Mst1.Mstr_Key " + Environment.NewLine
                         + " Where Inv.Inv_InsId>0 AND Inv.Inv_Status!=-1  And" + Environment.NewLine
                                      + "convert(Date,Inv_Date,0)>='" + fromdate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                      + "and convert(Date,Inv_Date,0)<='" + todate.ToString("yyyy-MM-dd") + "'  " + Environment.NewLine
                                      + " AND Inv_GrosAmt >0 and Inv_Paymode<>'Debit/Credit' AND Inv_YrId =" + YearId + "  AND ISNULL(AhMst_AcGrpId,0)!=4 " + nCondition + " GROUP BY AhMst_pName,Inv_PayMode,Mst.Mstr_Desc,Mst1.Mstr_Desc";

                }
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "CorporateDetailed");
                //***************************************************

                //****************************************************
                cmd0.Parameters.Clear();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy hh:mm tt") + "  To : " + todate.ToString("dd/MM/yyyy hh:mm tt");
                DataTable dt = new DataTable();
                dt.TableName = "HeadMaster";
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Head1", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Head1"] = "Corporate Collection Divion Wise";
                ds0.Tables.Add(dt);


                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporateCollectiondivision.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporateCollectiondivision.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult CorpOutShow(branchdetails corpOutShowObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpOutShowObj.ff;
                string todatee = corpOutShowObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string User_Name = corpOutShowObj.User_Name;
                double User_Key = corpOutShowObj.User_Key;
                int uptoCheck = corpOutShowObj.uptoCheck;
                int avdClctdBillCheck = corpOutShowObj.avdClctdBillCheck;
                string Condtn = "";
                int Flagset = 0;
                int nStaffId = 0;
                int Crdays = 0;
                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                if (uptoCheck == 0)
                {
                    Condtn = " vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                    Flagset = 1;
                }
                else
                {
                    Condtn = "  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND  vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                }
                DateTime CurDate = DateTime.Now;
                SqlCommand cmdOpen = new SqlCommand("Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "", sqlcon);
                SqlDataAdapter sdaopen = new SqlDataAdapter(cmdOpen);
                DataTable dtOpen = new DataTable();
                sdaopen.Fill(dtOpen);
                SqlCommand cmd = new SqlCommand();

                if (nStaffId == 0)
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }
                else
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM SetCorp_Staff Stf LEFT JOIN  Vouchers Vch ON Stf.SetCorp_CorpId=Vch.vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND SetCorp_StaffId=" + nStaffId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);

                int TempRow = 0;

                double Payments = 0;
                double Receipts = 0;
                double Bal = 0;
                DataRow[] drs;
                int AccId = 0;

                int Corpcrlimit = 0;
                string OpnStatus = "";
                double OpnAmt = 0;
                double AvdCollAvdMat = 0;

                string corporate = "";
                double billed = 0;
                double collected = 0;
                double balance = 0;
                double debit = 0;
                double credit = 0;
                //****************************************
                foreach (DataRow dr in dt.Rows)
                {
                    OpnAmt = 0;
                    try
                    {
                        AccId = Convert.ToInt32(dr["vchr_Id"]);
                    }
                    catch { }
                    //grdCorDts[0, TempRow].Value = TempRow + 1;slno
                    //grdCorDts["Corporate", TempRow].Value = dr["Corpoarte"];corporate
                    corporate = dr["Corpoarte"].ToString();
                    //******************************************************
                    drs = dtOpen.Select("OpBl_AccId='" + AccId.ToString().Trim() + "'");

                    if (drs.Length > 0)
                    {
                        OpnStatus = drs[0][3].ToString();
                        try
                        {
                            OpnAmt = Convert.ToDouble(drs[0][2]);
                        }
                        catch { }

                    }
                    //*******************************************************
                    try
                    {
                        Payments = Convert.ToDouble(dr["Payment"]);

                    }
                    catch { Payments = 0; }
                    try
                    {
                        Receipts = Convert.ToDouble(dr["Receipts"]);

                    }

                    catch { Receipts = 0; }
                    if (OpnAmt > 0)
                    {
                        if (OpnStatus.ToUpper() == "DR")
                        {
                            Receipts = Receipts + OpnAmt;
                        }
                        else if (OpnStatus.ToUpper() == "CR")
                        {
                            Payments = Payments + OpnAmt;
                        }
                    }

                    if (avdClctdBillCheck == 0 && Corpcrlimit > 0 && nStaffId == 0)
                    {
                        AvdCollAvdMat = 0;
                        cmd1 = new SqlCommand("select sum(BlWsCol_AlloAmt) from BillWiseCollection LEFT JOIN Invoice_Mst ON  BlWsCol_CorpId=Inv_InsId AND BlWsCol_YearId=Inv_YrId AND BlWsCol_CompanyId=Inv_CpyId AND  BlWsCol_InvNo=Inv_No where BlWsCol_CorpId=" + AccId + " AND BlWsCol_YearId=" + YearId + " AND BlWsCol_CompanyId=" + CompanyId + " AND Inv_Date>'" + todate.AddDays(Crdays).ToString("yyyy-MM-dd") + "'", sqlcon);
                        try { AvdCollAvdMat = Convert.ToDouble(cmd1.ExecuteScalar()); } catch { }
                        if (AvdCollAvdMat > 0)
                        {
                            Receipts = Receipts - AvdCollAvdMat;
                        }
                    }
                    Bal = Receipts - Payments;
                    //grdCorDts["Billed", TempRow].Value = Math.Round(Payments, 2);billed
                    billed = Math.Round(Payments, 2);
                    //grdCorDts["Collected", TempRow].Value = Math.Round(Receipts, 2);collected
                    collected = Math.Round(Receipts, 2);
                    //grdCorDts["Balance", TempRow].Value = Math.Round(Bal, 2);balance
                    balance = Math.Round(Bal, 2);
                    if (Bal > 0)
                    {
                        //grdCorDts["CrCredit", TempRow].Value = 0;credit
                        credit = 0;
                        debit = Math.Round(Bal, 2);
                        //grdCorDts["CrDebit", TempRow].Value = Math.Round(Bal, 2);debit
                    }
                    else if (Bal < 0)
                    {
                        credit = Math.Round(Bal, 2) * -1;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = Math.Round(Bal, 2) * -1;credit
                        //grdCorDts["CrDebit", TempRow].Value = 0;debit
                    }
                    else
                    {
                        credit = 0;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = "0";credit
                        //grdCorDts["CrDebit", TempRow].Value = "0";debit
                    }
                    collectionDetails cs = new collectionDetails()
                    {
                        corporate = corporate,
                        billed = billed,
                        collected = collected,
                        balance = balance,
                        debit = debit,
                        credit = credit
                    };
                    cls.Add(cs);

                    //TempRow += 1;
                }

                //****************************************
                branchdetails dateDls = new branchdetails()
                {
                    fromdate = fromdat,
                    todate = todat
                };
                Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                //ViewBag.CollSmry2 = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpOutPrint()
        {
            if (uptoCheck == 0)
            {
                string fileName = "";
                fileName += "Report_" + tdt + "_" + "CorporateOutstanding";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");


            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }

        }
        public JsonResult CorpOutPrint(branchdetails corpOutPrntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int TempRow = 0;
                string Nfile_name = "";
                double Payments = 0;
                double Receipts = 0;
                double Bal = 0;
                DataRow[] drs;
                int AccId = 0;

                int Corpcrlimit = 0;
                string OpnStatus = "";
                double OpnAmt = 0;
                double AvdCollAvdMat = 0;

                string corporate = "";
                double billed = 0;
                double collected = 0;
                double balance = 0;
                double debit = 0;
                double credit = 0;
                int Flagset = 0;
                string Date;
                DateTime InvDate;
                Double GrossAmt = 0;
                Double DiscAmt = 0;
                Double NetAmt = 0;
                Double TempGrossAmt = 0;
                Double TemDiscAmt = 0;
                Double TempNetAmt = 0;

                double Item_Disc = 0;
                double Oter_Disc = 0;
                double Gross_Amt = 0;
                string nCondition = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpOutPrntObj.ff;
                string todatee = corpOutPrntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string User_Name = "";
                if (corpOutPrntObj.User_Name != "")
                {
                    User_Name = corpOutPrntObj.User_Name;

                }
                double User_Key = corpOutPrntObj.User_Key;
                int rowCount = corpOutPrntObj.rowCount;
                uptoCheck = corpOutPrntObj.uptoCheck;
                int avdClctdBillCheck = corpOutPrntObj.avdClctdBillCheck;
                int nStaffId = 0;
                string Condtn = "";

                //"Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                int Crdays = 0;
                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                if (uptoCheck == 0)
                {
                    Condtn = " vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                    Nfile_name = "Report_" + tdt + "_" + "CorporateOutstanding";
                    uptoCheck = 0;
                    Flagset = 1;
                }
                else
                {
                    uptoCheck = 1;
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "CorporateOutstanding";
                    Condtn = "  vchr_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND  vchr_Date<='" + todate.ToString("yyyy-MM-dd") + "'";
                }
                DateTime CurDate = DateTime.Now;
                SqlCommand cmdOpen = new SqlCommand("Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "", sqlcon);
                SqlDataAdapter sdaopen = new SqlDataAdapter(cmdOpen);
                DataTable dtOpen = new DataTable();
                sdaopen.Fill(dtOpen);
                SqlCommand cmd = new SqlCommand();

                try
                {
                    nStaffId = Convert.ToInt32(User_Key);
                }
                catch
                {

                }
                //**************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                //cmd0.CommandType = CommandType.StoredProcedure;
                //****************************************************
                cmd0.CommandText = "Select  AhMst_pName As Corpoarte,OpBl_AccId,OpBl_OpBalance,OpBl_OpStatus from Opening_Balance OpnBal LEFT JOIN  AccountHeads_Mst Ahmst ON OpnBal.OpBl_AccId=Ahmst.AhMst_Key  WHERE OpBl_OpBalance!=0 AND OpBl_YrId=" + YearId + "";
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "OpeningBal");
                //****************************************************
                cmd0.Parameters.Clear();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");

                if (nStaffId == 0)
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM Vouchers Vch LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }
                else
                {
                    cmd = new SqlCommand("Select AhMst_pName As Corpoarte,Sum(vchr_Payment) As Payment,SUM(vchr_Receipt) As Receipts,vchr_Id FROM SetCorp_Staff Stf LEFT JOIN  Vouchers Vch ON Stf.SetCorp_CorpId=Vch.vchr_Id LEFT JOIN AccountHeads_Mst Ahmst ON Vch.vchr_Id=Ahmst.AhMst_Key WHERE " + Condtn + " AND SetCorp_StaffId=" + nStaffId + " AND vchr_YrId=" + YearId + " AND vchr_CpyId=" + CompanyId + " GROUP BY AhMst_pName,vchr_Id Order By AhMst_pName", sqlcon);
                }

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //****************************************************
                foreach (DataRow dr in dt.Rows)
                {
                    OpnAmt = 0;
                    try
                    {
                        AccId = Convert.ToInt32(dr["vchr_Id"]);
                    }
                    catch { }
                    //grdCorDts[0, TempRow].Value = TempRow + 1;slno
                    //grdCorDts["Corporate", TempRow].Value = dr["Corpoarte"];corporate
                    corporate = dr["Corpoarte"].ToString();
                    //******************************************************
                    drs = dtOpen.Select("OpBl_AccId='" + AccId.ToString().Trim() + "'");

                    if (drs.Length > 0)
                    {
                        OpnStatus = drs[0][3].ToString();
                        try
                        {
                            OpnAmt = Convert.ToDouble(drs[0][2]);
                        }
                        catch { }

                    }
                    //*******************************************************
                    try
                    {
                        Payments = Convert.ToDouble(dr["Payment"]);

                    }
                    catch { Payments = 0; }
                    try
                    {
                        Receipts = Convert.ToDouble(dr["Receipts"]);

                    }

                    catch { Receipts = 0; }
                    if (OpnAmt > 0)
                    {
                        if (OpnStatus.ToUpper() == "DR")
                        {
                            Receipts = Receipts + OpnAmt;
                        }
                        else if (OpnStatus.ToUpper() == "CR")
                        {
                            Payments = Payments + OpnAmt;
                        }
                    }

                    if (avdClctdBillCheck == 0 && Corpcrlimit > 0 && nStaffId == 0)
                    {
                        AvdCollAvdMat = 0;
                        cmd1 = new SqlCommand("select sum(BlWsCol_AlloAmt) from BillWiseCollection LEFT JOIN Invoice_Mst ON  BlWsCol_CorpId=Inv_InsId AND BlWsCol_YearId=Inv_YrId AND BlWsCol_CompanyId=Inv_CpyId AND  BlWsCol_InvNo=Inv_No where BlWsCol_CorpId=" + AccId + " AND BlWsCol_YearId=" + YearId + " AND BlWsCol_CompanyId=" + CompanyId + " AND Inv_Date>'" + todate.AddDays(Crdays).ToString("yyyy-MM-dd") + "'", sqlcon);
                        try { AvdCollAvdMat = Convert.ToDouble(cmd1.ExecuteScalar()); } catch { }
                        if (AvdCollAvdMat > 0)
                        {
                            Receipts = Receipts - AvdCollAvdMat;
                        }
                    }
                    Bal = Receipts - Payments;
                    //grdCorDts["Billed", TempRow].Value = Math.Round(Payments, 2);billed
                    billed = Math.Round(Payments, 2);
                    //grdCorDts["Collected", TempRow].Value = Math.Round(Receipts, 2);collected
                    collected = Math.Round(Receipts, 2);
                    //grdCorDts["Balance", TempRow].Value = Math.Round(Bal, 2);balance
                    balance = Math.Round(Bal, 2);
                    if (Bal > 0)
                    {
                        //grdCorDts["CrCredit", TempRow].Value = 0;credit
                        credit = 0;
                        debit = Math.Round(Bal, 2);
                        //grdCorDts["CrDebit", TempRow].Value = Math.Round(Bal, 2);debit
                    }
                    else if (Bal < 0)
                    {
                        credit = Math.Round(Bal, 2) * -1;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = Math.Round(Bal, 2) * -1;credit
                        //grdCorDts["CrDebit", TempRow].Value = 0;debit
                    }
                    else
                    {
                        credit = 0;
                        debit = 0;
                        //grdCorDts["CrCredit", TempRow].Value = "0";credit
                        //grdCorDts["CrDebit", TempRow].Value = "0";debit
                    }
                    collectionDetails cs = new collectionDetails()
                    {
                        corporate = corporate,
                        billed = billed,
                        collected = collected,
                        balance = balance,
                        debit = debit,
                        credit = credit
                    };
                    cls.Add(cs);

                    //TempRow += 1;
                }

                //*****************************************************
                DataTable CorpDetails = new DataTable();
                CorpDetails.Columns.Add("CorpName", typeof(string));
                CorpDetails.Columns.Add("Billed", typeof(double));
                CorpDetails.Columns.Add("Collected", typeof(double));
                CorpDetails.Columns.Add("Balance", typeof(double));
                CorpDetails.Columns.Add("Debit", typeof(double));
                CorpDetails.Columns.Add("Credit", typeof(double));
                int i = 0;
                foreach (collectionDetails cd in cls)
                {
                    if (i < rowCount)
                    {
                        CorpDetails.Rows.Add();
                        CorpDetails.Rows[i]["CorpName"] = cd.corporate;
                        CorpDetails.Rows[i]["Billed"] = cd.billed;
                        CorpDetails.Rows[i]["Collected"] = cd.collected;
                        CorpDetails.Rows[i]["Balance"] = cd.balance;
                        CorpDetails.Rows[i]["Debit"] = cd.debit;
                        CorpDetails.Rows[i]["Credit"] = cd.credit;
                        i++;
                    }

                }
                ds0.Tables.Add(CorpDetails);
                DataTable DtDetails = new DataTable();
                DtDetails.Columns.Add("DateInterval", typeof(string));
                DtDetails.Columns.Add("Head", typeof(string));
                DtDetails.Columns.Add("StaffWse", typeof(string));
                DtDetails.Rows.Add();
                if (Flagset == 0)
                {
                    DtDetails.Rows[0]["DateInterval"] = fromdate.ToString("dd-MMM-yyyy") + " to :" + todate.ToString("dd-MMM-yyyy");
                }
                else
                {
                    DtDetails.Rows[0]["DateInterval"] = " Up to :" + todate.ToString("dd-MMM-yyyy");
                }
                DtDetails.Rows[0]["Head"] = "CORPORATE OUTSTANDING";
                DtDetails.Rows[0]["StaffWse"] = User_Name;
                ds0.Tables.Add(DtDetails);

                //**************************************************************

                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                string filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpOutstdng.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorpOutstdng.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpDivPerfmnce()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDivisionPerfomance";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDivPerfmnce(branchdetails corDivPmncObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                double CompanyId = l.BrMst_Key;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = corDivPmncObj.ff;
                string todatee = corDivPmncObj.tt;

                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                //brnchName = collSmryDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "CorporateDivisionPerfomance";
                //*************************************************************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                cmd0.CommandText = "select count(distinct InvItm_invno) as TestCount,convert(date,Inv_Date)as date,Ahmst_Pname,Mstr_Desc,Inv_PayMode from Invoice_Mst left join Invoice_Det on Inv_No = InvItm_Invno and Inv_YrId = InvItm_YrId and Inv_CpyId = InvItm_CpyId left join AccountHeads_Mst on Inv_InsId = AhMst_Key left join Test_Mst on InvItm_TstId = TstMst_Key left join masters on TstMst_DivsnId = Mstr_Key where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' and Inv_Status!= -1 and Inv_InsId>0 and Inv_PayMode!='Debit/Credit'  AND Inv_CpyId = " + CompanyId + " AND Inv_YrId = " + YearId + "   group by AhMst_pName,Mstr_Desc,Inv_Date,Inv_PayMode";


                sd0.Fill(ds0, "dtDetails");


                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                ReportDocument reportDocument = new ReportDocument();

                Head2 = "FROM : " + fromdate.ToString("dd-MM-yyyy") + "     To : " + todate.ToString("dd-MM-yyyy");

                DataTable dt = new DataTable();
                dt.Columns.Add("LabInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));



                dt.Rows.Add();
                dt.Rows[0]["LabInterval"] = Head2;
                dt.Rows[0]["Head"] = "Corporate Perfomance Divisionwise";


                ds0.Tables.Add(dt);

                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(dTitle);
                //ReportType = "rpt_ResultCBCHistogram";

                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporatePerformanceDivisionwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorporatePerformanceDivisionwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFCorpTstPrfmnce()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
        }
        public JsonResult CorpTstPrfmnce(branchdetails CorpTstPrfmnceObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                Smry_Chk = 0;
                Smry_Chk = CorpTstPrfmnceObj.Smry_Chk;
                string fromdatee = CorpTstPrfmnceObj.ff;
                string todatee = CorpTstPrfmnceObj.tt;
                string AhMst_pName = "";
                //double AhMst_Key = 0;
                string nRptName = "";
                string nRptXSDName = "";
                AhMst_pName = CorpTstPrfmnceObj.AhMst_pName;
                AhMst_Key = CorpTstPrfmnceObj.AhMst_Key;
                //**********************


                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = CorpTstPrfmnceObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = CorpTstPrfmnceObj.BrMst_Name;
                Head1 = "Corporate wise Test Perfomance";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                if (Smry_Chk == 1)
                {
                    nRptName = "rpt_CorporateWiseTestPerformance.rpt";
                    nRptXSDName = "rpt_CorporateWiseTestPerformance.xsd";
                }
                else
                {
                    nRptName = "rpt_CorporateWiseTestPerformance2.rpt";
                    nRptXSDName = "rpt_CorporateWiseTestPerformance2.xsd";
                }
                // nRptName = "rpt_CorporateWiseTestPerformance.rpt";
                Head1 = "Corporate wise Test Perfomance";
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (AhMst_Key > 0)
                {
                    nCondition = nCondition + " AND AhMst_Key=" + AhMst_Key + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {

                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {


                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key  left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key  " +
                             "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1    " + nCondition + " group by TstMst_Key,TstMst_name,Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date ORDER BY TstMst_name";

                }
                else
                {

                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " +
                                           "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                           " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1   " + nCondition + " group by TstMst_Key,TstMst_name,Mst1.Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date  ORDER BY TstMst_name";

                }
                cmd = new SqlCommand(sqlStr);
                cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //*************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), nRptName);
                dsPrint.WriteXmlSchema(Reportfilepaths + nRptXSDName);
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFBillWiseStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BillWiseCollectionStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        [HttpPost]
        public JsonResult BillWiseStmnt(branchdetails billWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";

                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = billWiseObj.ff;
                string todatee = billWiseObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BillWiseCollectionStatement";
                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(billWiseObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(billWiseObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = billWiseObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";

                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND BlWsCol_CorpId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "";
                }
                cond = "select BlWsCol_CorpId,BlWsCol_VchrKey,BlWsCol_InvNo,BlWsCol_UserInfo,BlWsCol_Date,BlWsCol_AlloAmt,vchr_ChqDate,vchr_ChqNo,vchr_Narration,vchr_TransType,vchr_Receipt,Corp.AhMst_pName,vchr_BookId,Vouchers.vchr_Receipt,Vouchers.vchr_TransNo,Invoice_Mst.Inv_name,Invoice_Mst.Inv_Netamt,Invoice_Mst.Inv_Date,Invoice_Mst.Inv_GrosAmt,Invoice_Mst.Inv_DiscAmt,Invoice_Mst.Inv_ItemDisc,Invoice_Mst.Inv_CurBalAmt,bank.ahmst_pname as bank,Area.Mstr_Desc as AreaName,Corp.AhMst_PayType,Corp.AhMst_AreaID " + Environment.NewLine
                    + "from BillWiseCollection left join AccountHeads_Mst as Corp on Corp.AhMst_Key=BlWsCol_CorpId left join Vouchers on vchr_Key=BlWsCol_VchrKey AND vchr_YrId=BlWsCol_YearId AND vchr_CpyId=BlWsCol_CompanyId  left join Invoice_Mst on Inv_No=BlWsCol_InvNo AND Inv_YrId=BlWsCol_YearId AND Inv_CpyId =BlWsCol_CompanyId  " + Environment.NewLine
                    + "left join AccountHeads_Mst as bank on bank.AhMst_Key=vchr_BookId LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where BlWsCol_Date >='" + frmdate + "' and BlWsCol_Date <='" + toDate + "'     AND (Vchr_TransType='Cash Receipts' OR  Vchr_TransType='Cheque Receive') and BlWsCol_CompanyId='" + cmpid + "' " + condtnCorp + condtnArea + condtnPayMode;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "BillWise Collection");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BillWiseStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_BillWiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFBillWiseDue()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "BillWiseDueStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult BillWiseDue(branchdetails billWiseDueObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = billWiseDueObj.ff;
                string todatee = billWiseDueObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BillWiseDueStatement";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(billWiseDueObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(billWiseDueObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = billWiseDueObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";

                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "";
                }

                if (avoidYrIdRpt == 1)
                {
                    nCondtnYrId = "";
                }
                else
                {
                    nCondtnYrId = "and Inv_YrId=" + yrid;
                }



                cond = "select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Corp.AhMst_pName,Inv_Netamt,Inv_GrosAmt,Inv_YrId,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,Area.Mstr_Desc as AreaName,Corp.AhMst_PayType,Corp.AhMst_AreaID " + Environment.NewLine
                    + "from Invoice_Mst left join AccountHeads_Mst as Corp on Corp.AhMst_Key=Inv_InsId " + Environment.NewLine
                    + "LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_CpyId='" + cmpid + "' AND Inv_CurBalAmt!=0 AND Inv_Status!='-1' AND Inv_PayMode='Credit' " + condtnCorp + condtnArea + condtnPayMode + nCondtnYrId;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "BillWise Due");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_BillWiseDueStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_BillWiseDueStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpWisePendColln()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateWisePendingCollection";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpWisePendColln(branchdetails corpPendObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //YearId CompanyId
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string filepath = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpPendObj.ff;
                string todatee = corpPendObj.tt;
                int bCorpId = 0;
                string CorpName = "";
                string nQuery = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateWisePendingCollection";
                try
                {
                    bCorpId = Convert.ToInt32(corpPendObj.AhMst_Key);
                }
                catch { }
                try
                {
                    CorpName = (corpPendObj.AhMst_pName).ToString();
                }
                catch { }
                //******************************* 
                SqlCommand cmd0 = new SqlCommand();

                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);

                DataSet ds0 = new DataSet();
                if (bCorpId > 0)
                {
                    cmd0.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                                "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                                "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                                "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                                "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                                "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                                "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                                "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                                "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + CompanyId + " AND B.Inv_YrId=" + YearId + " AND B.Inv_InsId=" + bCorpId;

                }
                else
                {
                    cmd0.CommandText = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                               "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                               "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                               "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                               "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                               "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                               "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                               "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                               "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + CompanyId + " AND B.Inv_YrId=" + YearId + " AND B.Inv_InsId>0";
                }

                sd0.Fill(ds0, "dtInvTestDet");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");

                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpPendCollStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpPendCollStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFAreaWiseSummary()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "AreaWiseSummary";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult AreaWiseSummary(branchdetails areaWsSmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //YearId CompanyId
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string filepath = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = areaWsSmryObj.ff;
                string todatee = areaWsSmryObj.tt;
                int bCorpId = 0;
                string CorpName = "";
                string nQuery = "";
                string AreaName = "";
                int bCorpAreaId = 0;
                AreaName = areaWsSmryObj.AreaName;
                int dailyCheck = areaWsSmryObj.dailyCheck;
                //try
                //{
                //    bCorpMode = areaWsSmryObj.PayType.ToString();
                //}
                //catch { }
                //try
                //{
                //    bCorpAreaId = Convert.ToInt32(areaWsSmryObj.AreaKey);
                //}
                //catch { }
                string ncondtion = "";
                string nMode = "";
                int nAreaid = 0;
                try
                {
                    nAreaid = Convert.ToInt32(areaWsSmryObj.AreaKey);
                }
                catch { }
                if (areaWsSmryObj.PayType != null)
                {
                    nMode = areaWsSmryObj.PayType.ToString();
                }


                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "AreaWiseSummary";
                ncondtion = "INV_DATE>='" + fromdate.ToString("yyyy-MM-dd")/*.ToString() */+ "' AND INV_DATE<='" + todate.ToString("yyyy-MM-dd")/*.ToString()*/ + "'   AND Inv_Status!='-1' and Inv_InsId>0 AND Inv_Paymode!='Debit/Credit'";
                if (nAreaid > 0)
                {
                    ncondtion = ncondtion + " AND AhMst_AreaID =" + nAreaid;
                }

                if (nMode != "")
                {
                    ncondtion = ncondtion + " AND AhMst_PayType ='" + nMode + "'";
                }
                //******************************* 
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                if (dailyCheck == 0)
                {
                    cmd0.CommandText = "SELECT Mstr_Desc as Area,Inv_Date ,Sum(Inv_GrosAmt) AS Inv_GrosAmt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_CurBalAmt) as Inv_CurBalAmt, SUM(Inv_CurRcvdAmt) as Inv_CurRcvdAmt, count(Inv_NO) as totalData, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_DiscAmt) as Inv_DiscAmt, SUM(Inv_ItemDisc) as Inv_ItemDisc FROM Invoice_Mst inv lEFT JOIN AccountHeads_Mst Ahmst On inv.Inv_InsId = Ahmst.AhMst_key LEFT JOIN MASTERS mst On Ahmst.AhMst_AreaID=mst.Mstr_Key WHERE " + ncondtion + " AND Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " GROUP BY Mstr_Desc,Inv_Date";
                }
                else
                {
                    cmd0.CommandText = "SELECT Mstr_Desc as Area ,Sum(Inv_GrosAmt) AS Inv_GrosAmt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_CurBalAmt) as Inv_CurBalAmt, SUM(Inv_CurRcvdAmt) as Inv_CurRcvdAmt, count(Inv_NO) as totalData, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_Netamt) as Inv_Netamt, SUM(Inv_DiscAmt) as Inv_DiscAmt, SUM(Inv_ItemDisc) as Inv_ItemDisc FROM Invoice_Mst inv lEFT JOIN AccountHeads_Mst Ahmst On inv.Inv_InsId = Ahmst.AhMst_key LEFT JOIN MASTERS mst On Ahmst.AhMst_AreaID=mst.Mstr_Key WHERE " + ncondtion + " AND Inv_YrId=" + YearId + " and Inv_CpyId=" + CompanyId + " GROUP BY Mstr_Desc";
                }
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                sd0.Fill(ds0, "InvoiceView");

                cmd0.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst]";
                sd0 = new SqlDataAdapter(cmd0);

                sd0.Fill(ds0, "companyMst");

                DataTable DtDetails = new DataTable();
                DtDetails.TableName = "Headings";
                DtDetails.Columns.Add("DateInterval", typeof(string));
                DtDetails.Columns.Add("Head", typeof(string));
                DtDetails.Columns.Add("Area", typeof(string));
                DtDetails.Rows.Add();
                DtDetails.Rows[0]["DateInterval"] = fromdate.ToString("dd-MMM-yyyy") + " to :" + todate.ToString("dd-MMM-yyyy");
                DtDetails.Rows[0]["Area"] = AreaName + " " + nMode;
                ds0.Tables.Add(DtDetails);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                if (dailyCheck == 0)
                {
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AreaDailySummary.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_AreaDailySummary.xsd");
                }
                else
                {
                    string Reportfilepaths = Server.MapPath("~/Reports/");
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AreaSummary.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_AreaSummary.xsd");
                }

                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpBillMnthlySmry()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillMonthlySummary";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpBillMnthlySmry(branchdetails corpBillMnthlySmryObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpBillMnthlySmryObj.ff;
                string todatee = corpBillMnthlySmryObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillMonthlySummary";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpBillMnthlySmryObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpBillMnthlySmryObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = corpBillMnthlySmryObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Corp.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Corp.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }



                cond = "select Inv_InsId,Corp.AhMst_pName,Inv_Date,Inv_No,Inv_Netamt,Inv_GrosAmt,Inv_ItemDisc,Inv_DiscAmt,Inv_CurBalAmt,Corp.AhMst_AreaID,Area.Mstr_Desc as Area " + Environment.NewLine
                   + "from Invoice_Mst left join AccountHeads_Mst as Corp on Corp.AhMst_Key=Inv_InsId " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=Corp.AhMst_AreaID where convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND Inv_PayMode!='Debit/Credit' AND Inv_Status!='-1' " + condtnCorp + condtnArea + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillSummary");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);


                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillMonthSummary.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillMonthSummary.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpMnthDetStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateMonthlyDetailedStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpMnthDetStmnt(branchdetails CorpMnthDetStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpMnthDetStmntObj.ff;
                string todatee = CorpMnthDetStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateMonthlyDetailedStatements";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(CorpMnthDetStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpMnthDetStmntObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = CorpMnthDetStmntObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv.Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv.Inv_InsId!=0";
                }
                if (yrid == 1)
                {
                    nCondtnYrId = "";

                }
                else
                {
                    nCondtnYrId = "AND Inv_YrId=" + yrid + "";
                }

                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName " + Environment.NewLine
                   + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                   + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                   + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                   + "where Inv.Inv_Status!=-1 AND Invl_IsPending=1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_CpyId='" + cmpid + "' AND Inv_PayMode!='Debit/Credit' " + condtnCorp + condtnArea + condtnPayMode + nCondtnYrId;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillDet");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);


                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpDetailStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpDetailStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpDctrStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDoctorStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDctrStmnt(branchdetails CorpDctrStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string DctrName = "";
                double dctrKey = 0;
                dctrKey = CorpDctrStmntObj.dctrKey;
                DctrName = CorpDctrStmntObj.DctrName;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string condtnDoctr = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpDctrStmntObj.ff;
                string todatee = CorpDctrStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateDoctorStatement";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(CorpDctrStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpDctrStmntObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = CorpDctrStmntObj.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }

                if (dctrKey != 0)
                {
                    condtnDoctr = "AND Inv_DrId='" + dctrKey + "'";
                }
                else
                {
                    condtnDoctr = "";
                }
                if (yrid == 1)
                {
                    nCondtnYrId = "";

                }
                else
                {
                    nCondtnYrId = "AND Inv_YrId=" + yrid + "";
                }

                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_InsId,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName,Inv_DrId,Doc.AhMst_pName as Doctor " + Environment.NewLine
                  + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                  + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                  + "Left Join AccountHeads_Mst Doc WITH (NOLOCK) ON Inv.Inv_DrId=Doc.AhMst_Key" + Environment.NewLine
                  + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                  + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                  + "where Inv.Inv_Status!=-1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND InvItm_YrId ='" + yrid + "' AND Inv_PayMode!='Debit/Credit' and Inv_DrId!=0 " + condtnArea + condtnCorp + condtnDoctr + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorptDoctr");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorprateDoctrStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorprateDoctrStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFcorpAgntRpt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentReports";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult corpAgntRpt(branchdetails corpAgntRpts)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? yrid = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpAgntRpts.ff;
                string todatee = corpAgntRpts.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentReports";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpAgntRpts.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpAgntRpts.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = corpAgntRpts.PayType.ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }
                cond = "Select Inv_No,Inv_Name,Inv_Date,Inv_age,Inv_ageymd,Inv_InsId,Inv_Status,Inv_DrId,Inv_OutDr,Inv_Netamt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Inv_CurRcvdAmt,InvDet.InvItm_TstId,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc as AreaName,Doc.AhMst_pName as Doctor " + Environment.NewLine
                   + "from dbo.Invoice_Mst Inv WITH (NOLOCK) Left Join AccountHeads_Mst AccH WITH(NOLOCK) ON Inv.Inv_InsId = AccH.AhMst_Key  " + Environment.NewLine
                   + "LEFT JOIN Masters as Area on Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                   + "Left Join AccountHeads_Mst Doc WITH (NOLOCK) ON Inv.Inv_DrId=Doc.AhMst_Key" + Environment.NewLine
                   + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId" + Environment.NewLine
                   + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                   + "where Inv.Inv_Status!=-1 AND convert(date,Inv_Date) >='" + frmdate + "' and convert(date,Inv_Date) <='" + toDate + "' and Inv_YrId=" + yrid + " and Inv_CpyId='" + cmpid + "' AND InvItm_YrId ='" + yrid + "' AND Inv_PayMode!='Debit/Credit' " + condtnCorp + condtnArea + condtnPayMode;

                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "CorpBillDet");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorporatesBillDetails.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorporatesBillDetails.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchDptCorpName(branchdetails crpWithName)
        {
            string corpName = crpWithName.AhMst_pName;
            double areaKey = crpWithName.AreaKey;
            string PayType = "";
            if (crpWithName.PayType != null)
            {
                PayType = crpWithName.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_TERM_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_TERM_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_TERM(corpName, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDptCorpCode(branchdetails crpWithCode)
        {
            double corpKey = crpWithCode.AhMst_Key;
            double areaKey = crpWithCode.AreaKey;
            //string PayType = crpWithCode.PayType;
            string PayType = "";
            if (crpWithCode.PayType != null)
            {
                PayType = crpWithCode.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_KEY_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_KEY(corpKey, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchDptCorpPhno(branchdetails crpWithPhNo)
        {
            string corpPhno = crpWithPhNo.AhMst_mobile;
            double areaKey = crpWithPhNo.AreaKey;
            // string PayType = crpWithPhNo.PayType;
            string PayType = "";
            if (crpWithPhNo.PayType != null)
            {
                PayType = crpWithPhNo.PayType;
            }
            try
            {
                List<Stproc_SEARCH_DPT_CORPORATE_WITH_PHN_Result> t = new List<Stproc_SEARCH_DPT_CORPORATE_WITH_PHN_Result>();
                t = db.Stproc_SEARCH_DPT_CORPORATE_WITH_PHN(corpPhno, areaKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpDptStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateDepartmentStatement";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpDptStmnt(branchdetails CorpDptStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpDptStmntObj.ff;
                string todatee = CorpDptStmntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                string nCondition = "";
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateDepartmentStatement";
                string[] dptClctnObj = CorpDptStmntObj.dptClctnObj;
                string[] dptClctnKeyObj = CorpDptStmntObj.dptClctnKeyObj;
                for (int i = 0; i < dptClctnKeyObj.Count(); i++)
                {
                    if (nCondition == "")
                    {
                        nCondition += (dptClctnKeyObj[i]).ToString();
                    }
                    else
                    {
                        nCondition += "," + (dptClctnKeyObj[i]).ToString();
                    }
                }
                //******************************* 

                //string nCondition;
                int corpId = 0;
                int AreaId = 0;

                try
                {
                    corpId = Convert.ToInt32(CorpDptStmntObj.AhMst_Key);
                }
                catch { }
                try
                {
                    AreaId = Convert.ToInt32(CorpDptStmntObj.AreaKey);
                }
                catch { }
                if (nCondition != "") nCondition = " AND E.Mstr_Key IN(" + nCondition + ")";

                if (corpId > 0)
                {
                    if (nCondition != "")
                    {
                        nCondition = nCondition + " AND Inv_InsId=" + corpId + "";
                    }
                    else
                    {
                        nCondition = " AND Inv_InsId=" + corpId + "";
                    }
                }

                if (AreaId > 0)
                {
                    if (nCondition != "")
                    {
                        nCondition = nCondition + " AND Inv_AreaId=" + AreaId + "";
                    }
                    else
                    {
                        nCondition = " AND Inv_AreaId=" + AreaId + "";
                    }
                }

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate,Ar.Mstr_desc as Area, " +
                                     "C.TstMst_Key, C.TstMst_name, C.TstMst_TypeId, C.TstMst_Rate,AccountHeads_Mst_3.AhMst_pName AS Corporate,  " +
                                     "C.TstMst_DivsnId, C.TstMst_TechId, A.Inv_No, " +
                                     "A.Inv_BrID, A.Inv_Date, A.Inv_time,A.Inv_ItemDisc,A.Inv_name,A.Inv_InsId,A.Inv_DrId,A.Inv_GrosAmt,A.Inv_PayMode,A.Inv_DiscAmt,A.Inv_Netamt,A.Inv_RcvdAmt,A.Inv_BalAmt,A.Inv_CurBalAmt,A.Inv_CurRcvdAmt,Inv_ItemDesc,B.InvItm_SmplId,A.Inv_ShortName, B.InvItm_SmplStats, " +
                                     "C.TstMst_ShortName, E.Mstr_Desc AS DeptName,A.Inv_OutDr,Ah.AhMst_pName As Doctor,Ah.AhMst_pName " +
                                     "FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                                     "dbo.Invoice_Mst A WITH (NOLOCK) ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_Invno = A.Inv_No AND B.InvItm_CpyId = A.Inv_CpyId LEFT OUTER JOIN " +
                                      "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON A.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                     "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key AND B.InvItm_Orgrate>0 LEFT OUTER JOIN " +
                                     "dbo.Masters E WITH (NOLOCK) ON C.TstMst_DeptId = E.Mstr_Key AND E.Mstr_Type = 'Dept' LEFT JOIN AccountHeads_Mst Ah ON A.Inv_DrId =Ah.Ahmst_Key LEFT JOIN Masters Ar ON AccountHeads_Mst_3.AhMst_AreaID =Ar.Mstr_key " +
                                     " WHERE Inv_PayMode!='Debit/Credit' AND Inv_InsId>0 AND Inv_Status!=-1 and A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                     "AND A.Inv_CpyId = " + CompanyId + " AND A.Inv_YrId = " + YearId + " " + nCondition + " ORDER BY E.Mstr_Desc,C.TstMst_name,B.InvItm_Invno";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "dept");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "Company_Mst");
                string Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();


                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds0.Tables.Add(dt);
                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorDepartmentwise.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_CorDepartmentwise.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchTstWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchTstWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpTstPrfmncAreaWise()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateTestPerfomanceAreaWise";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpTstPrfmncAreaWise(branchdetails CorpTstAreaWiseObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bDoctr = 0;
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double cmpid = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string tstName = "";
                double tstKey = 0;
                tstKey = CorpTstAreaWiseObj.TestKey;
                tstName = CorpTstAreaWiseObj.TestName;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                string condtnDoctr = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = CorpTstAreaWiseObj.ff;
                string todatee = CorpTstAreaWiseObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateTestPerfomanceAreaWise";
                string PayType = "";
                if (CorpTstAreaWiseObj.PayType != null)
                {
                    PayType = CorpTstAreaWiseObj.PayType;
                }

                //*******************************
                try
                {
                    bDoctr = Convert.ToInt32(CorpTstAreaWiseObj.TestKey);
                }
                catch { }
                try
                {
                    bCorpId = Convert.ToInt32(CorpTstAreaWiseObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(CorpTstAreaWiseObj.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = PayType;
                }
                catch { }
                //try
                //{
                //    frmdate = fromdate.ToString("yyyy-MM-dd");
                //}
                //catch { }
                //try
                //{
                //    toDate = todate.ToString("yyyy-MM-dd");
                //}
                //catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND Accnt.AhMst_AreaID='" + CorpTstAreaWiseObj.AreaKey + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND Accnt.AhMst_PayType='" + CorpTstAreaWiseObj.PayType + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + CorpTstAreaWiseObj.AhMst_Key + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }

                if (bDoctr != 0)
                {
                    condtnDoctr = "AND invdet.InvItm_TstId='" + CorpTstAreaWiseObj.TestKey + "'";
                }
                else
                {
                    condtnDoctr = "";
                }
                //******************************* 
                cond = "SELECT Inv_No,Inv_Date,Inv_Name,Inv_NetAmt,Inv_GrosAmt,Inv_DiscAmt,Inv_ItemDisc,Inv_CurBalAmt,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc from Invoice_Mst inv" + Environment.NewLine
    + "left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key" + Environment.NewLine
    + "left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key" + Environment.NewLine
    + "left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " + Environment.NewLine
    + "left join Masters Mst2 on Accnt.AhMst_AreaId=Mst2.Mstr_Key" + Environment.NewLine
    + "WHERE convert(date,inv.Inv_Date) >= '" + frmdate + "' AND convert(date,inv.Inv_Date) <= '" + toDate + "' " + Environment.NewLine
    + " AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit'  " + condtnArea + condtnCorp + condtnPayMode + condtnDoctr + " ORDER BY TstMst_name";


                //cond = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc,Accnt.AhMst_Key,Accnt.AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc from Invoice_Mst inv" + Environment.NewLine
                //    + "left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key" + Environment.NewLine
                //    + "left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key" + Environment.NewLine                    
                //    + "left join AccountHeads_Mst Accnt on inv.Inv_InsId=Accnt.AhMst_Key " + Environment.NewLine
                //    + "left join Masters Mst2 on Accnt.AhMst_AreaId=Mst2.Mstr_Key" + Environment.NewLine
                //    + "WHERE convert(date,inv.Inv_Date) >= '" + frmdate + "' AND convert(date,inv.Inv_Date) <= '" + toDate + "' " + Environment.NewLine
                //    + " AND inv.Inv_YrId = " + cPublic.YearId + " AND inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit'  " + condtnArea+condtnCorp+condtnPayMode +condtnDoctr+ " group by TstMst_Key,TstMst_name,mst1.Mstr_Desc,AhMst_Key,AhMst_pName,inv.Inv_Date,Accnt.AhMst_AreaId,Mst2.Mstr_Desc  ORDER BY TstMst_name";




                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpTestPerfm");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpTestPerfrmceArea.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpTestPerfrmceArea.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFCorpBillDet()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillDetailed";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpBillDet(branchdetails corpBillDetRpts)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bCorpId = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string cond = "", condtnArea = "", condtnPayMode = "", condtnCorp = "";
                int bCorpAreaId = 0;
                string bCorpMode = "";
                int CorPorateId = 0;
                string nCondtnYrId = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                int billDetChk = 0;
                billDetChk = corpBillDetRpts.billDetCheck;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpBillDetRpts.ff;
                string todatee = corpBillDetRpts.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateBillDetailed";

                //******************************* 
                try
                {
                    bCorpId = Convert.ToInt32(corpBillDetRpts.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    bCorpAreaId = Convert.ToInt32(corpBillDetRpts.AreaKey);
                }
                catch { }
                try
                {
                    bCorpMode = (corpBillDetRpts.PayType).ToString();
                }
                catch { }
                if (bCorpAreaId != 0)
                {
                    condtnArea = "AND AccH.AhMst_AreaID='" + bCorpAreaId + "'";
                }
                else
                {
                    condtnArea = "";
                }

                if (bCorpMode != "")
                {
                    condtnPayMode = "AND AccH.AhMst_PayType='" + bCorpMode + "'";
                }
                else
                {
                    condtnPayMode = "";
                }

                if (bCorpId != 0)
                {
                    condtnCorp = "AND Inv_InsId=" + bCorpId + "";
                }
                else
                {
                    condtnCorp = "AND Inv_InsId!=0";
                }
                try
                {
                    CorPorateId = Convert.ToInt32(bCorpId);
                }
                catch { }
                //******************************* 
                cond = "Select Inv.*,InvDet.*,AccH.AhMst_AreaID,AccH.AhMst_pName,Tst.TstMst_name,Tst.TstMst_Rate,Area.Mstr_Desc from dbo.Invoice_Mst Inv WITH (NOLOCK)" + Environment.NewLine
                                             + "Left Join AccountHeads_Mst AccH WITH (NOLOCK) ON Inv.Inv_InsId=AccH.AhMst_Key " + Environment.NewLine
                                             + "Left Join  dbo.Invoice_Det InvDet WITH (NOLOCK) ON Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId " + Environment.NewLine
                                             + "left join dbo.Test_Mst Tst WITH (NOLOCK) ON InvDet.InvItm_TstId=Tst.TstMst_Key " + Environment.NewLine
                                             + "left join Masters as Area on Area.Mstr_Key=AccH.AhMst_AreaID" + Environment.NewLine
                                             + "Where Inv.Inv_Status!=-1 AND Inv_PayMode!='Debit/Credit' And convert(Date,Inv_Date,0)>='" + frmdate + "' " + Environment.NewLine
                                             + " AND convert(Date,Inv_Date,0)<='" + toDate + "'" + Environment.NewLine

                                             + " AND Inv_YrId =" + YearId + " AND Inv_CpyId=" + CompanyId + "" + Environment.NewLine
                                             + " AND InvItm_YrId =" + YearId + condtnCorp + condtnArea + condtnPayMode;


                SqlCommand cmd = new SqlCommand(cond, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "CorpBillSummary");
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                if (billDetChk == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillDetAreaTwo.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillDetAreaTwo.xsd");
                }
                else
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CorpBillDetArea.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_CorpBillDetArea.xsd");
                }


                //******************************* 



                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchAgentWithName(string term)
        {
            try
            {
                List<Stproc_SEARCH_AGENT_WITH_NAME_Result> t = new List<Stproc_SEARCH_AGENT_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_AGENT_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchAgentWithKey(string term)
        {
            try
            {
                List<Stproc_SEARCH_AGENT_WITH_KEY_Result> t = new List<Stproc_SEARCH_AGENT_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_AGENT_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpWithAgntName(branchdetails crpWithagntName)
        {
            double agntKey = 0;
            string corpTerm = "";
            try
            {

                if (crpWithagntName.AgntKey != 0)
                {
                    agntKey = crpWithagntName.AgntKey;
                }
                //agntKey = crpWithagntName.AgntKey;
                corpTerm = crpWithagntName.AhMst_pName;
                List<Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_AGNT_NAME(corpTerm, agntKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCorpWithAgntKey(branchdetails crpWithagntKey)
        {
            double agntKey = 0;
            double corpKey = 0;
            try
            {

                if (crpWithagntKey.AgntKey != 0)
                {
                    agntKey = crpWithagntKey.AgntKey;
                }
                //agntKey = crpWithagntName.AgntKey;
                corpKey = crpWithagntKey.AhMst_Key;
                List<Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY_Result> t = new List<Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY_Result>();
                t = db.Stproc_SEARCH_CORPORATE_WITH_AGNT_KEY(corpKey, agntKey).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCorpAgntStmnt()
        {
            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentStatements";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult CorpAgntStmnt(branchdetails agntCorpObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = agntCorpObj.ff;
                string todatee = agntCorpObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CorporateAgentStatements";
                try
                {
                    bAgentId = Convert.ToInt32(agntCorpObj.AgntKey);
                }
                catch { }
                //if (bAgentId == 0)
                //{
                //    MessageBox.Show("Please Select Agent!", cPublic.ProjectName);
                //    txtAgent.Focus();
                //    return;
                //}

                try
                {
                    bCorpId = Convert.ToInt32(agntCorpObj.AhMst_Key);
                }
                catch { }
                if (bCorpId != 0)
                {
                    condCorp = "AND SetCorp_CorpId='" + bCorpId + "'";
                }
                else
                {
                    condCorp = "";
                }

                //******************************* 
                cond = "SELECT Inv_No,Inv_Name,Inv_Netamt,Inv_Date,Inv_RcvdAmt,Inv_DiscAmt,Inv_GrosAmt,Inv_ItemDisc,Inv_InsId,SetCorp_StaffId,Inv_BalAmt,Inv_CurBalAmt,Inv_PayMode,Corp.AhMst_pName as CorpName,Agent.Ahmst_pName as AgentName FROM INVOICE_MST WITH(NOLOCK) " + Environment.NewLine
                    + "LEFT JOIN SetCorp_Staff WITH(NOLOCK)ON SetCorp_CorpId = Inv_InsId " + Environment.NewLine
                    + "LEFT JOIN AccountHeads_Mst AS Corp WITH(NOLOCK) ON Corp.AhMst_Key = SetCorp_CorpId" + Environment.NewLine
                    + "LEFT JOIN AccountHeads_Mst AS Agent WITH(NOLOCK) ON Agent.AhMst_Key = SetCorp_StaffId" + Environment.NewLine
                    + "WHERE Inv_PayMode !='Debit/Credit' and Inv_Status != -1 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + " " + Environment.NewLine
                    + "AND convert(date,Inv_Date) >='" + fromdate + "' AND convert(date,Inv_Date) <='" + todate + "' AND SetCorp_StaffId ='" + bAgentId + "'" + condCorp;

                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = cond;
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);

                sda.Fill(ds, "AgentCorpDet");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //******************************* 
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_AgentCorpStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_AgentCorpStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult agentCorpStmntView(branchdetails corpagntStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {

                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************************************
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";

                //*********************************************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = corpagntStmntObj.ff;
                string todatee = corpagntStmntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = corpagntStmntObj.AhMst_pName;
                double Corp_Key = corpagntStmntObj.AhMst_Key;
                double AgntKey = corpagntStmntObj.AgntKey;
                //******************
                try
                {
                    bAgentId = Convert.ToInt32(AgntKey);
                }
                catch { }


                try
                {
                    bCorpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (bCorpId != 0)
                {
                    condCorp = "AND SetCorp_CorpId='" + bCorpId + "'";
                }
                else
                {
                    condCorp = "";
                }

                cond = "SELECT Inv_No,Inv_Name,Inv_Netamt,Inv_RcvdAmt,Inv_Date,Inv_DiscAmt,Inv_GrosAmt,Inv_ItemDisc,Inv_InsId,SetCorp_StaffId,Inv_BalAmt,Inv_CurBalAmt,Inv_PayMode,Corp.AhMst_pName as CorpName,Agent.Ahmst_pName as AgentName FROM INVOICE_MST WITH(NOLOCK) " + Environment.NewLine
                        + "LEFT JOIN SetCorp_Staff WITH(NOLOCK)ON SetCorp_CorpId = Inv_InsId " + Environment.NewLine
                        + "LEFT JOIN AccountHeads_Mst AS Corp WITH(NOLOCK) ON Corp.AhMst_Key = SetCorp_CorpId" + Environment.NewLine
                        + "LEFT JOIN AccountHeads_Mst AS Agent WITH(NOLOCK) ON Agent.AhMst_Key = SetCorp_StaffId" + Environment.NewLine
                        + "WHERE Inv_PayMode !='Debit/Credit' and Inv_Status != -1 AND Inv_YrId=" + YearId + " AND Inv_CpyId=" + CompanyId + " " + Environment.NewLine
                        + "AND convert(date,Inv_Date) >='" + fromdate + "' AND convert(date,Inv_Date) <='" + todate + "' AND SetCorp_StaffId ='" + bAgentId + "'" + condCorp + "ORDER BY Inv_No ";

                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = cond;
                cmd.Connection = sqlcon;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                int curRow = 0;
                if (dt.Rows.Count > 0)
                {
                    //grdCorporate.Rows.Add(dt.Rows.Count);
                    foreach (DataRow dr in dt.Rows)
                    {
                        double netamt = 0;
                        double curBal = 0;
                        double curRcvd = 0;
                        try
                        {
                            netamt = Convert.ToDouble(dr["Inv_Netamt"].ToString());
                        }
                        catch { }
                        try
                        {
                            curBal = -(Convert.ToDouble(dr["Inv_CurBalAmt"].ToString()));
                        }
                        catch { }

                        curRcvd = netamt - curBal;
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MM-yyyy"),
                            Inv_Netamt = dr["Inv_Netamt"].ToString(),
                            AhMst_pName = dr["CorpName"].ToString(),
                            Inv_CurRcvd = curRcvd.ToString(),
                            Inv_CurBalAmt = dr["Inv_CurBalAmt"].ToString()

                        };
                        cls.Add(cs1);
                        curRow = curRow + 1;
                    }
                }
                //*********************
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult CrdtLmtStmntView(branchdetails crLmtStmntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double CrLimit = 0;
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************************************
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";

                //*********************************************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = crLmtStmntObj.ff;
                string todatee = crLmtStmntObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = crLmtStmntObj.AhMst_pName;
                double Corp_Key = crLmtStmntObj.AhMst_Key;
                //**************************************************
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                cmd0.CommandText = "select AhMst_pName,AhMst_Key,AhMst_CRDays FROM AccountHeads_Mst WHERE AhMst_Type='AccHd' and AhMst_IsActive=1 and AhMst_Key='" + Corp_Key + "'";
                SqlDataAdapter sda = new SqlDataAdapter(cmd0);
                DataTable dt1 = new DataTable();
                sda.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    //grdCorporate.Rows.Add(dt.Rows.Count);
                    foreach (DataRow dr in dt1.Rows)
                    {
                        try
                        {
                            CrLimit = Convert.ToDouble(dr["AhMst_CRDays"].ToString());
                        }
                        catch { }
                    }
                }
                //**************************************************
                int corpId = 0;
                string nCondtion = "";
                try
                {
                    corpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (corpId > 0)
                {
                    nCondtion = "and Inv_InsId=" + corpId;
                }
                else
                {
                    nCondtion = "";
                }

                if ((corpId > 0) && (CrLimit == 0))
                {
                    //MessageBox.Show("Credit Limit Not Found!", cPublic.ProjectName);
                    //txtCorporate.Focus();
                    //return;
                    string errMsg = "Credit Limit Not Found!";
                    return Json(new { Result = "OK", Record = errMsg });
                }

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select [Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode FROM [dbo].[Invoice_Mst] WITH (NOLOCK) LEFT JOIN [dbo].[AccountHeads_Mst] WITH (NOLOCK) ON Inv_InsId=AhMst_Key WHERE Inv_PayMode!='Debit/Credit' and Inv_Status!=-1 and Invl_isPending=1 and convert(Date,Inv_Date)>='" + fromdate + "'and  convert(Date,Inv_Date) <='" + todate + "' and [Inv_YrId]=" + YearId + " and [Inv_CpyId]=" + CompanyId + " and AhMst_CRDays>0" + nCondtion + "  order by corp,Inv_Date,Inv_No";
                sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows.Count == 0)
                {
                    return Json(new
                    {
                        Result = "ERROR"

                    });
                }

                DateTime _invDate;
                int CrDays = 0;
                int CrCount = 0;
                int grdSlno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    _invDate = DateTime.Now;
                    CrDays = 0;
                    CrCount = 0;
                    double CurBal = 0;
                    double curRcvd = 0;
                    double netAmount = 0;

                    try
                    {
                        CrDays = Convert.ToInt32(dr["AhMst_CRDays"]);
                    }
                    catch { }
                    try
                    {
                        _invDate = Convert.ToDateTime(dr["Inv_Date"]);
                    }
                    catch { }

                    CrCount = Convert.ToInt32((DateTime.Now - _invDate).TotalDays);

                    if (CrCount > CrDays)
                    {
                        try
                        {
                            netAmount = Convert.ToDouble(dr["Inv_Netamt"]);
                        }
                        catch { }
                        try
                        {
                            CurBal = -(Convert.ToDouble(dr["Inv_CurBalAmt"]));
                        }
                        catch { }
                        curRcvd = netAmount - CurBal;
                        collectionDetails cs1 = new collectionDetails()
                        {
                            Inv_No = dr["Inv_No"].ToString(),
                            Inv_name = dr["inv_name"].ToString(),
                            Inv_Date = _invDate.ToString("dd-MM-yyyy"),
                            Inv_Netamt = dr["Inv_Netamt"].ToString(),
                            AhMst_pName = dr["corp"].ToString(),
                            Inv_RcvdAmt = curRcvd.ToString(),
                            Inv_CurBalAmt = dr["Inv_CurBalAmt"].ToString(),
                            CrDayLimit = dr["AhMst_CRDays"].ToString()

                        };
                        cls.Add(cs1);
                        grdSlno = grdSlno + 1;
                    }
                }

                //*********************
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult CrdtLmtStmnt(branchdetails crLmtStmntPrntObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int bAgentId = 0;
                int bCorpId = 0;
                string cond = "", condCorp = "", filepath = "";
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                double dctrKey = 0;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = crLmtStmntPrntObj.ff;
                string todatee = crLmtStmntPrntObj.tt;

                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string Corp_Name = crLmtStmntPrntObj.AhMst_pName;
                double Corp_Key = crLmtStmntPrntObj.AhMst_Key;
                DataSet ds = new DataSet();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "CreditLimitStatement";
                //**********************************************************
                int corpId = 0;
                string nCondtion = "";
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select [Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode FROM [dbo].[Invoice_Mst] WITH (NOLOCK) LEFT JOIN [dbo].[AccountHeads_Mst] WITH (NOLOCK) ON Inv_InsId=AhMst_Key WHERE Inv_PayMode!='Debit/Credit' and Inv_Status!=-1 and Invl_isPending=1 and convert(Date,Inv_Date)>='" + fromdate + "'and  convert(Date,Inv_Date) <='" + todate + "' and [Inv_YrId]=" + YearId + " and [Inv_CpyId]=" + CompanyId + " and AhMst_CRDays>0" + nCondtion + "  order by corp,Inv_Date,Inv_No";
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //if (dt1.Rows.Count > 0)
                //{
                if (dt.Rows.Count == 0)
                {
                    // string errMsg = "Credit Limit Not Found!";
                    //return Json(new { Result = "OK", Record = errMsg });
                    return Json(new { Result = "ERROR" });
                }

                try
                {
                    corpId = Convert.ToInt32(Corp_Key);
                }
                catch { }
                if (corpId > 0)
                {
                    nCondtion = "and Inv_InsId=" + corpId;
                }
                else
                {
                    nCondtion = "";
                }
                DataTable corpLimit = new DataTable();
                corpLimit.TableName = "CorpLimit";
                corpLimit.Columns.Add("InvDate", typeof(DateTime));
                corpLimit.Columns.Add("InvName", typeof(string));
                corpLimit.Columns.Add("Corporate", typeof(string));
                corpLimit.Columns.Add("CorpId", typeof(int));
                corpLimit.Columns.Add("Paymode", typeof(string));
                corpLimit.Columns.Add("InvNo", typeof(int));
                corpLimit.Columns.Add("NetAmt", typeof(double));
                corpLimit.Columns.Add("DiscAmt", typeof(double));
                corpLimit.Columns.Add("GrosAmt", typeof(double));
                corpLimit.Columns.Add("CurRcvd", typeof(double));
                corpLimit.Columns.Add("CurBal", typeof(double));
                corpLimit.Columns.Add("ExceedDays", typeof(int));
                corpLimit.Columns.Add("CrDays", typeof(int));

                DateTime nInvDate = DateTime.Now;
                string nName = "";
                string nCorpNam = "";
                int nInsId = 0;
                string nPaymde = "";
                int nInvNo = 0;
                double nNetamt = 0;
                double nDisc = 0;
                double nGros = 0;
                double nCurRcvd = 0;
                double nCurBal = 0;
                int nExcdDays = 0;
                int nCrDay = 0;
                int CrCount = 0;

                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                int i = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    nInvDate = DateTime.Now;
                    CrCount = 0;
                    nName = "";
                    double curRcvd = 0;
                    nCorpNam = "";
                    nInsId = 0;
                    nPaymde = "";
                    nInvNo = 0;
                    nNetamt = 0;
                    nDisc = 0;
                    nGros = 0;
                    nCurRcvd = 0;
                    nCurBal = 0;
                    nExcdDays = 0;
                    nCrDay = 0;

                    corpLimit.Rows.Add();
                    try
                    {
                        nInvDate = Convert.ToDateTime(dr["Inv_Date"]);
                    }
                    catch { }

                    CrCount = Convert.ToInt32((DateTime.Now - nInvDate).TotalDays);
                    try
                    {
                        //dr["invDate"].ToString()
                        nInvDate = Convert.ToDateTime(dr["invDate"].ToString());
                    }
                    catch { }
                    //dr["invDate"].ToString()
                    nName = dr["Inv_name"].ToString();
                    nCorpNam = dr["AhMst_pName"].ToString();

                    try
                    {
                        nInsId = Convert.ToInt32(dr["Inv_InsId"].ToString());
                    }
                    catch { }
                    nPaymde = dr["Inv_PayMode"].ToString();
                    try
                    {
                        nInvNo = Convert.ToInt32(dr["Inv_No"].ToString());
                    }
                    catch { }

                    try
                    {
                        nNetamt = Convert.ToDouble(dr["Inv_Netamt"].ToString());
                    }
                    catch { }
                    try
                    {
                        nGros = Convert.ToDouble(dr["Inv_GrosAmt"].ToString());
                    }
                    catch { }
                    try
                    {
                        nDisc = Convert.ToDouble(dr["Inv_DiscAmt"].ToString());
                    }
                    catch { }
                    //[Inv_No],[Inv_Date],[Inv_name],[Inv_InsId],[Inv_GrosAmt],[Inv_DiscAmt],[Inv_Schrge],
                    //[Inv_Netamt],[Inv_CurBalAmt],AhMst_pName as corp,AhMst_CRDays,Inv_PayMode
                    try
                    {
                        nCurBal = Convert.ToDouble(dr["Inv_CurBalAmt"].ToString());
                    }
                    catch { }
                    curRcvd = nNetamt - nCurBal;
                    try
                    {
                        nCurRcvd = Convert.ToDouble(curRcvd);
                    }
                    catch { }

                    try
                    {
                        nExcdDays = Convert.ToInt32(CrCount);
                    }
                    catch { }
                    try
                    {
                        nCrDay = Convert.ToInt32(dr["AhMst_CRDays"].ToString());
                    }
                    catch { }

                    // To Report Fields
                    corpLimit.Rows[i]["InvDate"] = nInvDate;
                    corpLimit.Rows[i]["InvName"] = nName;
                    corpLimit.Rows[i]["Corporate"] = nCorpNam;
                    corpLimit.Rows[i]["CorpId"] = nInsId;
                    corpLimit.Rows[i]["Paymode"] = nPaymde;
                    corpLimit.Rows[i]["InvNo"] = nInvNo;
                    corpLimit.Rows[i]["NetAmt"] = nNetamt;
                    corpLimit.Rows[i]["DiscAmt"] = nDisc;
                    corpLimit.Rows[i]["GrosAmt"] = nGros;
                    corpLimit.Rows[i]["CurRcvd"] = nCurRcvd;
                    corpLimit.Rows[i]["CurBal"] = nCurBal;
                    corpLimit.Rows[i]["ExceedDays"] = nExcdDays;
                    corpLimit.Rows[i]["CrDays"] = nCrDay;
                    i++;

                }


                ds.Tables.Add(corpLimit);


                cmd.Connection = sqlcon;
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");
                DataTable dt1 = new DataTable();
                dt1.Columns.Add("DateFrom", typeof(string));
                dt1.Columns.Add("DateTo", typeof(string));
                dt1.Rows.Add();
                dt1.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt1.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //**********************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_CreditLimitStmnt.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_CreditLimitStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFPendngRegister()
        {
            if (brKey > 0)
            {
                if (usrKey > 0)
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegister";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
                else
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegisterAllUsr";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }

            }
            else
            {
                if (usrKey > 0)
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegister";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
                else
                {
                    string fileName = "";
                    fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegisterAllUsr";
                    fileName = fileName + ".pdf";
                    string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                    byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                    return File(FileBytes, "application/pdf");
                }
            }
        }
        public JsonResult PendngRegister(branchdetails pndRegObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = pndRegObj.ff;
                string todatee = pndRegObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double AhMst_Key = 0;
                brnchName = pndRegObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";usrdtls
                List<branchdetails> u = Session["usrdtls"] as List<branchdetails>;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = pndRegObj.BrMst_Name;
                string UsrName = pndRegObj.User_Name;

                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                string nTblOut = "";
                string nRptName = "";
                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                foreach (branchdetails usrs in u)
                {
                    if (usrs.AhMst_pName == UsrName)
                    {
                        AhMst_Key = usrs.AhMst_Key;
                    }

                }
                nTblOut = "PendingReg";
                //nRptName = "rpt_PendingRegister.rpt";
                Head1 = "PENDING REGISTER";
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (AhMst_Key > 0)
                {
                    nCondition = nCondition + " AND Inv_UsrId=" + AhMst_Key + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                //if (BrmstKey > 0)
                //{
                //    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                //}
                if (BrmstKey > 0)
                {
                    if (AhMst_Key > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegister";
                        brKey = (int)BrmstKey;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingRegisterAllUsr";
                        brKey = 0;
                    }

                }
                else
                {
                    if (AhMst_Key > 0)
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegister";
                        brKey = 0;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingRegisterAllUsr";
                        brKey = 0;
                    }

                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                            "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                            "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                            "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,BrMst_Name " +
                            "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                            "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key LEFT JOIN Baranches_Mst On Inv_BrId=BrMst_Key " +
                            "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                else
                {
                    sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No,dbo.Invoice_Mst.Inv_phno, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                           "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName, " +
                           "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,  " +
                           "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time,AccountHeads_Mst_3.AhMst_pName AS Corporate, " +
                           "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                           "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,BrMst_Name " +
                           "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +

                           "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                           "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key LEFT JOIN Baranches_Mst On Inv_BrId=BrMst_Key " +
                           "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CurBalAmt <> 0  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition + " And dbo.Invoice_Mst.Inv_PayMode='Cash'";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PendingRegister.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PendingRegister.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult pndReg2View(branchdetails pndReg2Obj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();

                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string fromdatee = pndReg2Obj.ff;
                string todatee = pndReg2Obj.tt;
                string Usr_Name = "";
                double Usr_EmpId = 0;
                Usr_Name = pndReg2Obj.User_Name;
                Usr_EmpId = pndReg2Obj.Usr_EmpId;
                string nCondition = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = pndReg2Obj.rowCount;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                string YearTemp = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*****************************************************************************************
                DateTime dateto = todate;
                DateTime datefrom = fromdate;
                DateTime dtp_from = new DateTime();
                dtp_from = fromdate;
                String days = (dateto - datefrom).TotalDays.ToString();
                double y = Convert.ToDouble(days);
                int a = 0;
                a = Convert.ToInt32(Math.Round(y)) + 1;
                int tmprow = 0;
                for (int i = 1; i <= a; i++)
                {

                    SqlCommand sqlcmd01 = new SqlCommand();
                    SqlCommand sqlcmd02 = new SqlCommand();
                    sqlcmd01.Connection = sqlcon;
                    sqlcmd01.CommandType = CommandType.Text;
                    sqlcmd02.Connection = sqlcon;
                    sqlcmd02.CommandType = CommandType.Text;

                    // sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance FROM Invoice_Mst WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt";
                    if (Usr_EmpId >= 0)
                    {
                        if (Usr_EmpId >= 0)
                        {
                            nCondition = nCondition + " AND Inv_CltnID=" + Usr_EmpId + "";
                        }
                    }

                    if (Usr_EmpId == 0)
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";

                    }

                    else
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "'  AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                        //  sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + cmbxUser.SelectedValue + "'  AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                    }
                    SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd01);
                    DataSet ds0 = new DataSet();
                    DataTable dt = new DataTable();
                    sd0.Fill(dt);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            try
                            {
                                DateTemp = Convert.ToDateTime(dr["InvDate"]);
                            }
                            catch { }
                            YearTemp = DateTemp.ToString("dd-MMM-yyyy");

                            collectionDetails cs1 = new collectionDetails()
                            {
                                Inv_Date = YearTemp,
                                Inv_User = dr["Inv_User"].ToString(),
                                Inv_No = dr["labno"].ToString(),
                                Inv_name = dr["InvName"].ToString(),
                                Inv_Netamt = dr["NetAmt"].ToString(),
                                balance = Convert.ToDouble(dr["Balance"]),
                                ReceivedAmt = dr["Received"].ToString(),
                                Inv_RcvdAmt = dr["Inv_RcvdAmt"].ToString(),
                                PendCollAmt = dr["PendCollAmt"].ToString()
                            };
                            cls.Add(cs1);
                            //************************************************************************
                            tmprow += 1;
                        }
                    }
                    dtp_from = dtp_from.AddDays(+1);
                }
                return Json(new { Result = "OK", Record = cls });
                ////************************************
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFPendngRegPrint()
        {

            string fileName = "";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult PendngRegPrint(branchdetails pndReg2PrntObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                SqlCommand cmd1 = new SqlCommand();
                DataTable DailyColl = new DataTable();
                DailyColl.TableName = "Collection Pending";
                DailyColl.Columns.Add("InvDate", typeof(DateTime));
                DailyColl.Columns.Add("User", typeof(string));
                DailyColl.Columns.Add("LabNo", typeof(int));
                DailyColl.Columns.Add("InvName", typeof(string));
                DailyColl.Columns.Add("NetAmount", typeof(float));
                DailyColl.Columns.Add("Inv_RcvdAmt", typeof(float));
                DailyColl.Columns.Add("PendCollAmt", typeof(float));
                DailyColl.Columns.Add("ReceivedAmt", typeof(float));
                DailyColl.Columns.Add("BalanceAmt", typeof(float));
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Nfile_name = "";
                string fromdatee = pndReg2PrntObj.ff;
                string todatee = pndReg2PrntObj.tt;
                string Usr_Name = "";
                double Usr_EmpId = 0;
                Usr_Name = pndReg2PrntObj.User_Name;
                Usr_EmpId = pndReg2PrntObj.Usr_EmpId;
                string nCondition = "";
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[0] + "/" + dateString[1] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[0] + "/" + dateString2[1] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                int rowcount = pndReg2PrntObj.rowCount;
                string qry = "";
                string condition = "";
                string frmDate = "";
                string toDate = "";
                string YearTemp = "";
                frmDate = fromdate.ToString("MM-dd-yyyy");
                toDate = todate.ToString("MM-dd-yyyy");
                //*****************************************************************************************
                DateTime dateto = todate;
                DateTime datefrom = fromdate;
                DateTime dtp_from = new DateTime();
                dtp_from = fromdate;
                String days = (dateto - datefrom).TotalDays.ToString();
                double y = Convert.ToDouble(days);
                int a = 0;
                a = Convert.ToInt32(Math.Round(y)) + 1;
                int tmprow = 0;
                for (int i = 1; i <= a; i++)
                {

                    SqlCommand sqlcmd01 = new SqlCommand();
                    SqlCommand sqlcmd02 = new SqlCommand();
                    sqlcmd01.Connection = sqlcon;
                    sqlcmd01.CommandType = CommandType.Text;
                    sqlcmd02.Connection = sqlcon;
                    sqlcmd02.CommandType = CommandType.Text;
                    DailyColl.Rows.Add();
                    // sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance FROM Invoice_Mst WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt";
                    // "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2"
                    if (Usr_EmpId >= 0)
                    {
                        nCondition = nCondition + " AND Inv_CltnID=" + Usr_EmpId + "";
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
                        usrKey = (int)Usr_EmpId;
                        usrName = Usr_Name;
                    }
                    else
                    {
                        Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "PendingRegister2";
                        usrKey = 0;
                        usrName = "";
                    }

                    if (Usr_EmpId == 0)
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";

                    }

                    else
                    {
                        sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "'  AND Invoice_Mst.Inv_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + CompanyId + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_from.ToShortDateString() + "' AND PndC_Date<='" + dtp_from.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + Usr_EmpId + "' AND Inv_date  = '" + dtp_from.ToShortDateString() + "' AND  PndC_Date = '" + dtp_from.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + YearId + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                        //  sqlcmd01.CommandText = "SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,Inv_RcvdAmt,0 As PendCollAmt, Inv_RcvdAmt AS Received, (Inv_Netamt-Inv_RcvdAmt) As Balance,Usr_Name As Inv_User  FROM Invoice_Mst LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' and Inv_UsrId= '" + cmbxUser.SelectedValue + "'  AND Invoice_Mst.Inv_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND  dbo.Invoice_Mst.Inv_BalAmt <> 0 AND inv_cpyid=" + cmid + " AND Inv_Status<>-1 AND Inv_No not In (SELECT PndC_Labno FROM PendingCollections WHERE PndC_Date>='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Date<='" + dtp_date.Value.ToShortDateString() + "' AND PndC_Cancld<>1) UNION SELECT Invoice_Mst.Inv_No AS labno ,Invoice_Mst.Inv_name as InvName ,Invoice_Mst.Inv_Date As InvDate, Invoice_Mst.Inv_Netamt As NetAmt,ISNULL(Inv_RcvdAmt,0) As Inv_RcvdAmt,Sum(PndC_Amount) as PendCollAmt, (Inv_RcvdAmt+SUM(PndC_Amount)) AS Received, (Inv_Netamt- (Inv_RcvdAmt+SUM(PndC_Amount))) AS Balance,Usr_Name As Inv_User  FROM Invoice_Mst  left JOIN PendingCollections  ON inv_no=PndC_Labno and inv_yrid=PndC_YrId and inv_cpyid=PndC_CpyId  LEFT JOIN Users ON  Inv_UsrId=Usr_EmpId WHERE Invoice_Mst.Inv_PayMode = 'Cash' AND Inv_date  = '" + dtp_date.Value.ToShortDateString() + "' AND  PndC_Date = '" + dtp_date.Value.ToShortDateString() + "' AND Invoice_Mst.Inv_YrId = " + yid + "  AND (inv_rcvdAmt+PndC_Amount)<Inv_Netamt AND Inv_Status<>-1 AND PndC_Cancld<>1  Group By Invoice_Mst.Inv_No ,Invoice_Mst.Inv_name,Inv_Date, Invoice_Mst.Inv_Netamt ,Inv_RcvdAmt,Usr_Name";
                    }
                    SqlDataAdapter sd0 = new SqlDataAdapter(sqlcmd01);
                    DataSet ds0 = new DataSet();
                    DataTable dt1 = new DataTable();
                    sd0.Fill(dt1);


                    if (dt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt1.Rows)
                        {
                            try
                            {
                                DateTemp = Convert.ToDateTime(dr["InvDate"]);
                            }
                            catch { }
                            YearTemp = DateTemp.ToString("dd-MMM-yyyy");

                            collectionDetails cs1 = new collectionDetails()
                            {
                                Inv_Date = YearTemp,
                                Inv_User = dr["Inv_User"].ToString(),
                                Inv_No = dr["labno"].ToString(),
                                Inv_name = dr["InvName"].ToString(),
                                Inv_Netamt = dr["NetAmt"].ToString(),
                                balance = Convert.ToDouble(dr["Balance"]),
                                ReceivedAmt = dr["Received"].ToString(),
                                Inv_RcvdAmt = dr["Inv_RcvdAmt"].ToString(),
                                PendCollAmt = dr["PendCollAmt"].ToString()
                            };
                            cls.Add(cs1);
                            //************************************************************************
                            tmprow += 1;
                        }
                    }
                    dtp_from = dtp_from.AddDays(+1);
                }
                int nDtRow = 0;
                DailyColl.Rows.Clear();
                foreach (collectionDetails item in cls)
                {
                    DateTime InvDate = DateTime.Now;
                    string User = "";
                    int LabNo = 0;
                    string name = "";
                    double Netamt = 0;
                    double invRcvd = 0;
                    double pendng = 0;
                    double Recvdamt = 0;
                    double Balance = 0;


                    DailyColl.Rows.Add();
                    //*******************************************************
                    try
                    {
                        InvDate = Convert.ToDateTime(item.Inv_Date);

                    }
                    catch { }
                    try
                    {
                        User = item.Inv_User;

                    }
                    catch { }
                    try
                    {
                        LabNo = Convert.ToInt32(item.Inv_No);

                    }
                    catch { }
                    try
                    {
                        name = item.Inv_name;

                    }
                    catch { }
                    try
                    {
                        Netamt = Convert.ToDouble(item.Inv_Netamt);
                    }
                    catch { }
                    try
                    {
                        invRcvd = Convert.ToDouble(item.Inv_RcvdAmt);
                    }
                    catch { }
                    try
                    {
                        pendng = Convert.ToDouble(item.PendCollAmt);

                    }
                    catch { }
                    try
                    {
                        Recvdamt = Convert.ToDouble(item.ReceivedAmt);

                    }
                    catch { }
                    try
                    {
                        Balance = Convert.ToDouble(item.balance);

                    }
                    catch { }

                    //*************************************************************
                    DailyColl.Rows[nDtRow]["InvDate"] = InvDate;
                    DailyColl.Rows[nDtRow]["User"] = User;
                    DailyColl.Rows[nDtRow]["LabNo"] = LabNo;
                    DailyColl.Rows[nDtRow]["InvName"] = name;
                    DailyColl.Rows[nDtRow]["NetAmount"] = Netamt;
                    DailyColl.Rows[nDtRow]["Inv_RcvdAmt"] = invRcvd;
                    DailyColl.Rows[nDtRow]["PendCollAmt"] = pendng;
                    DailyColl.Rows[nDtRow]["ReceivedAmt"] = Recvdamt;
                    DailyColl.Rows[nDtRow]["BalanceAmt"] = Balance;

                    nDtRow += 1;
                }
                string head1 = "";
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sda = new SqlDataAdapter();
                DataSet ds1 = new DataSet();
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sda = new SqlDataAdapter(cmd0);
                sda.Fill(ds1, "Company_Mst");
                ds1.Tables.Add(DailyColl);
                string filepath = "";
                ReportDocument reportDocument = new ReportDocument();
                head1 = "FROM  " + fromdate.ToString("dd/MM/yyy") + "  To  " + todate.ToString("dd/MM/yyy");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = head1;
                ds1.Tables.Add(dt);
                //************************************************************************************************
                reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Pendgregstr.rpt");
                ds1.WriteXmlSchema(Reportfilepaths + "rpt_Pendgregstr.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds1);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error--" + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFPndClctnReg()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingCollectionRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingCollectionRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult PndClctnReg(branchdetails crCardWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = crCardWiseObj.ff;
                string todatee = crCardWiseObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                string nTblOut = "";
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = crCardWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";
                nTblOut = "PendingColtn";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = crCardWiseObj.BrMst_Name;
                Head1 = "PENDING COLLECTION REGISTER";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "PendingCollectionRegister";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "PendingCollectionRegister";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                            "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                            "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                            "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                            "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                            "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                            "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate  " +
                            "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                            "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND B.Inv_CpyId = " + BrmstKey + nCondition;

                }
                else
                {
                    sqlStr = "SELECT A.PndC_Key, A.PndC_Labno, A.PndC_Date,A.PndC_Amount, A.PndC_TimeSmp, A.PndC_Cancld, B.Inv_No, B.Inv_IsInsrnce,  B.Inv_PntId,A.PndC_InvPaymode, " +
                           "B.Inv_PntInvId, B.Inv_name, B.Inv_Gender, B.Inv_age,  B.Inv_ageymd, B.Inv_phno, B.Inv_Address, B.Inv_SmplDate,  B.Inv_RsltNO,  " +
                           "B.Inv_BrID, B.Inv_Date, B.Inv_time, B.Inv_InsId,  B.Inv_AreaId, B.Inv_EmailtoPatient, B.Inv_Email, B.Inv_EtoDr,  B.Inv_DrId, " +
                           "B.Inv_OutDr, B.Inv_hospId, B.Inv_Schrge, B.Inv_DiscId,  B.Inv_CltnID, B.Invl_DiscPer, B.Inv_RepTime, B.Inv_GrosAmt,  B.Inv_DiscAmt,  " +
                           "B.Inv_OthAmt, B.Inv_Netamt, B.Inv_RcvdAmt,  B.Inv_BalAmt, B.Inv_Comment, B.Inv_CmpltdDate, B.Inv_CmpltdTime,  B.Inv_OthCmnt,  " +
                           "B.Inv_User, B.Invl_IsPending, B.Inv_Status,  B.Inv_CnlComnt, B.Inv_Cnltmestmp, B.Inv_CurRcvdAmt, B.Inv_CurBalAmt,   " +
                           "A.PndC_Cancld AS Expr1, A.PndC_UsrId, A.PndC_YrId,  A.PndC_CpyId, A.PndC_Updtd,Ahmst.Ahmst_Pname As corporate   " +
                           "FROM dbo.PendingCollections A WITH (NOLOCK) LEFT OUTER JOIN dbo.Invoice_Mst B WITH (NOLOCK) ON A.PndC_YrId = B.Inv_YrId AND A.PndC_CpyId = B.Inv_CpyId AND  A.PndC_Labno = B.Inv_No LEFt JOIN AccountHeads_Mst Ahmst ON B.Inv_InsID=Ahmst.Ahmst_key WHERE  " +
                           "(A.PndC_Cancld <> 1) AND PndC_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND PndC_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + nCondition;

                }


                //         //-- B.BrMst_Code, B.BrMst_Name, B.Insurance, B.PatientName,  B.DrName, B.HospName, B.CollectionStaff, B.AraMst_Name,  B.DscRsnMst_Reason,  ";
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, DA.Common.myConnectionVM);
                //sDa.Fill(dtDetails);
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_PendingCollectionReg.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_PendingCollectionReg.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult srchDocWithname(string term)
        {

            try
            {
                List<Stproc_SEARCH_DOCTR_WITH_NAME_Result> t = new List<Stproc_SEARCH_DOCTR_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_DOCTR_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult srchDocWithKey(string term)
        {

            try
            {
                List<Stproc_SRCH_DCTR_WITH_KEY_Result> t = new List<Stproc_SRCH_DCTR_WITH_KEY_Result>();
                t = db.Stproc_SRCH_DCTR_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult srchDocWithCode(string term)
        {

            try
            {
                List<Stproc_SRCH_DCTR_WITH_KEY_Result> t = new List<Stproc_SRCH_DCTR_WITH_KEY_Result>();
                t = db.Stproc_SRCH_DCTR_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFDoctorWiseColln()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DoctorWiseColln(branchdetails dcWsClcnObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int AhMst_Key = 0;
                string frmdate = "";
                string toDate = "";
                string filepath = "";
                string AhMst_DrCode = "";
                string AhMst_pName = "";
                string Nfile_name = "";
                double? YearId = l.Yr_Id;
                double BrMstKey = 0;

                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;

                string BrMst_Name = l.BrMst_Name;
                //*********************************
                List<collectionDetails> cls = new List<collectionDetails>();
                DateTime DateTemp = DateTime.Now;
                string sCondition = "";
                SqlConnection sqlcon = new SqlConnection();
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd0 = new SqlCommand();
                SqlCommand cmd1 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter(cmd0);
                DataSet ds0 = new DataSet();
                BrMstKey = dcWsClcnObj.BrMstKey;
                string fromdatee = dcWsClcnObj.ff;
                string todatee = dcWsClcnObj.tt;
                string BrmstName = "";
                if (dcWsClcnObj.BrMst_Name != null)
                {
                    BrmstName = dcWsClcnObj.BrMst_Name;
                }
                //**********************
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds = new DataSet();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorWiseCollection";

                try
                {
                    AhMst_Key = Convert.ToInt32(dcWsClcnObj.AhMst_Key);
                }
                catch { }
                try
                {
                    frmdate = fromdate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    toDate = todate.ToString("yyyy-MM-dd");
                }
                catch { }
                try
                {
                    AhMst_DrCode = dcWsClcnObj.AhMst_DrCode;
                }
                catch { }
                try
                {
                    AhMst_pName = (dcWsClcnObj.AhMst_pName).ToString();
                }
                catch { }
                if (BrMstKey > 0)
                {

                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CorporateTestPerfomance";
                    brKey = (int)BrMstKey;

                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "CorporateTestPerfomance";
                    brKey = 0;

                }
                //*******************BrMstKey*********************************
                if (AhMst_Key > 0)
                {
                    sCondition = "AhMst_Type='Doctor' AND  AhMst_IsActive=1 AND Ahmst_Key in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + AhMst_Key + ") ";
                }
                else
                {
                    sCondition = "AhMst_Type='Doctor' AND  AhMst_IsActive=1";
                }
                if (BrMstKey > 0)
                {

                    cmd0.CommandText = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt,A.Inv_CpyId," +
                           "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,c.AhMst_pName AS corporate,BrMst_Name,A.Inv_BrId " +
                           "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                           "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                          " left join dbo.AccountHeads_Mst c WITH(NOLOCK) ON A.Inv_InsId = c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and A.Inv_YrId = " + YearId + "" +
                          "LEFT JOIN dbo.Baranches_Mst WITH(NOLOCK) ON A.Inv_BrId=BrMst_Key " +
                           "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                           "AND A.Inv_Status <> - 1 AND A.Inv_BrId = " + BrMstKey + " AND A.Inv_YrId = " + YearId + " AND Inv_DrId=" + AhMst_Key + " ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";


                    cmd1.CommandText = "SELECT InvDet.*,c.AHMST_PNAME AS CORPORATE FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN AccountHeads_Mst C ON Inv_InsId = c.AhMst_Key  " +
                                       " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_BrId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;





                }
                else
                {

                    cmd0.CommandText = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt,A.Inv_CpyId," +
                                    "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,B.AhMst_pName AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,c.AHMST_PNAME AS CORPORATE,[BrMst_Name],A.Inv_BrId " +
                                    "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                                    "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' LEFT JOIN dbo.AccountHeads_Mst C ON Inv_InsId =c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and A.Inv_YrId = " + YearId + "" +
                                    "LEFT JOIN dbo.Baranches_Mst WITH(NOLOCK)ON A.Inv_BrId = BrMst_Key " +
                                    "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                      "AND A.Inv_Status <> - 1  AND A.Inv_YrId = " + YearId + " AND Inv_DrId=" + AhMst_Key + " ORDER BY A.Inv_Date,A.Inv_UsrId,B.AhMst_pName";


                    cmd1.CommandText = "SELECT InvDet.*,c.AHMST_PNAME AS CORPORATE FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN dbo.AccountHeads_Mst C ON Inv.Inv_InsId =c.AhMst_Key and c.AhMst_Type = 'AccHd' and c.AhMst_IsActive = 1 and Inv.Inv_YrId = " + YearId + "  " +
                                   " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;



                }
                sd0.Fill(ds0, "dtDetails");
                if (BrMstKey > 0)
                {

                    cmd0.CommandText = "SELECT InvDet.*,Tst.TstMst_name FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN  Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key" +
                                       " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;



                }
                else
                {
                    cmd0.CommandText = "SELECT InvDet.*,Tst.TstMst_name FROM Invoice_Mst Inv LEFT JOIN  Invoice_Det InvDet On Inv.Inv_No=InvDet.InvItm_Invno AND Inv.Inv_YrId=InvDet.InvItm_YrId AND Inv.Inv_CpyId=InvDet.InvItm_CpyId LEFT JOIN  Test_Mst Tst ON InvDet.InvItm_TstId=Tst.TstMst_Key " +
                                   " WHERE Inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND Inv.Inv_YrId = " + YearId + " AND Inv.Inv_CpyId = " + BrMstKey + "  AND Inv.Inv_Status <> - 1  AND Inv.Inv_DrId=" + AhMst_Key;
                }
                sd0.Fill(ds0, "dtInvTestDet");
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0);
                sd0.Fill(ds0, "Company_Mst");
                string Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                //  string DateBetween = dtpFrom.Value.ToString("dd/MM/yyyy") + " - " + dtpTo.Value.ToString("dd/MM/yyyy");


                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Columns.Add("CheqIssue", typeof(float));
                dt.Columns.Add("CheqRec", typeof(float));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = BrmstName.Trim();
                dt.Rows[0]["Reporthead"] = "";

                dt.Rows[0]["CheqIssue"] = 0;
                dt.Rows[0]["CheqRec"] = 0;


                ds0.Tables.Add(dt);
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DrwiseInvoices2.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DrwiseInvoices2.xsd");
                //******************************* 
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public FileResult PDFDoctorPerfomance()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DoctorPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DoctorPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult DoctorPerfomance(branchdetails dcPfmncObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = dcPfmncObj.ff;
                string todatee = dcPfmncObj.tt;
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                double AhMst_Key = 0;
                brnchName = dcPfmncObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";usrdtls
                List<branchdetails> u = Session["usrdtls"] as List<branchdetails>;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = dcPfmncObj.BrMst_Name;
                string UsrName = dcPfmncObj.User_Name;
                BrmstKey = dcPfmncObj.BrMst_Key;
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                string nTblOut = "";
                string nRptName = "";
                nTblOut = "PendingReg";
                //nRptName = "rpt_PendingRegister.rpt";
                Head1 = "DOCTORS PERFORMANCE";
                if (BrmstKey > 0)
                {
                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "DoctorPerfomance";
                    brKey = (int)BrmstKey;
                }

                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "DoctorPerfomance";
                    brKey = 0;
                }


                //*************************************************************************************************
                if (BrmstKey > 0)
                {
                    if (ProUserId > 0)
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                         "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                         "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                         "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                         "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                         "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                         "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                         "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND dbo.Invoice_Mst.Inv_DrId!=0 AND dbo.Invoice_Mst.Inv_DrId in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + ProUserId + ") AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;

                    }
                    else
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                                "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                                "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                                "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                                "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                                "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                                "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                                "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                                "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                "AND dbo.Invoice_Mst.Inv_DrId!=0 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;
                    }
                }
                else
                {
                    if (BincDta == 0)
                    {
                        sqlStr = "SELECT  dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                              "AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, " +
                              "dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                              "dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                              "dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                              "dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode " +
                              "FROM dbo.Invoice_Mst WITH (NOLOCK) LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN " +
                              "dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                              "dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +
                              "WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                              "AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId;
                    }
                    else
                    {
                        if (ProUserId > 0)
                        {
                            sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode FROM CARE011112.dbo.Invoice_Mst WITH (NOLOCK)LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE011112.dbo.Masters WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                + " AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + Environment.NewLine
                          + " UNION " + Environment.NewLine
                              + " SELECT Inv_No, Inv_Date, Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS Insurance, Inv_PntInvId, Inv_PntId, Inv_GrosAmt, Inv_InsNo, Inv_OutDr, Inv_DrId, Inv_User, Inv_time, Inv_DiscAmt, Inv_OthAmt, Inv_Netamt, Inv_RcvdAmt, Inv_CurRcvdAmt, Inv_CurBalAmt, Inv_BalAmt, Inv_PayMode FROM CARE021112.dbo.Invoice_Mst WITH(NOLOCK)  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE021112.dbo.Masters WITH(NOLOCK) ON Inv_DiscId = Masters.Mstr_Key WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                               + " AND Inv_DrId!=0 AND Inv_DrId in(select SetCorp_CorpId from SetDoctor_Staff where SetCorp_StaffId=" + ProUserId + ") AND Inv_Status!=-1 AND  Inv_YrId = " + nYrId + " ORDER BY DrName";
                        }
                        else
                        {
                            sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance, dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_PayMode FROM CARE011112.dbo.Invoice_Mst WITH (NOLOCK)LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE011112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE011112.dbo.Masters WITH(NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key WHERE dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                 + " AND dbo.Invoice_Mst.Inv_DrId!=0  AND dbo.Invoice_Mst.Inv_Status!=-1 AND  dbo.Invoice_Mst.Inv_YrId = " + nYrId + " " + Environment.NewLine
                           + " UNION " + Environment.NewLine
                               + " SELECT Inv_No, Inv_Date, Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, AccountHeads_Mst_2.AhMst_pName AS DrName, AccountHeads_Mst_3.AhMst_pName AS Insurance, Inv_PntInvId, Inv_PntId, Inv_GrosAmt, Inv_InsNo, Inv_OutDr, Inv_DrId, Inv_User, Inv_time, Inv_DiscAmt, Inv_OthAmt, Inv_Netamt, Inv_RcvdAmt, Inv_CurRcvdAmt, Inv_CurBalAmt, Inv_BalAmt, Inv_PayMode FROM CARE021112.dbo.Invoice_Mst WITH(NOLOCK)  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH(NOLOCK) ON Inv_DrId = AccountHeads_Mst_2.AhMst_Key  LEFT OUTER JOIN CARE021112.dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH(NOLOCK) ON Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN CARE021112.dbo.Masters WITH(NOLOCK) ON Inv_DiscId = Masters.Mstr_Key WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                                + " AND Inv_DrId!=0  AND Inv_Status!=-1 AND  Inv_YrId = " + nYrId + " ORDER BY DrName";
                        }

                    }
                }
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, DA.Common.myConnectionVM);
                //sDa.Fill(dtDetails);
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dsPrint, "InvoiceMst_View");
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DrPerformance.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DrPerformance.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFDoctrSplzdList()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "DoctorSpecializedList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult DoctrSplzdList(branchdetails DrSplzdObj)
        {
            int Id = 0;
            string Nfile_name = "";

            string nCondition = "";
            string[] checkedSplzd = DrSplzdObj.checkedSplzd;
            string[] checkedSplzdId = DrSplzdObj.checkedSplzdId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedSplzdId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedSplzdId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedSplzdId[i]).ToString();
                }
            }
            if (nCondition != "")
            {
                nCondition = " AND Ahmst.AhMst_SplID IN(" + nCondition + ")";
            }
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = DrSplzdObj.ff;
                string todatee = DrSplzdObj.tt;
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "DoctorSpecializedList";
                //****************************************************
                sqlStr = "select Ahmst.*,Mst.Mstr_Desc from AccountHeads_Mst Ahmst LEFT JOIN Masters Mst ON Ahmst.AhMst_SplID=Mstr_Key WHERE AhMst_Type='DOCTOR'   " + nCondition;

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                Head1 = "Doctor Specialised List";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                Head3 = BrMst_Name;
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);
                //****************************************************

                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorSpecilized.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_DoctorSpecilized.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public JsonResult SrchHospWithName(string term)
        {

            try
            {
                List<Stproc_SEARCH_HOSP_WITH_NAME_Result> t = new List<Stproc_SEARCH_HOSP_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_HOSP_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchHospWithKey(string term)
        {

            try
            {
                List<Stproc_SEARCH_HOSP_WITH_KEY_Result> t = new List<Stproc_SEARCH_HOSP_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_HOSP_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFHospWiseDocList()
        {
            string hospName = "";
            hospName = HospitalName;
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + hospName + "_" + "HospitalWiseDoctorList";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult HospWiseDocList(branchdetails HosWiseDocObj)
        {
            int Id = 0;
            string Nfile_name = "";
            string nCondition = "";
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string fromdatee = HosWiseDocObj.ff;
                //string todatee = HosWiseDocObj.tt;
                //string[] dateString = fromdatee.Split('/');
                //DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string[] dateString2 = todatee.Split('/');
                //DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                //todate = todat;
                //fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                HospitalName = HosWiseDocObj.AhMst_pName;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                Nfile_name += "Report_" + HospitalName + "_" + "HospitalWiseDoctorList";
                //****************************************************
                int Docid = 0;
                try
                {
                    Docid = Convert.ToInt32(HosWiseDocObj.AhMst_Key);
                }
                catch { }
                if (Docid != 0)
                {
                    //cmd0.CommandText = "select AccountHeads_Mst.[AhMst_Key], AccountHeads_Mst.[AhMst_pName],AccountHeads_Mst.[AhMst_mobile],AccountHeads_Mst.[AhMst_Address] ,ah.[AhMst_pName] as Hospital  from AccountHeads_Mst left join AccountHeads_Mst ah on AccountHeads_Mst.[AhMst_HosId]=ah.[AhMst_Key] where   AccountHeads_Mst.[AhMst_HosId]=" + Docid + " and AccountHeads_Mst.[AhMst_IsActive]=1";
                    cmd0.CommandText = "select [dbo].[AccountHeads_Mst].[AhMst_Key],[dbo].[AccountHeads_Mst].[AhMst_mobile],[dbo].[AccountHeads_Mst].[AhMst_Address] ,[dbo].[AccountHeads_Mst].[AhMst_pName],[dbo].[AccountHeads_Mst].AhMst_HosId ,ah.[AhMst_pName]as Hosp,mst.Mstr_Desc As Specialized,[dbo].[AccountHeads_Mst].AhMst_Email,[dbo].[AccountHeads_Mst].AhMst_DefltAddress,[dbo].[AccountHeads_Mst].AhMst_HospAddress  from [dbo].[AccountHeads_Mst]  left join [dbo].[AccountHeads_Mst] ah on ah.[AhMst_Key]=[dbo].[AccountHeads_Mst].AhMst_HosId LEFT JOIN Masters mst On [dbo].[AccountHeads_Mst].AhMst_SplID=mst.Mstr_Key where [dbo].[AccountHeads_Mst].[AhMst_Type]='Doctor' and  [dbo].[AccountHeads_Mst].[AhMst_IsActive]=1 and  [dbo].[AccountHeads_Mst].[AhMst_HosId]=" + Docid + "";
                }
                else
                {
                    cmd0.CommandText = "select [dbo].[AccountHeads_Mst].[AhMst_Key],[dbo].[AccountHeads_Mst].[AhMst_mobile],[dbo].[AccountHeads_Mst].[AhMst_Address] ,[dbo].[AccountHeads_Mst].[AhMst_pName],[dbo].[AccountHeads_Mst].AhMst_HosId ,ah.[AhMst_pName]as Hosp,mst.Mstr_Desc As Specialized,[dbo].[AccountHeads_Mst].AhMst_Email,[dbo].[AccountHeads_Mst].AhMst_DefltAddress,[dbo].[AccountHeads_Mst].AhMst_HospAddress   from [dbo].[AccountHeads_Mst]  left join [dbo].[AccountHeads_Mst] ah on ah.[AhMst_Key]=[dbo].[AccountHeads_Mst].AhMst_HosId LEFT JOIN Masters mst On [dbo].[AccountHeads_Mst].AhMst_SplID=mst.Mstr_Key where [dbo].[AccountHeads_Mst].[AhMst_Type]='Doctor' and  [dbo].[AccountHeads_Mst].[AhMst_IsActive]=1 and  [dbo].[AccountHeads_Mst].[AhMst_HosId]!=" + Docid + "";

                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Hospital");
                Head3 = "HOSPITAL WISE DOCTORS LIST";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Columns.Add("CheqIssue", typeof(float));
                dt.Columns.Add("CheqRec", typeof(float));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = "";
                dt.Rows[0]["Reporthead"] = Head3;

                dt.Rows[0]["CheqIssue"] = 0;
                dt.Rows[0]["CheqRec"] = 0;


                ds0.Tables.Add(dt);
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "Company_Mst");
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctorHospital.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctorHospital.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFDoctrEnvelop()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + "DoctorsEnvelop";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        [HttpPost]
        public JsonResult DoctrsEnvelop(branchdetails DrEnvlpObj)
        {
            int Id = 0;
            string Nfile_name = "";
            string spl = "";
            string nCondition = "";
            string[] checkedDrId = DrEnvlpObj.checkedDctrId;
            string[] checkedDrName = DrEnvlpObj.checkedDctr;

            string[] checkedDrSplzd = DrEnvlpObj.checkedSplzd;
            string[] checkedDrSplzdId = DrEnvlpObj.checkedSplzdId;

            logindetails l = Session["logindls"] as logindetails;
            for (int i = 0; i < checkedDrId.Count(); i++)
            {
                if (nCondition == "")
                {
                    nCondition += (checkedDrId[i]).ToString();
                }
                else
                {
                    nCondition += "," + (checkedDrId[i]).ToString();
                }
            }
            for (int i = 0; i < checkedDrSplzdId.Count(); i++)
            {
                if (spl == "")
                {
                    spl += (checkedDrSplzdId[i]).ToString();
                }
                else
                {
                    spl += "," + (checkedDrSplzdId[i]).ToString();
                }
            }
            //if (nCondition != "")
            //{
            //    nCondition = " AND Ahmst.AhMst_SplID IN(" + nCondition + ")";
            //}
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //string fromdatee = DrSplzdObj.ff;
                //string todatee = DrSplzdObj.tt;
                //string[] dateString = fromdatee.Split('/');
                //DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                //string[] dateString2 = todatee.Split('/');
                //DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                //fromdate = fromdat;
                DataSet dsPrint = new DataSet();
                DataTable dtDetails = new DataTable();
                DataTable dTitle = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                //todate = todat;
                //fdt = fromdate.ToString("ddMMyyyy");
                //tdt = todate.ToString("ddMMyyyy");
                Br_Name = BrMst_Name;
                string filepath = "";
                DataSet ds0 = new DataSet();
                string sqlStr = "";
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa = new SqlDataAdapter();
                SqlCommand cmd0 = new SqlCommand();
                DateTime NowDate = DateTime.Now;
                string datestring = NowDate.ToString("ddmmyyyyy");
                fdt = datestring;
                //***********************************
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                Nfile_name += "Report_" + fdt + "_" + "DoctorsEnvelop";
                //****************************************************
                if (nCondition != "")
                {
                    nCondition = "  and AhMst_Key in (" + nCondition + ")";

                    cmd0.CommandText = "select ah.AhMst_pName,ah.AhMst_Ismale,ah.AhMst_drEdDet,ah.AhMst_Phno,ah.AhMst_mobile,ah.AhMst_Email,ah.AhMst_Address,ah.AhMst_Key,ah.AhMst_SplID,mst.Mstr_Desc, mst.Mstr_Key    from [dbo].[AccountHeads_Mst] ah left join Masters mst on ah.AhMst_SplID = mst.Mstr_Key where  AhMst_Type = 'Doctor' and   AhMst_IsActive=1 " + nCondition + " order by AhMst_SplID,AhMst_pName ";
                    // cmd0.CommandText = "select ah.AhMst_pName,ah.AhMst_Ismale,ah.AhMst_drEdDet,ah.AhMst_Phno,ah.AhMst_mobile,ah.AhMst_Email,Case WHEN Ah.AhMst_DefltAddress='1' then ah.AhMst_HospAddress else   ah.AhMst_Address END as AhMst_Address ,ah.AhMst_Key,ah.AhMst_SplID,mst.Mstr_Desc, mst.Mstr_Key    from [dbo].[AccountHeads_Mst] ah left join Masters mst on ah.AhMst_SplID = mst.Mstr_Key where  AhMst_Type = 'Doctor' and   AhMst_IsActive=1 " + spl + " order by AhMst_SplID,AhMst_pName ";
                }
                //****************************************************
                SqlDataAdapter sd0 = new SqlDataAdapter();
                ds0 = new DataSet();
                try
                {
                    sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                    sd0.Fill(ds0, "DoctrsEnvelop");
                }
                catch { }
                cmd0 = new SqlCommand("SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)", sqlcon);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "[dbo]_[Company_Mst]");

                Head3 = "DoctrsEnvelop";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));

                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = "";
                dt.Rows[0]["Branch"] = "";
                dt.Rows[0]["Reporthead"] = Head3;

                //rpt_CollectnStmnt_BranchWise
                ds0.Tables.Add(dt);
                //****************************************************
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_DoctrsEnvelop.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_DoctrsEnvelop.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + CompanyId.ToString() + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }

                sqlcon.Close();
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
            return Json(new { Result = "OK" });
        }
        public FileResult PDFOutDrWiseClctn()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "OutDoctorWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "OutDoctorWiseCollection";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult OutDrWiseClctn(branchdetails outDrWiseObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = outDrWiseObj.ff;
                string todatee = outDrWiseObj.tt;
                //*******************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = outDrWiseObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = outDrWiseObj.BrMst_Name;
                Head1 = "OUT DOCTOR WISE INVOICES";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "OutDoctorWiseCollection";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "OutDoctorWiseCollection";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************BrMst_Key nYrId************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                            "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,A.Inv_OutDr AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,A.Inv_BrId,BrMst_Name " +
                            "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor'   " +
                            "LEFT JOIN Baranches_Mst ON A.Inv_BrId=BrMst_Key " +
                            "WHERE  ISNULL(A.Inv_DrId,0)=0 AND Inv_OutDr!='' AND A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND A.Inv_Status <> - 1 AND A.Inv_CpyId = " + BrMst_Key + " AND A.Inv_YrId = " + nYrId + " " +
                            nCondition + " ORDER BY A.Inv_Date,A.Inv_UsrId";


                }
                else
                {
                    sqlStr = "SELECT A.Inv_No,A.Inv_Date,A.Inv_Name, A.Inv_DiscAmt, A.Inv_Netamt," +
                             "A.Inv_CurRcvdAmt,A.Inv_CurBalAmt,A.Inv_UsrId,A.Inv_OutDr AS DrName,A.Inv_OutDr,A.Inv_DrId,A.Inv_PayMode,A.Inv_BrId,BrMst_Name " +
                             "FROM dbo.Invoice_Mst A WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst B WITH (NOLOCK) ON A.Inv_DrId = B.AhMst_Key AND B.AhMst_Type = 'Doctor' " +
                            "LEFT JOIN Baranches_Mst ON A.Inv_BrId=BrMst_Key " +
                             "WHERE  ISNULL(A.Inv_DrId,0)=0 AND Inv_OutDr!='' AND A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_Status <> - 1  AND A.Inv_YrId = " + nYrId + " " +
                             nCondition + " ORDER BY A.Inv_Date,A.Inv_UsrId";

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);

                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dtDetails);
                dsPrint.Tables.Add(dTitle);

                //************************************************************************************************
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_OutDrwiseInvoices.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_OutDrwiseInvoices.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SrchBnchWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_BRNCH_WITH_NAME_Result> t = new List<Stproc_SEARCH_BRNCH_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_BRNCH_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchBnchWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_BRNCH_WITH_KEY_Result> t = new List<Stproc_SEARCH_BRNCH_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_BRNCH_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchTSTWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SrchTSTWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFNoDctrPatTst()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "NoDoctorPatientTest";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "NoDoctorPatientTest";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult NoDctrPatTst(branchdetails NoDrPatTstObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = NoDrPatTstObj.ff;
                string todatee = NoDrPatTstObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = NoDrPatTstObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string TestName = NoDrPatTstObj.TstMst_name;
                double TestKey = NoDrPatTstObj.TstMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = NoDrPatTstObj.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                BrmstKey = NoDrPatTstObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);


                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "NoDoctorPatientTest";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "NoDoctorPatientTest";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                //TestName TestKey brnchName BrmstKey


                if (TestName == "" && brnchName.Trim() != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 and Inv_BrID=" + BrmstKey + " group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }

                if (brnchName.Trim() == "" && TestName.Trim() == "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }
                if (brnchName.Trim() == "" && TestName != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE invdet.InvItm_TstId='" + TestKey + "' and inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }
                else if (TestName.Trim() != "")
                {
                    cmd.CommandText = "SELECT COUNT(Tst.TstMst_Key) as TestCount,sum(invdet.InvItm_rate) as testrate,inv.Inv_name,Tst.TstMst_Key,Tst.TstMst_name,Tst.TstMst_Rate,inv.Inv_No from  Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key WHERE invdet.InvItm_TstId='" + TestKey + "' and inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + CompanyId + "AND inv.Inv_YrId = " + YearId + " AND inv.Inv_Status != -1 AND inv.Inv_DrId = 0 and Inv_BrID=" + BrmstKey + " group by TstMst_Key,TstMst_name,Inv_name,TstMst_Rate,Inv_No,InvItm_rate ORDER BY TstMst_name ";
                }

                SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "PatientDR");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);

                //**************************************Daily Collection Statement***********************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NodrPtnttest.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NodrPtnttest.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SearchLabWithName(string term)
        {
            try
            {

                List<Stproc_SEARCH_LAB_WITH_NAME_Result> t = new List<Stproc_SEARCH_LAB_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_LAB_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchLabWithKey(string term)
        {
            try
            {

                List<Stproc_SEARCH_LAB_WITH_KEY_Result> t = new List<Stproc_SEARCH_LAB_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_LAB_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFReferalLabStmnt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReferalLab";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReferalLab";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult ReferalLabStmnt(branchdetails rfrlLabObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rfrlLabObj.ff;
                string todatee = rfrlLabObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rfrlLabObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string LabName = rfrlLabObj.AhMst_pName;
                double LabKey = rfrlLabObj.AhMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rfrlLabObj.BrMst_Name;
                Head1 = "REFERAL LAB STATEMENTS";
                Head1 = Head1 + "(Refered Date)";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rfrlLabObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReferalLab";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReferalLab";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                string RefId = "";
                try
                {
                    RefId = Convert.ToString(LabName.Trim());
                }
                catch { }
                nCondition = " AND  Convert(date,Inv_Date) >='" + fromdate.ToString("yyyy-MM-dd") + "' AND convert(date,Inv_Date)<='" + todate.ToString("yyyy-MM-dd") + "'";
                if (BrmstKey > 0)
                {

                    nCondition = nCondition + " AND Inv_BrID=" + BrmstKey + "";
                }
                if (RefId != "")
                {
                    nCondition = nCondition + " AND RefLb_RefLabName='" + RefId + "'";
                }
                SqlCommand sqlcmd01 = new SqlCommand();
                sqlcmd01.Connection = sqlcon;
                sqlcmd01.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                try
                {
                    sqlStr = "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab WITH (NOLOCK) Left Join CARE011112.dbo.Invoice_Mst Inv WITH (NOLOCK) on RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN CARE011112.DBO.Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join CARE011112.dbo.AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key   Left Join CARE011112.dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key  where  RefLb_YrId=" + YearId + " AND  Inv_Status<>-1 AND RefLb_CpyId=1 " + nCondition;
                    sqlStr = sqlStr + " UNION ";
                    sqlStr = sqlStr + "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab  WITH (NOLOCK) Left Join CARE021112.dbo.Invoice_Mst Inv WITH (NOLOCK) on  RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN CARE021112.DBO.Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join CARE021112.dbo.AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key  Left Join CARE021112.dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key where RefLb_YrId=" + YearId + "  AND  Inv_Status<>-1  AND RefLb_CpyId>1  " + nCondition;
                    sqlcmd01.CommandText = sqlStr;
                    sd0 = new SqlDataAdapter(sqlcmd01.CommandText, sqlcon);
                    sd0.Fill(ds0, "dtDetails");
                }
                catch
                {
                    sqlStr = "Select RefLab.*,Inv.Inv_DrId,Inv.Inv_ageymd,Inv.Inv_Gender,Inv.Inv_age,Inv.Inv_Date,Inv.Inv_Name,Inv.Inv_OutDr As OutDoctor,Ahmst.AhMst_pName As Doctor,Br.BrMst_Name As BranchName,InvDet.InvItm_rate,InvDet.InvItm_Orgrate,InvDet.InvItm_Type,InvDet.InvItm_DiscAmt,InvDet.InvItm_DiscPer  from ICONPUB.dbo.ReferalLab RefLab WITH (NOLOCK) Left Join Invoice_Mst Inv WITH (NOLOCK) on RefLab.RefLb_LabNo=Inv.Inv_No AND RefLab.RefLb_CpyId =Inv.Inv_CpyId AND RefLab.RefLb_YrId=Inv.Inv_YrId " + Environment.NewLine
                        + "LEFT JOIN Invoice_Det InvDet WITH (NOLOCK) ON InvDet.InvItm_Invno=RefLab.RefLb_LabNo AND InvDet.InvItm_CpyId=RefLab.RefLb_CpyId AND InvDet.InvItm_YrId=RefLab.RefLb_YrId AND InvDet.InvItm_TstId=RefLab.RefLb_TestId left join AccountHeads_Mst Ahmst WITH (NOLOCK) on Inv.Inv_DrId=Ahmst.AhMst_Key   Left Join dbo.Baranches_Mst Br WITH (NOLOCK) on Inv.Inv_BrID=Br.BrMst_Key  where  RefLb_YrId=" + YearId + " AND  Inv_Status<>-1  " + nCondition;
                    sqlcmd01.CommandText = sqlStr;
                    sd0 = new SqlDataAdapter(sqlcmd01.CommandText, sqlcon);

                    sd0.Fill(ds0, "dtDetails");
                }
                ////****************************************************
                sqlcmd01.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sd0 = new SqlDataAdapter(sqlcmd01);
                sd0.Fill(ds0, "[dbo].[Company_Mst]");
                //****************************************************
                DataTable dt = new DataTable();
                dt.Reset();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("Head", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["Head"] = Head1;
                ds0.Tables.Add(dt);
                //*************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RefLab.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_RefLab.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRemoveAuthStmnt()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "RemoveAuthorizationStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "RemoveAuthorizationStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RemoveAuthStmnt(branchdetails rmveAuthObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rmveAuthObj.ff;
                string todatee = rmveAuthObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rmveAuthObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rmveAuthObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "REMOVE AUTHORIZATION STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rmveAuthObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "RemoveAuthorizationStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "RemoveAuthorizationStatement";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT RemAt.*,Inv.Inv_name FROM Remove_Authorization RemAt LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RemAt.RemAut_InvNo =inv.Inv_No AND RemAt.RemAut_CpyId =inv.Inv_CpyId " +
                             " WHERE RemAut_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND RemAut_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            " AND RemAut_CpyId = " + BrmstKey + " AND RemAut_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT RemAt.*,Inv.Inv_name FROM Remove_Authorization RemAt LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RemAt.RemAut_InvNo =inv.Inv_No" +
                           " WHERE RemAut_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND RemAut_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                          "  AND RemAut_YrId = " + nYrId;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_RemAuthorize.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_RemAuthorize.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRptDispStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatchingStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatchingStatement";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RptDispStmnts(branchdetails rptDispObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = rptDispObj.ff;
                string todatee = rptDispObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = rptDispObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = rptDispObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "REPORT DISPATCHING STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = rptDispObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatchingStatement";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatchingStatement";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No AND  RptDis.RptDis_CpyId =Inv.Inv_CPYID AND RptDis.RptDis_YrId =Inv.Inv_YrId " +
                             " WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            " AND RptDis_CpyId = " + BrmstKey + " AND RptDis_YrId = " + nYrId;
                }
                else
                {
                    sqlStr = "SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No AND RptDis.RptDis_CpyId =Inv.Inv_CPYID AND RptDis.RptDis_YrId =Inv.Inv_YrId" +
                                                " WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                               "  AND RptDis_YrId = " + nYrId;

                }

                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //************************************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_ReptDispatching.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_ReptDispatching.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFSmpleCollWiseInv()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "SampleCollectionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "SampleCollectionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult SmpleCollWiseInv(branchdetails cmplCollObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = cmplCollObj.ff;
                string todatee = cmplCollObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cmplCollObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cmplCollObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = cmplCollObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "SampleCollectionWise";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "SampleCollectionWise";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            " AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance,AccountHeads_Mst_4.AhMst_pName AS CollBy, " +
                            " dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            " dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            " dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            " dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_PayMode,[dbo].[Invoice_Det].[InvItm_Type],InvItm_rate,InvItm_Orgrate, [dbo].[Invoice_Det].[InvItm_TstId],dbo.Test_Mst.TstMst_name " +
                            " FROM dbo.Invoice_Mst  WITH (NOLOCK) LEFT OUTER JOIN " +
                            " [dbo].[Invoice_Det] on [dbo].[Invoice_Mst] .[Inv_No] =[dbo].[Invoice_Det] .InvItm_Invno AND  [dbo].[Invoice_Mst] .[Inv_CPYID] =[dbo].[Invoice_Det] .InvItm_CpyId AND  [dbo].[Invoice_Mst] .[Inv_YRID] =[dbo].[Invoice_Det] .InvItm_YrId left outer  join  " +
                            " [dbo].[Test_Mst] on [dbo].[Invoice_Det].[InvItm_TstId]= [dbo].[Test_Mst].TstMst_Key LEFT OUTER JOIN  " +
                            " dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                             " dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN " +
                            "  dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +

                             "WHERE dbo.Invoice_Mst.Inv_CltnID>0 AND  dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1 AND dbo.Invoice_Mst.Inv_CpyId = " + BrmstKey + " AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;
                }
                else
                {

                    sqlStr = "SELECT dbo.Invoice_Mst.Inv_No, dbo.Invoice_Mst.Inv_Date,dbo.Invoice_Mst.Inv_Comment, dbo.Invoice_Mst.Inv_name, Masters.Mstr_Desc AS DscRsnMst_Reason, " +
                            " AccountHeads_Mst.AhMst_pName AS PatientName, AccountHeads_Mst_2.AhMst_pName AS DrName,AccountHeads_Mst_3.AhMst_pName AS Insurance,AccountHeads_Mst_4.AhMst_pName AS CollBy, " +
                            " dbo.Invoice_Mst.Inv_PntInvId, dbo.Invoice_Mst.Inv_PntId, dbo.Invoice_Mst.Inv_GrosAmt,dbo.Invoice_Mst.Inv_InsNo,  " +
                            " dbo.Invoice_Mst.Inv_OutDr,dbo.Invoice_Mst.Inv_DrId,dbo.Invoice_Mst.Inv_User,dbo.Invoice_Mst.Inv_time, " +
                            " dbo.Invoice_Mst.Inv_DiscAmt, dbo.Invoice_Mst.Inv_OthAmt, dbo.Invoice_Mst.Inv_Netamt, dbo.Invoice_Mst.Inv_RcvdAmt,  " +
                            " dbo.Invoice_Mst.Inv_CurRcvdAmt, dbo.Invoice_Mst.Inv_CurBalAmt, dbo.Invoice_Mst.Inv_BalAmt,dbo.Invoice_Mst.Inv_ShortName,dbo.Invoice_Mst.Inv_PayMode,[dbo].[Invoice_Det].[InvItm_Type],InvItm_rate,InvItm_Orgrate, [dbo].[Invoice_Det].[InvItm_TstId],dbo.Test_Mst.TstMst_name " +
                            " FROM dbo.Invoice_Mst  WITH (NOLOCK) LEFT OUTER JOIN " +
                            " [dbo].[Invoice_Det] on [dbo].[Invoice_Mst] .[Inv_No] =[dbo].[Invoice_Det] .InvItm_Invno AND  [dbo].[Invoice_Mst] .[Inv_CPYID] =[dbo].[Invoice_Det] .InvItm_CpyId AND  [dbo].[Invoice_Mst] .[Inv_YRID] =[dbo].[Invoice_Det] .InvItm_YrId left outer  join  " +
                            " [dbo].[Test_Mst] on [dbo].[Invoice_Det].[InvItm_TstId]= [dbo].[Test_Mst].TstMst_Key LEFT OUTER JOIN  " +
                            " dbo.AccountHeads_Mst WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_2 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DrId = AccountHeads_Mst_2.AhMst_Key LEFT OUTER JOIN " +
                            " dbo.AccountHeads_Mst AS AccountHeads_Mst_3 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_InsId = AccountHeads_Mst_3.AhMst_Key LEFT OUTER JOIN " +
                             " dbo.AccountHeads_Mst AS AccountHeads_Mst_4 WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_CltnID = AccountHeads_Mst_4.AhMst_Key LEFT OUTER JOIN " +
                            "  dbo.Masters WITH (NOLOCK) ON dbo.Invoice_Mst.Inv_DiscId = Masters.Mstr_Key " +

                             "WHERE dbo.Invoice_Mst.Inv_CltnID>0 AND  dbo.Invoice_Mst.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND dbo.Invoice_Mst.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND dbo.Invoice_Mst.Inv_Status <> - 1  AND dbo.Invoice_Mst.Inv_YrId = " + nYrId + nCondition;

                }
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //**************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_SampleCollectionWise.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_SampleCollectionWise.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFRptDisp2()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatching2";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatching2";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult RptDisp2(branchdetails RptDisp2Obj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = RptDisp2Obj.ff;
                string todatee = RptDisp2Obj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = RptDisp2Obj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = RptDisp2Obj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = RptDisp2Obj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "ReportDispatching2";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "ReportDispatching2";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************

                if (BrmstKey > 0)
                {


                    sqlStr = " SELECT BrMst_Name,Inv_name,Inv_No,Inv_User,Inv_OthCmnt, Inv_Date ,Inv_PrintCount,ISNULL(Inv_SentMail, '') as Inv_SentMail from Invoice_Mst left join Baranches_Mst on BrMst_Key=Inv_BrID WHERE (ISNULL(Inv_SentMail, '')!= '' or Inv_PrintCount> 0 ) and Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + "  AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId;
                }
                else
                {
                    sqlStr = " SELECT BrMst_Name,Inv_name,Inv_No,Inv_User,Inv_OthCmnt, Inv_Date, Inv_PrintCount,ISNULL(Inv_SentMail, '') as Inv_SentMail from Invoice_Mst  left join Baranches_Mst on BrMst_Key=Inv_BrID WHERE (ISNULL(Inv_SentMail, '')!= '' or Inv_PrintCount> 0) and Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " + " AND Inv_YrId = " + YearId;
                    /*"SELECT RptDis.*,Inv.Inv_name,Inv.Inv_Date FROM Report_Dispatching RptDis WITH (NOLOCK) LEFT JOIN Invoice_Mst Inv WITH (NOLOCK) ON RptDis.RptDis_LabNo =Inv.Inv_No" +
                                            " WHERE Inv_Date >= '" + dtpFrom.Value.ToString("yyyy-MM-dd") + "' AND Inv_Date <= '" + dtpFrom.Value.ToString("yyyy-MM-dd") + "' " +
                                           "  AND RptDis_YrId = " + cPublic.YearId;*/

                }
                cmd = new SqlCommand(sqlStr, sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "reportdispatched");


                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                Head2 = "FROM : " + fromdate.ToString("dd-MMM-yyyy") + "  To : " + todate.ToString("dd-MMM-yyyy");
                DataTable dt = new DataTable();
                dt.Reset();


                dt.Columns.Add("DateInterval", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                ds.Tables.Add(dt);

                Head3 = "branchtype" + BrmstName;
                DataTable dtt = new DataTable();
                dtt.Reset();


                dtt.Columns.Add("branchtype", typeof(string));
                dtt.Rows.Add();
                dtt.Rows[0]["branchtype"] = Head3;
                ds.Tables.Add(dtt);

                //**************************************************************************
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_ReptDispatching2.rpt");
                ds.WriteXmlSchema(Reportfilepaths + "rpt_ReptDispatching2.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTimeOverStmnts()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TimeOverStatements";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TimeOverStatements";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TimeOverStmnts(branchdetails timeOvrObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = timeOvrObj.ff;
                string todatee = timeOvrObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = timeOvrObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                int AvoidFinished = timeOvrObj.avoidFinishd;
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = timeOvrObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                Head1 = "SAMPLE COLLECTION WISE INVOICES";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = timeOvrObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TimeOverStatements";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TimeOverStatements";
                    brKey = (int)BrmstKey;
                }
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                //************************************************************************************************
                string cond = "";
                if (BrmstKey > 0 && AvoidFinished == 1)
                {
                    cond = "SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                       + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                       + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                       + " WHERE (Inv_Status != -1 and Inv_Status != 1) and convert(Date, Inv_Date)>= '" + fromdate.ToString("") + "'and  convert(Date, Inv_Date) <= '" + todate + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + "";
                }
                else if (AvoidFinished == 1)
                {
                    cond = "SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                       + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                       + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                       + " WHERE (Inv_Status != -1 and Inv_Status != 1) and convert(Date, Inv_Date)>= '" + fromdate + "'and  convert(Date, Inv_Date) <= '" + todate + "' and[Inv_YrId] = " + YearId + "";
                }
                if (BrmstKey > 0 && AvoidFinished == 0)
                {
                    cond = " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,datediff(second, FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm tt'),FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId  WHERE (Inv_Status != -1 AND Inv_Status = 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + " AND isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')), 0) > 0" + Environment.NewLine
                     + "union" + Environment.NewLine
                     + " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover, Inv_CmpltdTime, Inv_Status, BrMst_Name, AhMst_pName, Inv_CpyId from Invoice_Mst WITH(NOLOCK)LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId WHERE(Inv_Status != -1 AND Inv_Status != 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and[Inv_YrId] = " + YearId + " and[Inv_CpyId] = " + BrmstKey + " AND isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')), 0) > 0";
                    //cond = "SELECT Inv_No, Inv_Date, Inv_name,datediff(second,FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm'),FORMAT(Inv_CmpltdDate,'yyyy-MM-dd hh:mm')),Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                    //                     + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                    //                     + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                    //                     + " WHERE Inv_Status != -1 and convert(Date, Inv_Date)>= '" + dtpfromdate.Value + "'and  convert(Date, Inv_Date) <= '" + dtptodate.Value + "' and[Inv_YrId] = " + cPublic.YearId + " and[Inv_CpyId] = " + BrId + " AND datediff(second,FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm'),FORMAT(Inv_CmpltdDate,'yyyy-MM-dd hh:mm'))>0";
                }
                else if (AvoidFinished == 0)
                {
                    cond = cond = " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate, datediff(second, FORMAT(Inv_RepTime,'yyyy-MM-dd hh:mm tt'),FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')) as timeover,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId  WHERE (Inv_Status != -1 AND Inv_Status = 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and [Inv_YrId] = " + YearId + " and isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(Inv_CmpltdDate, 'yyyy-MM-dd hh:mm tt')), 0) > 0" + Environment.NewLine
                     + "union" + Environment.NewLine
                     + " SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate, datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')) as timeover, Inv_CmpltdTime, Inv_Status, BrMst_Name, AhMst_pName, Inv_CpyId from Invoice_Mst WITH(NOLOCK)LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY = Inv_InsId LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key = Inv_CpyId WHERE(Inv_Status != -1 AND Inv_Status != 1) and convert(Date, Inv_Date) >= '" + fromdate.ToString("yyyy-MM-dd") + "' and  convert(Date, Inv_Date) <= '" + todate.ToString("yyyy-MM-dd") + "' and [Inv_YrId] = " + YearId + " and  isnull(datediff(second, FORMAT(Inv_RepTime, 'yyyy-MM-dd hh:mm tt'), FORMAT(getdate(), 'yyyy-MM-dd hh:mm tt')), 0) > 0";

                    //"SELECT Inv_No, Inv_Date, Inv_name,Inv_RepTime,Inv_CmpltdDate,Inv_CmpltdTime,Inv_Status,BrMst_Name,AhMst_pName,Inv_CpyId from Invoice_Mst WITH(NOLOCK) " + Environment.NewLine
                    //     + " LEFT JOIN AccountHeads_Mst WITH(NOLOCK) ON AHMST_KEY=Inv_InsId  " + Environment.NewLine
                    //     + " LEFT JOIN Baranches_Mst WITH(NOLOCK) ON BrMst_Key=Inv_CpyId " + Environment.NewLine
                    //     + " WHERE Inv_Status != -1 and convert(Date, Inv_Date)>= '" + dtpfromdate.Value + "'and  convert(Date, Inv_Date) <= '" + dtptodate.Value + "' and[Inv_YrId] = " + cPublic.YearId + "";
                }


                cmd.CommandText = cond;
                cmd.Connection = sqlcon;

                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();
                sda.Fill(ds, "TimeOverDet");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                sda = new SqlDataAdapter(cmd);
                sda.Fill(ds, "Company_Mst");

                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                ds.Tables.Add(dt);

                //**************************************************************************AvoidFinished BrmstKey
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                if (BrmstKey > 0 && AvoidFinished == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmnt.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmnt.xsd");
                }
                else if (AvoidFinished == 1)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmnt.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmnt.xsd");
                }
                else if (BrmstKey > 0 && AvoidFinished == 0)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmntfinished.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmntfinished.xsd");
                }
                else if (AvoidFinished == 0)
                {
                    filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TimeOverStmntfinished.rpt");
                    ds.WriteXmlSchema(Reportfilepaths + "rpt_TimeOverStmntfinished.xsd");
                }

                //*********************************************************************************
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFAuthDetails()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult AuthDetails(branchdetails authDlsObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = authDlsObj.ff;
                string todatee = authDlsObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
                //************************************************************************************************
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT inv_name as name,TstMst_name as testname,GenRsltDet_LabNo as labno,Inv_Date as date,GenRsltDet_UsrFirLeAut As USERINFO, GenRsltDet_UsrSecLeAut As SecUserInfo, GenRsltDet_GrpId As TestId FROM GenaralRslt_Det Gen WITH (NOLOCK)LEFT JOIN   Invoice_Mst A WITH(NOLOCK) ON Gen.GenRsltDet_LabNo = A.Inv_No AND Gen.GenRsltDet_YrId = A.Inv_YrId AND Gen.GenRsltDet_CpyId = A.Inv_CpyId LEFT JOIN Test_Mst Tst WITH(NOLOCK) ON Tst.TstMst_Key = Gen.GenRsltDet_GrpId  WHERE  Inv_Status <> -1 AND Inv_YrId = " + YearId + " AND Inv_CpyId = " + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +

                                 " UNION  SELECT inv_name as name,TstMst_name as testname,Cul_LabNo as labno,Inv_Date as date,Cul_UsrFirLeAut As USERINFO,Cul_UsrSecLeAut As SecUserInfo,Cul_Testid As TestId FROM CultureRslt_Mst Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.Cul_LabNo=A.Inv_No AND Gen.Cul_YrId=A.Inv_YrId AND Gen.Cul_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.Cul_Testid  WHERE  Inv_Status<>-1  AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + " AND Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<= '" + todate.ToString("yyyy-MM-dd") + "'" +
                                 " UNION  SELECT inv_name as name,TstMst_name as testname,SmnRslt_LabNo as labno,Inv_Date as date,SmnRslt_UsrFirLeAut As USERINFO,SmnRslt_UsrSecLeAut As SecUserInfo,SmnRslt_Tstid As TestId FROM Semen_Rslt Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.SmnRslt_LabNo=A.Inv_No AND Gen.SmnRslt_YrId=A.Inv_YrId AND Gen.SmnRslt_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.SmnRslt_Tstid WHERE  Inv_Status<>-1  AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + " AND Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                 " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust1_LabNo as labno,Inv_Date as date,RsltCust1_UsrFirLeAut As USERINFO,RsltCust1_UsrSecLeAut As SecUserInfo,RsltCust1_TstId As TestId FROM Result_Customize1 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust1_LabNo=A.Inv_No AND Gen.RsltCust1_YrId=A.Inv_YrId AND Gen.RsltCust1_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust1_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust2_LabNo as labno,Inv_Date as date,RsltCust2_UsrFirLeAut As USERINFO,RsltCust2_UsrSecLeAut As SecUserInfo,RsltCust2_TstId As TestId FROM Result_Customize2 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust2_LabNo=A.Inv_No AND Gen.RsltCust2_YrId=A.Inv_YrId AND Gen.RsltCust2_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust2_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + " and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust4_LabNo as labno,Inv_Date as date,RsltCust4_UsrFirLeAut As USERINFO,RsltCust4_UsrSecLeAut As SecUserInfo,RsltCust4_TstId As TestId FROM Result_Customize4 Gen  LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust4_LabNo=A.Inv_No AND Gen.RsltCust4_YrId=A.Inv_YrId AND Gen.RsltCust4_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust4_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION SELECT inv_name as name,TstMst_name as testname,GenRsltDet_LabNo as labno,Inv_Date as date,GenRsltDet_UsrFirLeAut As USERINFO,GenRsltDet_UsrSecLeAut As SecUserInfo,GenRsltDet_GrpId As TestId FROM GenaralRslt_DetFD Gen WITH (NOLOCK) LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.GenRsltDet_LabNo=A.Inv_No AND Gen.GenRsltDet_YrId=A.Inv_YrId AND Gen.GenRsltDet_CpyId=A.Inv_CpyId LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.GenRsltDet_GrpId  WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + " AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "'" +
                                  " UNION  SELECT inv_name as name,TstMst_name as testname,RsltCust3_LabNo as labno,Inv_Date as date,RsltCust3_UsrFirLeAut As USERINFO,RsltCust3_UsrSecLeAut As SecUserInfo,RsltCust3_TstId As TestId FROM Result_Customize3 Gen LEFT JOIN   Invoice_Mst A WITH (NOLOCK) ON Gen.RsltCust3_LabNo=A.Inv_No AND Gen.RsltCust3_YrId=A.Inv_YrId AND Gen.RsltCust3_CpyId=A.Inv_CpyId  LEFT JOIN Test_Mst Tst WITH (NOLOCK) ON Tst.TstMst_Key=Gen.RsltCust3_TstId WHERE  Inv_Status<>-1 AND Inv_YrId = " + YearId + "  AND Inv_CpyId=" + CompanyId + "and Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' ";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "authourization");
                //*****************************************************
                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_authourizationstmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_authourizationstmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult SearchCust2TstName(string term)
        {
            try
            {

                List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchCust2TstCode(string term)
        {
            try
            {
                List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_CUSTOMIZE2_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
                //return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFCust2RsltRegister()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "Customize2ResultRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "Customize2ResultRegister";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult Cust2RsltRegister(branchdetails cust2RegObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = cust2RegObj.ff;
                string todatee = cust2RegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = cust2RegObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string TestName = cust2RegObj.TstMst_name;
                double TestKey = cust2RegObj.TstMst_Key;
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = cust2RegObj.BrMst_Name;
                Head1 = "COLLECTION STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                BrmstKey = cust2RegObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);


                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "Customize2ResultRegister";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "Customize2ResultRegister";
                    brKey = (int)BrmstKey;
                }
                //**************************************Daily Collection Statement***********************************************************
                //TestName TestKey brnchName BrmstKey
                int testid = 0;
                string cust2RsltDesc = "";
                string Ncondions = "";
                try
                {
                    testid = Convert.ToInt32(TestKey);
                }
                catch { }
                //check
                cust2RsltDesc = this.db.Customize2_RsltDescMst.Where(cust => cust.Cust2Rslt_TstId == testid).Select(cst => cst.Cust2Rslt_Desc).FirstOrDefault();
                // cust2RsltDesc = cPublic.getData("Customize2_RsltDescMst", "Cust2Rslt_Desc", "WHERE Cust2Rslt_TstId=" + testid);

                if (cust2RsltDesc == "")//check
                {
                    TempData["AlertMessage"] = "Invalid Patient Details!";
                    return Json(new { Result = "ERROR", Record = TempData["AlertMessage"] });
                }


                int _CmpyId = 0;
                try
                {

                    if (BrmstKey > 0)
                    {
                        try
                        {
                            _CmpyId = Convert.ToInt32(BrmstKey);
                        }
                        catch { }
                    }
                    else
                    {
                        _CmpyId = 0;
                    }
                }
                catch { }

                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;

                if (_CmpyId > 0)
                {
                    Ncondions = " AND Inv_BrID=" + _CmpyId + "";
                }

                cmd.CommandText = "select [BrMst_Name],[Inv_PayMode],[Inv_No],Inv_ageymd,inv_date,[Inv_SmplDate],[Inv_Rcvddate],RsltCust2_LabNo,RsltCust2_Report,[Inv_InsId],RsltCust2_TstId," + Environment.NewLine
                    + "RsltCust2_CpyId,[Inv_name],ahmst_pname as corportae,[Inv_age], [Inv_Gender],TstMst_Name" + Environment.NewLine
                    + " from [dbo].[Result_Customize2] WITH (NOLOCK) " + Environment.NewLine
                     + "left join [dbo].[Invoice_Mst] WITH (NOLOCK)  on RsltCust2_LabNo =[Inv_No] and RsltCust2_YrId=inv_yrid and RsltCust2_CpyId=[Inv_CpyId] " + Environment.NewLine
                     + "left join [dbo].[Invoice_Det] WITH (NOLOCK) on InvItm_Invno =[Inv_No] and InvItm_YrId=inv_yrid and InvItm_CpyId=[Inv_CpyId] and InvItm_TstId=RsltCust2_TstId " + Environment.NewLine
                    + " left join Test_Mst WITH (NOLOCK)  on TstMst_Key=RsltCust2_TstId  " + Environment.NewLine
                     + " left join AccountHeads_Mst WITH (NOLOCK)  on [AhMst_Key] =[Inv_InsId]  " + Environment.NewLine
                    + " left join [dbo].[Baranches_Mst] on [BrMst_Key]=[Inv_BrID] " + Environment.NewLine
                    + " where Inv_Date>='" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date<='" + todate.ToString("yyyy-MM-dd") + "' " + Environment.NewLine
                    + " AND Inv_Status != -1 and inv_yrid=" + YearId + " and RsltCust2_TstId=" + testid + " and RsltCust2_Description='" + cust2RsltDesc + "'" + Ncondions;

                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "Customize2ResultDetails");

                //*****************************

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);
                //**************************************Daily Collection Statement***********************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dtMaster);
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //dsPrint.Tables.Add(PendingColl);
                //dsPrint.Tables.Add(CancelledInvoice);
                //dsPrint.Tables.Add(PendingReg);
                //dsPrint.Tables.Add(CorpSummary);
                //ReportType = "rpt_ResultCBCHistogram";
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_Cust2RsltStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_Cust2RsltStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult TstWiseResultReg(branchdetails tstRsltRegObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = tstRsltRegObj.ff;
                string todatee = tstRsltRegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                DataSet ds0 = new DataSet();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "AuthorizationDetails";
                //************************************************************************************************


                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_authourizationstmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_authourizationstmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFNonBarcodedTest()
        {
            string fileName = "";
            // Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "BranchWiseCollection";
            fileName += "Report_" + fdt + "_" + tdt + "_" + "NonBarcodedTests";
            fileName = fileName + ".pdf";
            string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
            byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
            return File(FileBytes, "application/pdf");

        }
        public JsonResult NonBarcodedTest(branchdetails tstRsltRegObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                string fromdatee = tstRsltRegObj.ff;
                string todatee = tstRsltRegObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;

                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "NonBarcodedTests";
                //************************************************************************************************
                cmd.Connection = sqlcon;
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "select inv_no,inv_name,[TstMst_name],[InvItm_SmplId] from invoice_mst left join invoice_det on inv_no=[InvItm_Invno] and inv_yrid=[InvItm_YrId] and inv_cpyid=[InvItm_CpyId] left join[dbo].[Test_Mst] on[TstMst_Key]=[InvItm_TstId] where Inv_Status != -1 and inv_yrid =" + YearId + " and [InvItm_SmplId]='' AND   Inv_date>='" + fromdate.ToString("yyyy-MM-dd") + "' AND   Inv_date<='" + todate.ToString("yyyy-MM-dd") + "' and inv_cpyid = " + CompanyId + "";
                SqlDataAdapter adapt = new SqlDataAdapter(cmd);
                DataSet ds0 = new DataSet();
                adapt.Fill(ds0, "Nonbarcodedata");

                cmd.CommandText = "SELECT [CmpMst_Key],[CmpMst_Name],[CmpMst_place] FROM [dbo].[Company_Mst] WITH (NOLOCK)";
                adapt = new SqlDataAdapter(cmd);
                adapt.Fill(ds0, "companymst");
                string reportType = "";
                DataTable dt = new DataTable();
                dt.Columns.Add("DateFrom", typeof(string));
                dt.Columns.Add("DateTo", typeof(string));
                dt.Columns.Add("rptType", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateFrom"] = fromdate.ToString("dd-MM-yyyy");
                dt.Rows[0]["DateTo"] = todate.ToString("dd-MM-yyyy");
                dt.Rows[0]["rptType"] = reportType;
                ds0.Tables.Add(dt);

                //**************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //*********************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_NonBarcodeTest.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_NonBarcodeTest.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";
                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                }
                //*************************************************************************************************
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public JsonResult IPOPpatView(branchdetails ipopViewObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                int ipop_num = 0;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                //int IPOPNum=
                ipop_num = ipopViewObj.IPOP_num;
                //*********************************
                SqlCommand cmd = new SqlCommand("SELECT INV_NO,INV_DATE,Inv_name,Inv_phno,Inv_Email,Inv_age,Inv_Gender,Inv_ageymd,Ahmst_pname as Doctor FROM INVOICE_MST Inv LEFT JOIN AccountHeads_Mst Ahmst ON Inv_DrId=Ahmst.Ahmst_Key WHERE INV_YRID=" + YearId + " AND INV_CPYID=" + CompanyId + " AND Inv_RsltNO='" + ipop_num + "' AND Inv_Status!=-1", sqlcon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                DataTable dtsub = new DataTable();
                string labsub = "";
                string ngender = "";
                List<testDetails> test = new List<testDetails>();
                collectionDetails cls = new collectionDetails();
                int TempRw = 0;
                DateTime TempDate = DateTime.Now;
                string nResult = "";
                sda.Fill(dt);
                //grdIOPReslt.Rows.Clear();
                //if (dt.Rows.Count > 0)
                //{
                //    grdIOPReslt.RowCount = dt.Rows.Count;
                //}
                //else if (txtIPOP.Text.Trim() != "")
                //{
                //    txtIPOP.Text = "";
                //    MessageBox.Show("No record Found", cPublic.ProjectName);
                //    txtIPOP.Focus();
                //}
                string PatName = "";
                string PatAge = "";
                string PatGndr = "";
                string PatEmail = "";
                string PatPhNo = "";
                string InvDate = "";
                string InvDoctor = "";
                string LabNumber = "";
                string TstReslt = "";
                foreach (DataRow dr in dt.Rows)
                {
                    TempDate = DateTime.Now;
                    nResult = "";

                    //FILL PERSONAL DETAILS IN HEADER
                    PatName = dr["Inv_name"].ToString();
                    PatAge = dr["Inv_age"].ToString() + " " + dr["Inv_ageymd"].ToString();
                    ngender = dr["Inv_Gender"].ToString();
                    if (ngender == "M")
                    {
                        PatGndr = "Male";
                    }
                    else
                    {
                        PatGndr = "Female";
                    }
                    PatEmail = dr["Inv_Email"].ToString();
                    PatPhNo = dr["Inv_phno"].ToString();
                    cls = new collectionDetails()
                    {
                        Inv_name = PatName,
                        Pat_Age = PatAge,
                        //Inv_phno = dr["inv_phno"].ToString(),
                        Inv_Gender = ngender,
                        Inv_Email = PatEmail,
                        Inv_phno = PatPhNo
                    };

                    //DATAGRID FILL

                    try { TempDate = Convert.ToDateTime(dr["INV_DATE"]); } catch { }
                    InvDate = TempDate.ToString("dd-MM-yyyy");
                    InvDoctor = dr["Doctor"].ToString();
                    LabNumber = dr["INV_NO"].ToString();
                    labsub = dr["INV_NO"].ToString();
                    dtsub.Reset();
                    cmd = new SqlCommand("SELECT GenRsltDet_Result,TstMst_name as Test,TstMst_ShortName as TestShort FROM GenaralRslt_Det LEFT JOIN Test_Mst testmst on GenRsltDet_TstID=testmst.TstMst_Key WHERE GenRsltDet_LabNo=" + labsub + " AND GenRsltDet_YrId=" + YearId + " AND GenRsltDet_CpyId=" + CompanyId, sqlcon);
                    sda = new SqlDataAdapter(cmd);
                    sda.Fill(dtsub);

                    // TEST RESULT FETCH

                    foreach (DataRow drsub in dtsub.Rows)
                    {
                        if (nResult == "")
                        {
                            nResult = drsub["TestShort"].ToString() + "-" + drsub["GenRsltDet_Result"].ToString();
                        }
                        else
                        {
                            nResult = nResult + " |  " + drsub["TestShort"].ToString() + "-" + drsub["GenRsltDet_Result"].ToString();
                        }
                    }
                    TstReslt = nResult;

                    testDetails td = new testDetails()
                    {
                        Inv_Dates = InvDate,
                        Doctor = InvDoctor,
                        Lab_No = LabNumber,
                        Test_Result = TstReslt

                    };
                    test.Add(td);
                    TempRw += 1;
                    cls.testdtls = test;


                }
                //foreach (DataRow dr in dt.Rows)
                //{
                //    int tmpSchrge = 0;
                //    try
                //    {
                //        tmpSchrge = Convert.ToInt32(dr["Inv_Schrge"].ToString());
                //    }
                //    catch { }
                //    TotSChrge = TotSChrge + tmpSchrge;
                //    collectionDetails cs1 = new collectionDetails()
                //    {
                //        Inv_No = dr["Inv_No"].ToString(),
                //        Inv_name = dr["inv_name"].ToString(),
                //        //Inv_phno = dr["inv_phno"].ToString(),
                //        Inv_Date = Convert.ToDateTime(dr["Inv_Date"]).ToString("dd-MMM-yyyy"),
                //        Inv_Schrge = dr["Inv_Schrge"].ToString(),
                //        AhMst_pName = dr["AhMst_pName"].ToString(),
                //        Inv_PayMode = dr["Inv_PayMode"].ToString()
                //    };
                //    cls.Add(cs1);
                //    curRow = curRow + 1;

                //}

                //************************************
                //branchdetails dateDls = new branchdetails()
                //{
                //    fromdate = fromdat,
                //    todate = todat
                //};
                //Session["dateDls"] = dateDls;
                sqlcon.Close();
                Session["CollSmry2"] = cls;
                return Json(new { Result = "OK", Record = cls });
            }
            else
            {
                return Json(new
                {
                    Result = "ERROR"

                });
            }

        }
        public JsonResult SearchTestWithName(string term)
        {
            try
            {
                List<Stproc_SEARCH_TEST_WITH_NAME_Result> t = new List<Stproc_SEARCH_TEST_WITH_NAME_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_NAME(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public JsonResult SearchTestWithKey(string term)
        {
            try
            {
                List<Stproc_SEARCH_TEST_WITH_KEY_Result> t = new List<Stproc_SEARCH_TEST_WITH_KEY_Result>();
                t = db.Stproc_SEARCH_TEST_WITH_KEY(term).ToList();
                return Json(new { Result = "OK", Records = t }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exe)
            {
                System.IO.File.AppendAllText(Server.MapPath("~/Content/error.txt"), exe.InnerException.ToString());
                return Json(new { Result = "ERROR", message = exe.Message });
            }
        }
        public FileResult PDFTestWiseInvoice()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestWiseInvoice(branchdetails tstWiseInvObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double TstId = 0;
                string TstName = "";
                //CompanyId YearId
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;
                TstId = tstWiseInvObj.TstMst_Key;
                TstName = tstWiseInvObj.TstMst_name;
                string fromdatee = tstWiseInvObj.ff;
                string todatee = tstWiseInvObj.tt;
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                DataSet ds0 = new DataSet();
                SqlDataAdapter sd0 = new SqlDataAdapter();
                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable PendingColl = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                PendingColl.TableName = "PendingColl";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstWiseInvObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlCommand cmd0 = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                string sqlStr = "";
                //string nRptName = "";
                string nTblOut = "";
                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstWiseInvObj.BrMst_Name;
                nTblOut = "RemAuthor";
                //nRptName = "rpt_RemAuthorize.rpt";
                //Head1 = "REMOVE AUTHORIZATION STATEMENTS";
                Head2 = fromdate.ToString("dd/MM/yyyy") + " TO " + todate.ToString("dd/MM/yyyy");
                BrmstKey = tstWiseInvObj.BrMst_Key;
                Head3 = BrmstKey.ToString();
                //dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                //************************************************************************************************
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued,A.Inv_Nationality,A.Inv_SRFno,A.Inv_Passport, " +
                         "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                         "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_Aadhaar,A.Inv_Dob,A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                         "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                         "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                         "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                         "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                         "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                         "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                         "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                         "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                         "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId AND B.InvItm_CpyId = A.Inv_CpyId and   " +
                         "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                         "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                         "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                         "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                         "AND A.Inv_CpyId = " + BrmstKey + " AND  B.InvItm_TstId=" + TstId + " AND A.Inv_YrId = " + YearId + " ";


                }
                else
                {
                    cmd0.CommandText = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                       "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                       "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                       "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                       "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                       "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                       "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                       "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                       "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                       "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                       "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                       "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                       "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                       "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                       "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                       "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                       "AND  B.InvItm_TstId=" + TstId + " AND A.Inv_YrId = " + YearId + " ";

                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "dtDetails");
                if (BrmstKey > 0)
                {
                    cmd0.CommandText = "select inv_no,inv_cpyid,inv_yrid,Inv_Schrge,Count([InvItm_TstId]) as tstcount from [dbo].[Invoice_Mst] left join  Invoice_Det on [Inv_No]=[InvItm_Invno]and[Inv_YrId] =[InvItm_YrId] and[Inv_CpyId] =[InvItm_CpyId]  and InvItm_rate>0 where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  and Inv_YrId = " + YearId + "  and Inv_CpyId = " + BrmstKey + " and Inv_Status != -1 and inv_no in(SELECT Inv_No from dbo.Invoice_Mst WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <=  '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " )group by inv_no,inv_cpyid,inv_yrid,Inv_Schrge";
                }
                else
                {
                    cmd0.CommandText = "select inv_no,inv_cpyid,inv_yrid,Inv_Schrge,Count([InvItm_TstId]) as tstcount from [dbo].[Invoice_Mst] left join  Invoice_Det on [Inv_No]=[InvItm_Invno]and[Inv_YrId] =[InvItm_YrId] and[Inv_CpyId] =[InvItm_CpyId]  and InvItm_rate>0 where Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' and Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  and Inv_YrId = " + YearId + "  and Inv_Status != -1 and inv_no in(SELECT Inv_No from dbo.Invoice_Mst WHERE Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND Inv_Date <=  '" + todate.ToString("yyyy-MM-dd") + "' AND Inv_CpyId = " + BrmstKey + " AND Inv_YrId = " + YearId + " )group by inv_no,inv_cpyid,inv_yrid,Inv_Schrge";
                }
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(ds0, "dttest");
                DataTable dt = new DataTable();
                dt.Columns.Add("DateInterval", typeof(string));
                dt.Columns.Add("TestName", typeof(string));
                dt.Columns.Add("Branch", typeof(string));
                dt.Columns.Add("Reporthead", typeof(string));
                dt.Rows.Add();
                dt.Rows[0]["DateInterval"] = Head2;
                dt.Rows[0]["TestName"] = TstName.Trim();
                dt.Rows[0]["Branch"] = brnchName.Trim();
                dt.Rows[0]["Reporthead"] = Head3;
                ds0.Tables.Add(dt);
                //************************************************************************************************
                //dsPrint.Tables.Clear();
                //dsPrint.Tables.Add(dTitle);
                //dsPrint.Tables.Add(dtDetails);
                //***********************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestwiseStmnt.rpt");
                ds0.WriteXmlSchema(Reportfilepaths + "rpt_TestwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(ds0);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";
                try
                {
                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;
                    TempLog = pdfFile;
                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;
                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;
                    CrExportOptions.FormatOptions = CrFormatTypeOptions;
                    reportDocument.Export();
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTestPerfomance()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomance";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestPerfomance(branchdetails tstPrfmncObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = tstPrfmncObj.ff;
                string todatee = tstPrfmncObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable InvItmDetails_View = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                InvItmDetails_View.TableName = "InvItmDetails_View";
                dtDetails.TableName = "dtDetails";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstPrfmncObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstPrfmncObj.BrMst_Name;
                Head1 = "TEST PERFORMANCE";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);




                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomance";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomance";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************

                if (BrmstKey > 0)
                {

                    if (TstPrfrmView == 0)
                    {

                        sqlStr = "SELECT COUNT(Tst.TstMst_Key) as TestCount,Tst.TstMst_Key,Tst.TstMst_name from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId =Tst.TstMst_Key  " +
                                 "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                 "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name ORDER BY TstMst_name";
                    }
                    else
                    {
                        sqlStr = "SELECT SUM(TestCount) AS TestCount,TstMst_Key as TstMst_Key,TstMst_name as TstMst_name from (SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name,0 AS ntype  " +
"from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status != -1 AND TstMst_TypeId = -2 group by TstMst_Key, TstMst_name" +
" UNION " +
" SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name ,1 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + "" +
" AND inv.Inv_Status != -1 AND TstMst_TypeId != -2  group by TstMst_Key,TstMst_name" +
"  union " +
" SELECT COUNT(TstGR.TstMst_Key) as TestCount, TstGR.TstMst_Key as TstMst_Key, TstGR.TstMst_name as TstMst_name,2 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  left join dbo.Set_GroupTest SMtst WITH(NOLOCK) ON Tst.TstMst_Key = SMtst.StGrpTst_GrpId LEFT JOIN Test_Mst TstGR ON TstGR.TstMst_Key = SMtst.[StGrpTst_TstCode]  WHERE  " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId =" + nYrId + " AND inv.Inv_Status != -1 and  TsT.[TstMst_TypeId] = -2 group by TstGR.TstMst_Key,TstGR.TstMst_name)a group by TestCount, TstMst_Key, TstMst_name";


                    }


                }
                else
                {
                    if (TstPrfrmView == 0)
                    {
                        sqlStr = "SELECT COUNT(Tst.TstMst_Key) as TestCount,Tst.TstMst_Key,Tst.TstMst_name from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId =Tst.TstMst_Key  " +
                                               "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "'  AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name ORDER BY TstMst_name";

                    }
                    else
                    {
                        sqlStr = "SELECT SUM(TestCount) AS TestCount,TstMst_Key as TstMst_Key,TstMst_name as TstMst_name from (SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name,0 AS ntype  " +
"from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status != -1 AND TstMst_TypeId = -2 group by TstMst_Key, TstMst_name" +
" UNION " +
" SELECT COUNT(TstMst_Key) as TestCount, Tst.TstMst_Key as TstMst_Key, Tst.TstMst_name as TstMst_name ,1 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId = " + nYrId + "" +
" AND inv.Inv_Status != -1 AND TstMst_TypeId != -2  group by TstMst_Key,TstMst_name" +
"  union " +
" SELECT COUNT(TstGR.TstMst_Key) as TestCount, TstGR.TstMst_Key as TstMst_Key, TstGR.TstMst_name as TstMst_name,2 AS ntype from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No = invdet.InvItm_Invno and inv.Inv_YrId = invdet.InvItm_YrId and " +
"inv.Inv_CpyId = invdet.InvItm_CpyId left join Test_Mst Tst on invdet.InvItm_TstId = Tst.TstMst_Key  left join dbo.Set_GroupTest SMtst WITH(NOLOCK) ON Tst.TstMst_Key = SMtst.StGrpTst_GrpId LEFT JOIN Test_Mst TstGR ON TstGR.TstMst_Key = SMtst.[StGrpTst_TstCode]  WHERE  " +
"inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' AND inv.Inv_YrId =" + nYrId + " AND inv.Inv_Status != -1 and  TsT.[TstMst_TypeId] = -2 group by TstGR.TstMst_Key,TstGR.TstMst_name)a group by TestCount, TstMst_Key, TstMst_name";

                    }

                }
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //adapt.Fill(dsPrint, "InvItmDetails_View");
                cmd = new SqlCommand(sqlStr);
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestPerformance.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_TestPerformance.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFTestPerfomanceDivWise()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomanceDivisionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomanceDivisionWise";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult TestPerfomanceDivWise(branchdetails tstPrfmncDivObj)
        {
            //List<branchdetails> bdls = Session["branchdls"] as List<branchdetails>;payModedls
            logindetails l = Session["logindls"] as logindetails;
            if (l != null)
            {
                double? nYrId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double BrMst_Key = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;

                string Nfile_name = "";
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                //string brnchName = bdls.BrMst_Name;
                string filepath = "";
                string Reportfilepaths = "";
                string Head1, Head2, Head3;

                string fromdatee = tstPrfmncDivObj.ff;
                string todatee = tstPrfmncDivObj.tt;
                //*******************
                //string[] dateString2 = fromdatee.Split('/');
                //if (Convert.ToInt32(dateString2[1]) < 10)
                //{
                //    dateString2[1] = "0" + dateString2[1];
                //}
                //if (Convert.ToInt32(dateString2[0]) < 10)
                //{
                //    dateString2[0] = "0" + dateString2[0];
                //}
                //fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                ////fromdat 11 / 30 / 2021 11:11:40 AM
                //string[] dateString3 = todatee.Split('/');
                //if (Convert.ToInt32(dateString3[1]) < 10)
                //{
                //    dateString3[1] = "0" + dateString3[1];
                //}
                //if (Convert.ToInt32(dateString3[0]) < 10)
                //{
                //    dateString3[0] = "0" + dateString3[0];
                //}
                //DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                //**********************
                string[] dateString2 = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                string[] dateString3 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString3[1] + "/" + dateString3[0] + "/" + dateString3[2]);
                fromdate = fromdat;
                todate = todat;
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");

                sqlcon.Open();
                DataSet dsPrint = new DataSet();
                DataTable dtMaster = new DataTable();
                DataTable InvItmDetails_View = new DataTable();
                DataTable dtDetails = new DataTable();
                DataTable CancelledInvoice = new DataTable();
                DataTable PendingReg = new DataTable();
                DataTable dTitle = new DataTable();
                DataTable CorpSummary = new DataTable();
                dtMaster.TableName = "dtMaster";
                dTitle.TableName = "dTitle";
                InvItmDetails_View.TableName = "InvItmDetails_View";
                dtDetails.TableName = "dtDetails";
                CancelledInvoice.TableName = "CancelledInv";
                PendingReg.TableName = "PendingReg";
                CorpSummary.TableName = "CorpSummary";
                double BrmstKey = 0;
                brnchName = tstPrfmncDivObj.BrMst_Name;
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter sDa;
                string nCondition = "";
                //int nYrId = DateTime.Now.Year;
                //int nYrId = 2122;
                string sqlStr = "";
                //Nfile_name += "Report_" + inv_no + "_" + NowDate + "_" + "Covid";

                List<branchdetails> b = Session["branchdls"] as List<branchdetails>;
                string BrmstName = tstPrfmncDivObj.BrMst_Name;
                Head1 = "TEST PERFORMANCE";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");

                foreach (branchdetails bdl in b)
                {
                    if (bdl.BrMst_Name == BrmstName)
                    {
                        BrmstKey = bdl.BrMst_Key;
                    }

                }
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);

                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "TestPerfomanceDivisionWise";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "TestPerfomanceDivisionWise";
                    brKey = (int)BrmstKey;
                }
                //*************************************************************************************************
                if (BrmstKey > 0)
                {

                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key " +
                            "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND inv.Inv_CpyId = " + BrmstKey + " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name,Mstr_Desc ORDER BY TstMst_name";

                }
                else
                {
                    sqlStr = "SELECT COUNT(Tst1.TstMst_Key) as TestCount,Tst1.TstMst_Key,Tst1.TstMst_name,mst1.Mstr_Desc from Invoice_Mst inv left join Invoice_Det invdet on inv.Inv_No=invdet.InvItm_Invno and inv.Inv_YrId=invdet.InvItm_YrId and inv.Inv_CpyId=invdet.InvItm_CpyId left join Test_Mst Tst1 on invdet.InvItm_TstId =Tst1.TstMst_Key left join Masters Mst1 on Tst1.TstMst_DivsnId=Mst1.Mstr_Key  " +
                                          "WHERE inv.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND inv.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                                          " AND inv.Inv_YrId = " + nYrId + " AND inv.Inv_Status!=-1 group by TstMst_Key,TstMst_name,mst.Mstr_Desc  ORDER BY TstMst_name";

                }
                cmd = new SqlCommand(sqlStr);
                //cmd.CommandTimeout = 0;
                sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                sDa.Fill(dtDetails);
                //cmd = new SqlCommand(sqlStr);
                //SqlDataAdapter adapt = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //adapt.Fill(dsPrint, "InvItmDetails_View");
                //cmd = new SqlCommand(sqlStr);
                //sDa = new SqlDataAdapter(cmd.CommandText, sqlcon);
                //sDa.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //************************************************************************************************
                ReportDocument reportDocument = new ReportDocument();
                Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_TestPerformanceDiv.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_TestPerformanceDiv.xsd");
                try
                {
                    reportDocument.Load(filepath);
                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {
                }
                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();




                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + BrmstKey.ToString() + "----------" + BrmstName + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                //*************************************************************************************************
                //double? brmstKey=db.ba
                sqlcon.Close();
                return Json(new { Result = "OK" });
            }
            else
            {
                return Json(new { Result = "ERROR" });
            }
        }
        public FileResult PDFMultplTstWiseInvce()
        {
            if (brKey > 0)
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MultipleTestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }
            else
            {
                string fileName = "";
                fileName += "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "MultipleTestWiseInvoices";
                fileName = fileName + ".pdf";
                string ReportURL = Server.MapPath("~/PDFReport/" + fileName);
                byte[] FileBytes = System.IO.File.ReadAllBytes(ReportURL);
                return File(FileBytes, "application/pdf");
            }


        }
        public JsonResult MultplTstWiseInvce(branchdetails multTstInvObj)
        {
            logindetails l = Session["logindls"] as logindetails;
            int Id = 0;
            string Nfile_name = "";
            string BrmstName = "";
            double BrmstKey = 0;
            string nCondition = "";
            string Condition = "";
            string sqlStr = "";
            string[] TestClctnObj = multTstInvObj.TestClctnObj;
            string[] TestKeyObj = multTstInvObj.TestKeyObj;
            BrmstName = multTstInvObj.BrMst_Name;
            BrmstKey = multTstInvObj.BrMst_Key;
            for (int i = 0; i < TestKeyObj.Count(); i++)
            {
                if (Condition == "")
                {
                    Condition += (TestKeyObj[i]).ToString();
                }
                else
                {
                    Condition += "," + (TestKeyObj[i]).ToString();
                }
            }
            if (l != null)
            {
                if (Condition != "")
                {
                    nCondition = " and TstMst_Key in(" + Condition + ")";
                }
                double? YearId = l.Yr_Id;
                string Yr_FYear = l.Yr_FYear;
                double CompanyId = l.BrMst_Key;
                string BrMst_Code = l.BrMst_Code;
                string BrMst_Name = l.BrMst_Name;
                string fromdatee = multTstInvObj.ff;
                string todatee = multTstInvObj.tt;
                SqlConnection sqlcon = new SqlConnection();
                sqlcon = con.dbcon();
                sqlcon.Open();
                string Head1 = "";
                string Head2 = "";
                string Head3 = "";
                DataSet dsPrint = new DataSet();
                DataTable dTitle = new DataTable();
                DataTable dtDetails = new DataTable();
                dTitle.TableName = "dTitle";
                dtDetails.TableName = "dtDetails";
                string[] dateString = fromdatee.Split('/');
                DateTime fromdat = DateTime.Parse(dateString[1] + "/" + dateString[0] + "/" + dateString[2]);
                string[] dateString2 = todatee.Split('/');
                DateTime todat = Convert.ToDateTime(dateString2[1] + "/" + dateString2[0] + "/" + dateString2[2]);
                fromdate = fromdat;
                todate = todat; /*Br_Name fromdate todate*/
                fdt = fromdate.ToString("ddMMyyyy");
                tdt = todate.ToString("ddMMyyyy");
                brnchName = BrmstName;
                //***********************************
                int splid = 0;
                int testid = 0;
                string spl = "";
                string test = "";
                Boolean chk = false;
                int temp = 0;
                double OpeningBal = 0;
                SqlCommand cmd0 = new SqlCommand();
                cmd0.Connection = sqlcon;
                cmd0.CommandTimeout = 0;
                cmd0.CommandType = CommandType.Text;
                SqlDataAdapter sd0 = new SqlDataAdapter();
                DataSet ds0 = new DataSet();
                Head1 = "TEST WISE STATEMENT";
                Head2 = "FROM : " + fromdate.ToString("dd/MM/yyyy") + "  To : " + todate.ToString("dd/MM/yyyy");
                Head3 = BrmstKey.ToString();
                dTitle = FillTitleTbl(Head1, Head2, Head3);
                if (BrmstKey > 0)
                {
                    nCondition = " AND Inv_BrID=" + BrmstKey + "";
                }
                if (BrmstKey > 0)
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "MultipleTestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                else
                {
                    Nfile_name = "Report_" + fdt + "_" + tdt + "_" + "All" + "_" + "MultipleTestWiseInvoices";
                    brKey = (int)BrmstKey;
                }
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + "MultipleTestWiseInvoices";

                //****************************************************
                if (BrmstKey > 0)
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                             "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                             "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                             "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                             "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                             "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                             "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                             "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                             "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                             "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                             "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                             "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                             "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                             "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                             "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                             "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                             "AND A.Inv_CpyId = " + BrmstKey + " AND A.Inv_YrId = " + YearId + " " + nCondition;
                }
                else
                {
                    sqlStr = "SELECT B.InvItm_key, B.InvItm_Invno, B.InvItm_TstId, B.InvItm_rate,B.InvItm_Orgrate, B.InvItm_Issued, " +
                            "D.AhMst_pName AS DrName, A.Inv_No, A.Inv_IsInsrnce,  " +
                            "A.Inv_PntId, A.Inv_name, A.Inv_Gender, A.Inv_age, A.Inv_ageymd,A.Inv_phno, A.Inv_Address, A.Inv_SmplDate, A.Inv_RsltNO,  " +
                            "A.Inv_BrID, A.Inv_Date, A.Inv_time, A.Inv_InsId, A.Inv_AreaId, A.Inv_EmailtoPatient, A.Inv_Email, A.Inv_EtoDr, A.Inv_DrId,  " +
                            "A.Inv_OutDr, A.Inv_hospId, A.Inv_Schrge, A.Inv_DiscId, A.Inv_CltnID, A.Invl_DiscPer, A.Inv_RepTime, A.Inv_GrosAmt,  " +
                            "A.Inv_DiscAmt, A.Inv_OthAmt, A.Inv_Netamt, A.Inv_RcvdAmt, A.Inv_BalAmt, A.Inv_Comment, A.Inv_CmpltdDate, A.Inv_CmpltdTime,  " +
                            "A.Inv_OthCmnt, A.Inv_User, A.Invl_IsPending, A.Inv_Status, A.Inv_CnlComnt, A.Inv_Cnltmestmp, A.Inv_CurRcvdAmt, A.Inv_CurBalAmt,  " +
                            "C.TstMst_Key , C.TstMst_name , C.TstMst_TypeId , C.TstMst_Rate , C.TstMst_DeptId ,C.TstMst_MthdId , C.TstMst_UnitId ,C.TstMst_OthComment ,  " +
                            "C.TstMst_PrntCmnTch , C.TstMst_IsAvoid , C.TstMst_CalcType ,C.TstMst_OrderBy , C.TstMst_DispHead , C.TstMst_DivsnId , C.TstMst_TechId , " +
                            "B.InvItm_SmplId, B.InvItm_SmplStats, B.InvItm_UsrId, B.InvItm_YrId, B.InvItm_CpyId, B.InvItm_Updtd, A.Inv_UsrId, A.Inv_YrId, A.Inv_CpyId, A.Inv_Updtd,  " +
                            "C.TstMst_ShortName, B.InvItm_CutDateTime, B.InvItm_CutUser, B.InvItm_CutPaper FROM dbo.Invoice_Det B WITH (NOLOCK) LEFT OUTER JOIN " +
                            "dbo.Invoice_Mst A WITH (NOLOCK)  ON B.InvItm_YrId = A.Inv_YrId and B.InvItm_CpyId = A.Inv_CpyId AND  " +
                            "B.InvItm_Invno = A.Inv_No LEFT OUTER JOIN " +
                            "dbo.AccountHeads_Mst D WITH (NOLOCK) ON A.Inv_DrId = D.AhMst_Key LEFT OUTER JOIN " +
                            "dbo.Test_Mst C WITH (NOLOCK) ON B.InvItm_TstId = C.TstMst_Key " +
                            "WHERE A.Inv_Date >= '" + fromdate.ToString("yyyy-MM-dd") + "' AND A.Inv_Date <= '" + todate.ToString("yyyy-MM-dd") + "' " +
                            "AND  A.Inv_YrId = " + YearId + " " + nCondition;

                }
                cmd0 = new SqlCommand(sqlStr);
                sd0 = new SqlDataAdapter(cmd0.CommandText, sqlcon);
                sd0.Fill(dtDetails);
                dsPrint.Tables.Clear();
                dsPrint.Tables.Add(dTitle);
                dsPrint.Tables.Add(dtDetails);
                //****************************************************
                string filepath = "";
                sqlcon.Close();
                //Nfile_name += "Report_" + fdt + "_" + tdt + "_" + brnchName + "_" + "CollectionSummeryBranchWise";
                ReportDocument reportDocument = new ReportDocument();
                string Reportfilepaths = Server.MapPath("~/Reports/");
                filepath = Path.Combine(Server.MapPath("~/Reports"), "rpt_MulTestwiseStmnt.rpt");
                dsPrint.WriteXmlSchema(Reportfilepaths + "rpt_MulTestwiseStmnt.xsd");
                try
                {
                    reportDocument.Load(filepath);


                    reportDocument.SetDataSource(dsPrint);
                }
                catch (Exception exe)
                {

                }

                string pdfFile = "";
                string pdfFilepath = Server.MapPath("~/PDFReport/");
                string TempLog = "";


                try
                {


                    Nfile_name = Nfile_name + ".pdf";
                    pdfFile = pdfFilepath + Nfile_name;



                    TempLog = pdfFile;

                    CrystalDecisions.Shared.ExportOptions CrExportOptions;
                    DiskFileDestinationOptions CrDiskFileDestinationOptions = new DiskFileDestinationOptions();
                    PdfRtfWordFormatOptions CrFormatTypeOptions = new PdfRtfWordFormatOptions();
                    CrDiskFileDestinationOptions.DiskFileName = TempLog;

                    CrExportOptions = reportDocument.ExportOptions;
                    CrExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    CrExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;

                    CrExportOptions.DestinationOptions = CrDiskFileDestinationOptions;

                    CrExportOptions.FormatOptions = CrFormatTypeOptions;

                    reportDocument.Export();

                    sqlcon.Close();
                    return Json(new { Result = "OK" });


                    //************************************************************
                }
                catch (Exception exe)
                {
                    string ModiData = " PdfExport Error- " + exe.Message + " ";

                    StreamWriter tstream = System.IO.File.AppendText(Server.MapPath("~/bin/Debug") + "\\ERRORLOG.txt");
                    //StreamWriter tstream = System.IO.File.WriteAllText(Server.MapPath(""), "ERRORLOG.txt"));
                    try
                    {
                        tstream.WriteLine("");
                        tstream.WriteLine(DateTime.Now + "error in mid --" + "----------" + BrMst_Name + "--- " + exe.Message);
                        tstream.WriteLine("");
                        tstream.Flush();
                        tstream.Close();
                    }
                    catch { }
                    //errorflag = 1;
                }
                return Json(new { Result = "OK" });


            }
            else
            {
                return Json(new { Result = "ERROR" });
            }

        }

    }
}